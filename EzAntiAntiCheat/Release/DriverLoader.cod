; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35215.0 

	TITLE	C:\EzAntiAntiCheat\EzAntiAntiCheat\Release\DriverLoader.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__Avx2WmemEnabledWeakValue
PUBLIC	_g_ServiceInstalled
PUBLIC	_g_hService
PUBLIC	_g_hSCManager
PUBLIC	??_C@_1EM@KDCBBNEO@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1IG@FMBIKIH@?$AA?2?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAR?$AAo?$AAo?$AAt?$AA?2?$AAS?$AAy?$AAs@ ; `string'
;	COMDAT __Avx2WmemEnabledWeakValue
_BSS	SEGMENT
__Avx2WmemEnabledWeakValue DD 01H DUP (?)
_BSS	ENDS
_BSS	SEGMENT
_g_ServiceInstalled DB 01H DUP (?)
	ALIGN	4

_g_hService DD	01H DUP (?)
_g_hSCManager DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_1IG@FMBIKIH@?$AA?2?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAR?$AAo?$AAo?$AAt?$AA?2?$AAS?$AAy?$AAs@
CONST	SEGMENT
??_C@_1IG@FMBIKIH@?$AA?2?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAR?$AAo?$AAo?$AAt?$AA?2?$AAS?$AAy?$AAs@ DB '\'
	DB	00H, 'S', 00H, 'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	'R', 00H, 'o', 00H, 'o', 00H, 't', 00H, '\', 00H, 'S', 00H, 'y'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, '3', 00H, '2', 00H
	DB	'\', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, '\', 00H, 'E', 00H, 'z', 00H, 'A', 00H, 'n', 00H
	DB	't', 00H, 'i', 00H, 'A', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'C'
	DB	00H, 'h', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'D', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H, '-', 00H, 'x', 00H, '8'
	DB	00H, '6', 00H, '-', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H
	DB	'a', 00H, 's', 00H, 'e', 00H, '.', 00H, 's', 00H, 'y', 00H, 's'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@KDCBBNEO@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EM@KDCBBNEO@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@ DB 'E'
	DB	00H, 'z', 00H, 'A', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'A', 00H
	DB	'n', 00H, 't', 00H, 'i', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'D', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '-', 00H, 'x', 00H, '8', 00H, '6', 00H, '-', 00H, 'R'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	'.', 00H, 's', 00H, 'y', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	_sprintf_s
PUBLIC	??0exception@std@@QAE@ABV01@@Z			; std::exception::exception
PUBLIC	??1exception@std@@UAE@XZ			; std::exception::~exception
PUBLIC	?what@exception@std@@UBEPBDXZ			; std::exception::what
PUBLIC	??_Gexception@std@@UAEPAXI@Z			; std::exception::`scalar deleting destructor'
PUBLIC	??0bad_alloc@std@@QAE@ABV01@@Z			; std::bad_alloc::bad_alloc
PUBLIC	??_Gbad_alloc@std@@UAEPAXI@Z			; std::bad_alloc::`scalar deleting destructor'
PUBLIC	??0bad_array_new_length@std@@QAE@XZ		; std::bad_array_new_length::bad_array_new_length
PUBLIC	??1bad_array_new_length@std@@UAE@XZ		; std::bad_array_new_length::~bad_array_new_length
PUBLIC	??0bad_array_new_length@std@@QAE@ABV01@@Z	; std::bad_array_new_length::bad_array_new_length
PUBLIC	??_Gbad_array_new_length@std@@UAEPAXI@Z		; std::bad_array_new_length::`scalar deleting destructor'
PUBLIC	?_Throw_bad_array_new_length@std@@YAXXZ		; std::_Throw_bad_array_new_length
PUBLIC	?_Xlen_string@std@@YAXXZ			; std::_Xlen_string
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAAV?$allocator@_W@2@QA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	??0runtime_error@std@@QAE@ABV01@@Z		; std::runtime_error::runtime_error
PUBLIC	??_Gruntime_error@std@@UAEPAXI@Z		; std::runtime_error::`scalar deleting destructor'
PUBLIC	??1error_category@std@@UAE@XZ			; std::error_category::~error_category
PUBLIC	?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition
PUBLIC	?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent
PUBLIC	?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent
PUBLIC	?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
PUBLIC	??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
PUBLIC	??0_System_error@std@@QAE@ABV01@@Z		; std::_System_error::_System_error
PUBLIC	??_G_System_error@std@@UAEPAXI@Z		; std::_System_error::`scalar deleting destructor'
PUBLIC	??1system_error@std@@UAE@XZ			; std::system_error::~system_error
PUBLIC	??0system_error@std@@QAE@ABV01@@Z		; std::system_error::system_error
PUBLIC	??_Gsystem_error@std@@UAEPAXI@Z			; std::system_error::`scalar deleting destructor'
PUBLIC	?name@_Iostream_error_category2@std@@UBEPBDXZ	; std::_Iostream_error_category2::name
PUBLIC	?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category2::message
PUBLIC	??_G_Iostream_error_category2@std@@UAEPAXI@Z	; std::_Iostream_error_category2::`scalar deleting destructor'
PUBLIC	??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
PUBLIC	??0bad_cast@std@@QAE@XZ				; std::bad_cast::bad_cast
PUBLIC	??1bad_cast@std@@UAE@XZ				; std::bad_cast::~bad_cast
PUBLIC	??0bad_cast@std@@QAE@ABV01@@Z			; std::bad_cast::bad_cast
PUBLIC	??_Gbad_cast@std@@UAEPAXI@Z			; std::bad_cast::`scalar deleting destructor'
PUBLIC	?_Throw_bad_cast@std@@YAXXZ			; std::_Throw_bad_cast
PUBLIC	??1_Facet_base@std@@UAE@XZ			; std::_Facet_base::~_Facet_base
PUBLIC	??_G_Facet_base@std@@UAEPAXI@Z			; std::_Facet_base::`scalar deleting destructor'
PUBLIC	??0_Locinfo@std@@QAE@PBD@Z			; std::_Locinfo::_Locinfo
PUBLIC	??1_Locinfo@std@@QAE@XZ				; std::_Locinfo::~_Locinfo
PUBLIC	??1?$_Yarn@D@std@@QAE@XZ			; std::_Yarn<char>::~_Yarn<char>
PUBLIC	??1?$_Yarn@_W@std@@QAE@XZ			; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
PUBLIC	?_Incref@facet@locale@std@@UAEXXZ		; std::locale::facet::_Incref
PUBLIC	?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ; std::locale::facet::_Decref
PUBLIC	??1facet@locale@std@@MAE@XZ			; std::locale::facet::~facet
PUBLIC	??_Gfacet@locale@std@@MAEPAXI@Z			; std::locale::facet::`scalar deleting destructor'
PUBLIC	??1locale@std@@QAE@XZ				; std::locale::~locale
PUBLIC	??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
PUBLIC	??1ctype_base@std@@UAE@XZ			; std::ctype_base::~ctype_base
PUBLIC	??_Gctype_base@std@@UAEPAXI@Z			; std::ctype_base::`scalar deleting destructor'
PUBLIC	??1?$ctype@D@std@@MAE@XZ			; std::ctype<char>::~ctype<char>
PUBLIC	?do_tolower@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_tolower
PUBLIC	?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_tolower
PUBLIC	?do_toupper@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_toupper
PUBLIC	?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z	; std::ctype<char>::do_toupper
PUBLIC	?do_widen@?$ctype@D@std@@MBEDD@Z		; std::ctype<char>::do_widen
PUBLIC	?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z	; std::ctype<char>::do_widen
PUBLIC	?do_narrow@?$ctype@D@std@@MBEDDD@Z		; std::ctype<char>::do_narrow
PUBLIC	?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z	; std::ctype<char>::do_narrow
PUBLIC	??_G?$ctype@D@std@@MAEPAXI@Z			; std::ctype<char>::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
PUBLIC	??1?$ctype@_W@std@@MAE@XZ			; std::ctype<wchar_t>::~ctype<wchar_t>
PUBLIC	?do_is@?$ctype@_W@std@@MBE_NF_W@Z		; std::ctype<wchar_t>::do_is
PUBLIC	?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z	; std::ctype<wchar_t>::do_is
PUBLIC	?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_is
PUBLIC	?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z	; std::ctype<wchar_t>::do_scan_not
PUBLIC	?do_tolower@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_tolower
PUBLIC	?do_toupper@?$ctype@_W@std@@MBE_W_W@Z		; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z	; std::ctype<wchar_t>::do_toupper
PUBLIC	?do_widen@?$ctype@_W@std@@MBE_WD@Z		; std::ctype<wchar_t>::do_widen
PUBLIC	?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z	; std::ctype<wchar_t>::do_widen
PUBLIC	?do_narrow@?$ctype@_W@std@@MBED_WD@Z		; std::ctype<wchar_t>::do_narrow
PUBLIC	?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z	; std::ctype<wchar_t>::do_narrow
PUBLIC	??_G?$ctype@_W@std@@MAEPAXI@Z			; std::ctype<wchar_t>::`scalar deleting destructor'
PUBLIC	??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
PUBLIC	??1failure@ios_base@std@@UAE@XZ			; std::ios_base::failure::~failure
PUBLIC	??0failure@ios_base@std@@QAE@ABV012@@Z		; std::ios_base::failure::failure
PUBLIC	??_Gfailure@ios_base@std@@UAEPAXI@Z		; std::ios_base::failure::`scalar deleting destructor'
PUBLIC	?clear@ios_base@std@@QAEXH_N@Z			; std::ios_base::clear
PUBLIC	?IsServiceRunning@@YA_NPAUSC_HANDLE__@@@Z	; IsServiceRunning
PUBLIC	?CopyDriverToSystemDrivers@@YA_NXZ		; CopyDriverToSystemDrivers
PUBLIC	?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
PUBLIC	?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
PUBLIC	??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
PUBLIC	?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
PUBLIC	?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
PUBLIC	??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
PUBLIC	?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
PUBLIC	??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?InstallService@@YA_NXZ				; InstallService
PUBLIC	?LoadDriver@@YA_NXZ				; LoadDriver
PUBLIC	?UnloadDriver@@YA_NXZ				; UnloadDriver
PUBLIC	??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
PUBLIC	??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
PUBLIC	??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>
PUBLIC	??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
PUBLIC	??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
PUBLIC	??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
PUBLIC	??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
PUBLIC	?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
PUBLIC	?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput
PUBLIC	?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
PUBLIC	?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
PUBLIC	??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor'
PUBLIC	??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
PUBLIC	??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
PUBLIC	?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
PUBLIC	?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
PUBLIC	?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
PUBLIC	?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
PUBLIC	??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
PUBLIC	??$_Float_put_desired_precision@O@std@@YAH_JH@Z	; std::_Float_put_desired_precision<long double>
PUBLIC	??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput_v3<0>
PUBLIC	??$_Float_put_desired_precision@N@std@@YAH_JH@Z	; std::_Float_put_desired_precision<double>
PUBLIC	??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
PUBLIC	?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<wchar_t>::_Getcat
PUBLIC	??1?$numpunct@_W@std@@MAE@XZ			; std::numpunct<wchar_t>::~numpunct<wchar_t>
PUBLIC	?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ	; std::numpunct<wchar_t>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ	; std::numpunct<wchar_t>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<wchar_t>::do_grouping
PUBLIC	?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::do_falsename
PUBLIC	?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ; std::numpunct<wchar_t>::do_truename
PUBLIC	??_G?$numpunct@_W@std@@MAEPAXI@Z		; std::numpunct<wchar_t>::`scalar deleting destructor'
PUBLIC	??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput_v3<0>
PUBLIC	??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
PUBLIC	??1?$numpunct@D@std@@MAE@XZ			; std::numpunct<char>::~numpunct<char>
PUBLIC	?do_decimal_point@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_decimal_point
PUBLIC	?do_thousands_sep@?$numpunct@D@std@@MBEDXZ	; std::numpunct<char>::do_thousands_sep
PUBLIC	?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_grouping
PUBLIC	?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_falsename
PUBLIC	?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ; std::numpunct<char>::do_truename
PUBLIC	??_G?$numpunct@D@std@@MAEPAXI@Z			; std::numpunct<char>::`scalar deleting destructor'
PUBLIC	??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
PUBLIC	??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
PUBLIC	??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::numpunct<char> >::~_Tidy_guard<std::numpunct<char> >
PUBLIC	??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z	; std::_Maklocstr<char>
PUBLIC	??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z	; std::_Maklocchr<char>
PUBLIC	??1?$_Tidy_guard@V?$numpunct@_W@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::numpunct<wchar_t> >::~_Tidy_guard<std::numpunct<wchar_t> >
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_7exception@std@@6B@				; std::exception::`vftable'
PUBLIC	??_C@_0BC@EOODALEL@Unknown?5exception@		; `string'
PUBLIC	??_7bad_alloc@std@@6B@				; std::bad_alloc::`vftable'
PUBLIC	??_7bad_array_new_length@std@@6B@		; std::bad_array_new_length::`vftable'
PUBLIC	??_C@_0BF@KINCDENJ@bad?5array?5new?5length@	; `string'
PUBLIC	??_R0?AVexception@std@@@8			; std::exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
PUBLIC	__TI3?AVbad_array_new_length@std@@
PUBLIC	__CTA3?AVbad_array_new_length@std@@
PUBLIC	??_R0?AVbad_array_new_length@std@@@8		; std::bad_array_new_length `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
PUBLIC	??_R0?AVbad_alloc@std@@@8			; std::bad_alloc `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long@		; `string'
PUBLIC	??_7runtime_error@std@@6B@			; std::runtime_error::`vftable'
PUBLIC	??_R0?AVruntime_error@std@@@8			; std::runtime_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
PUBLIC	??_7_System_error@std@@6B@			; std::_System_error::`vftable'
PUBLIC	??_C@_02LMMGGCAJ@?3?5@				; `string'
PUBLIC	??_7system_error@std@@6B@			; std::system_error::`vftable'
PUBLIC	??_R0?AVsystem_error@std@@@8			; std::system_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
PUBLIC	??_R0?AV_System_error@std@@@8			; std::_System_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
PUBLIC	??_7_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`vftable'
PUBLIC	??_C@_08LLGCOLLL@iostream@			; `string'
PUBLIC	?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
PUBLIC	??_7bad_cast@std@@6B@				; std::bad_cast::`vftable'
PUBLIC	??_C@_08EPJLHIJG@bad?5cast@			; `string'
PUBLIC	__TI2?AVbad_cast@std@@
PUBLIC	__CTA2?AVbad_cast@std@@
PUBLIC	??_R0?AVbad_cast@std@@@8			; std::bad_cast `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
PUBLIC	??_7_Facet_base@std@@6B@			; std::_Facet_base::`vftable'
PUBLIC	??_C@_0BA@ELKIONDK@bad?5locale?5name@		; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_7facet@locale@std@@6B@			; std::locale::facet::`vftable'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_7ctype_base@std@@6B@				; std::ctype_base::`vftable'
PUBLIC	??_7?$ctype@D@std@@6B@				; std::ctype<char>::`vftable'
PUBLIC	??_7?$ctype@_W@std@@6B@				; std::ctype<wchar_t>::`vftable'
PUBLIC	??_7failure@ios_base@std@@6B@			; std::ios_base::failure::`vftable'
PUBLIC	??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@	; `string'
PUBLIC	??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@	; `string'
PUBLIC	??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@	; `string'
PUBLIC	__TI5?AVfailure@ios_base@std@@
PUBLIC	__CTA5?AVfailure@ios_base@std@@
PUBLIC	??_R0?AVfailure@ios_base@std@@@8		; std::ios_base::failure `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
PUBLIC	?systemDriverPath@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A ; systemDriverPath
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_0BM@JGPPEJKE@GetSystemDirectory?5failed?3?5@ ; `string'
PUBLIC	??_C@_1BE@HOKNBJFH@?$AA?2?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2@ ; `string'
PUBLIC	??_C@_1FI@JKJCHNGA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5@ ; `string'
PUBLIC	??_C@_1CG@KLNDMGEC@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAc?$AAo?$AAp?$AAi?$AAe?$AAd?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_0BH@CHLAMOON@OpenSCManager?5failed?3?5@	; `string'
PUBLIC	??_C@_1EE@HOCONKHL@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_0BK@PBFPCIGJ@Failed?5to?5prepare?5driver?6@ ; `string'
PUBLIC	??_C@_0BH@FIKAJJGA@CreateService?5failed?3?5@	; `string'
PUBLIC	??_C@_0BO@GGNPNIOP@Service?5created?5successfully?6@ ; `string'
PUBLIC	??_C@_0BI@CFIJGKKJ@Service?5already?5exists?6@	; `string'
PUBLIC	??_C@_0BJ@GIHOLAM@Service?5already?5running?6@	; `string'
PUBLIC	??_C@_0CD@CIOHMHPM@Failed?5to?5start?5existing?5servic@ ; `string'
PUBLIC	??_C@_0BO@MHOMMBJC@Service?5started?5successfully?6@ ; `string'
PUBLIC	??_C@_0BG@OGKCKKFC@StartService?5failed?3?5@	; `string'
PUBLIC	??_C@_0BI@EFJAHLMN@Service?5handle?5invalid?6@	; `string'
PUBLIC	??_C@_0BK@HODICPMK@Failed?5to?5start?5service?3?5@ ; `string'
PUBLIC	??_C@_0BM@OKKGCNAB@Driver?5loaded?5successfully?6@ ; `string'
PUBLIC	??_C@_0BJ@CJNJBFLI@Failed?5to?5stop?5service?3?5@ ; `string'
PUBLIC	??_C@_0BO@KBAIFLAC@Service?5stopped?5successfully?6@ ; `string'
PUBLIC	??_C@_0BL@HMODDBCB@Failed?5to?5delete?5service?3?5@ ; `string'
PUBLIC	??_C@_0BO@DANBJCAN@Service?5deleted?5successfully?6@ ; `string'
PUBLIC	?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
PUBLIC	?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
PUBLIC	??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vftable'
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
PUBLIC	?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
PUBLIC	??_C@_02BBAHNLBA@?$CFp@				; `string'
PUBLIC	??_C@_02CLHGNPPK@Lu@				; `string'
PUBLIC	??_C@_02HIKPPMOK@Ld@				; `string'
PUBLIC	??_C@_02BDDLJJBK@lu@				; `string'
PUBLIC	??_C@_02EAOCLKAK@ld@				; `string'
PUBLIC	?id@?$numpunct@_W@std@@2V0locale@2@A		; std::numpunct<wchar_t>::id
PUBLIC	??_7?$numpunct@_W@std@@6B@			; std::numpunct<wchar_t>::`vftable'
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	??_7?$numpunct@D@std@@6B@			; std::numpunct<char>::`vftable'
PUBLIC	??_C@_02MDKMJEGG@eE@				; `string'
PUBLIC	??_C@_02OOPEBDOJ@pP@				; `string'
PUBLIC	??_C@_01LFCBOECM@?4@				; `string'
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
PUBLIC	?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position@	; `string'
PUBLIC	??_R4exception@std@@6B@				; std::exception::`RTTI Complete Object Locator'
PUBLIC	??_R3exception@std@@8				; std::exception::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2exception@std@@8				; std::exception::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@exception@std@@8			; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_array_new_length@std@@6B@		; std::bad_array_new_length::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_array_new_length@std@@8		; std::bad_array_new_length::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_array_new_length@std@@8	; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@bad_alloc@std@@8			; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3bad_alloc@std@@8				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_alloc@std@@8				; std::bad_alloc::`RTTI Base Class Array'
PUBLIC	??_R4bad_alloc@std@@6B@				; std::bad_alloc::`RTTI Complete Object Locator'
PUBLIC	??_R4runtime_error@std@@6B@			; std::runtime_error::`RTTI Complete Object Locator'
PUBLIC	??_R3runtime_error@std@@8			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2runtime_error@std@@8			; std::runtime_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@runtime_error@std@@8		; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVerror_category@std@@@8			; std::error_category `RTTI Type Descriptor'
PUBLIC	??_R3error_category@std@@8			; std::error_category::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2error_category@std@@8			; std::error_category::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@error_category@std@@8		; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_System_error@std@@6B@			; std::_System_error::`RTTI Complete Object Locator'
PUBLIC	??_R3_System_error@std@@8			; std::_System_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_System_error@std@@8			; std::_System_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_System_error@std@@8		; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4system_error@std@@6B@			; std::system_error::`RTTI Complete Object Locator'
PUBLIC	??_R3system_error@std@@8			; std::system_error::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2system_error@std@@8			; std::system_error::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@system_error@std@@8		; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Iostream_error_category2@std@@6B@		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Iostream_error_category2@std@@@8	; std::_Iostream_error_category2 `RTTI Type Descriptor'
PUBLIC	??_R3_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Iostream_error_category2@std@@8		; std::_Iostream_error_category2::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Iostream_error_category2@std@@8	; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4bad_cast@std@@6B@				; std::bad_cast::`RTTI Complete Object Locator'
PUBLIC	??_R3bad_cast@std@@8				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2bad_cast@std@@8				; std::bad_cast::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@bad_cast@std@@8			; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4_Facet_base@std@@6B@			; std::_Facet_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV_Facet_base@std@@@8			; std::_Facet_base `RTTI Type Descriptor'
PUBLIC	??_R3_Facet_base@std@@8				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Facet_base@std@@8				; std::_Facet_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Facet_base@std@@8		; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4facet@locale@std@@6B@			; std::locale::facet::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVfacet@locale@std@@@8			; std::locale::facet `RTTI Type Descriptor'
PUBLIC	??_R3facet@locale@std@@8			; std::locale::facet::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2facet@locale@std@@8			; std::locale::facet::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@facet@locale@std@@8		; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AU_Crt_new_delete@std@@@8			; std::_Crt_new_delete `RTTI Type Descriptor'
PUBLIC	??_R3_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2_Crt_new_delete@std@@8			; std::_Crt_new_delete::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@_Crt_new_delete@std@@8		; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4ctype_base@std@@6B@			; std::ctype_base::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUctype_base@std@@@8			; std::ctype_base `RTTI Type Descriptor'
PUBLIC	??_R3ctype_base@std@@8				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ctype_base@std@@8				; std::ctype_base::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ctype_base@std@@8			; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@D@std@@6B@				; std::ctype<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@D@std@@@8			; std::ctype<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@D@std@@8				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@D@std@@8				; std::ctype<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@D@std@@8			; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$ctype@_W@std@@6B@			; std::ctype<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$ctype@_W@std@@@8			; std::ctype<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$ctype@_W@std@@8				; std::ctype<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$ctype@_W@std@@8			; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4failure@ios_base@std@@6B@			; std::ios_base::failure::`RTTI Complete Object Locator'
PUBLIC	??_R3failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2failure@ios_base@std@@8			; std::ios_base::failure::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@failure@ios_base@std@@8		; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > `RTTI Type Descriptor'
PUBLIC	??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$numpunct@_W@std@@6B@			; std::numpunct<wchar_t>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@_W@std@@@8			; std::numpunct<wchar_t> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@_W@std@@8			; std::numpunct<wchar_t>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@_W@std@@8			; std::numpunct<wchar_t>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@_W@std@@8		; std::numpunct<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4?$numpunct@D@std@@6B@			; std::numpunct<char>::`RTTI Complete Object Locator'
PUBLIC	??_R0?AV?$numpunct@D@std@@@8			; std::numpunct<char> `RTTI Type Descriptor'
PUBLIC	??_R3?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2?$numpunct@D@std@@8			; std::numpunct<char>::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@?$numpunct@D@std@@8		; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__real@4202a05f20000000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
EXTRN	__purecall:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__invoke_watson:PROC
EXTRN	_strcspn:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__GetSystemDirectoryW@8:PROC
EXTRN	__imp__CopyFileW@12:PROC
EXTRN	_calloc:PROC
EXTRN	_free:PROC
EXTRN	__imp__CloseServiceHandle@4:PROC
EXTRN	__imp__ControlService@12:PROC
EXTRN	__imp__CreateServiceW@52:PROC
EXTRN	__imp__DeleteService@4:PROC
EXTRN	__imp__OpenSCManagerW@12:PROC
EXTRN	__imp__OpenServiceW@12:PROC
EXTRN	__imp__QueryServiceStatusEx@20:PROC
EXTRN	__imp__StartServiceW@12:PROC
EXTRN	??0_Lockit@std@@QAE@H@Z:PROC			; std::_Lockit::_Lockit
EXTRN	??1_Lockit@std@@QAE@XZ:PROC			; std::_Lockit::~_Lockit
EXTRN	_frexp:PROC
EXTRN	___stdio_common_vsprintf_s:PROC
EXTRN	?_Xbad_alloc@std@@YAXXZ:PROC			; std::_Xbad_alloc
EXTRN	?_Xlength_error@std@@YAXPBD@Z:PROC		; std::_Xlength_error
EXTRN	?_Xout_of_range@std@@YAXPBD@Z:PROC		; std::_Xout_of_range
EXTRN	?_Xruntime_error@std@@YAXPBD@Z:PROC		; std::_Xruntime_error
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	___std_exception_copy:PROC
EXTRN	___std_exception_destroy:PROC
EXTRN	??_Eexception@std@@UAEPAXI@Z:PROC		; std::exception::`vector deleting destructor'
EXTRN	??_Ebad_alloc@std@@UAEPAXI@Z:PROC		; std::bad_alloc::`vector deleting destructor'
EXTRN	??_Ebad_array_new_length@std@@UAEPAXI@Z:PROC	; std::bad_array_new_length::`vector deleting destructor'
EXTRN	??_Eruntime_error@std@@UAEPAXI@Z:PROC		; std::runtime_error::`vector deleting destructor'
EXTRN	??_E_System_error@std@@UAEPAXI@Z:PROC		; std::_System_error::`vector deleting destructor'
EXTRN	??_Esystem_error@std@@UAEPAXI@Z:PROC		; std::system_error::`vector deleting destructor'
EXTRN	?_Syserror_map@std@@YAPBDH@Z:PROC		; std::_Syserror_map
EXTRN	??_E_Iostream_error_category2@std@@UAEPAXI@Z:PROC ; std::_Iostream_error_category2::`vector deleting destructor'
EXTRN	??_Ebad_cast@std@@UAEPAXI@Z:PROC		; std::bad_cast::`vector deleting destructor'
EXTRN	??_E_Facet_base@std@@UAEPAXI@Z:PROC		; std::_Facet_base::`vector deleting destructor'
EXTRN	?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z:PROC ; std::_Facet_Register
EXTRN	_localeconv:PROC
EXTRN	__Getctype:PROC
EXTRN	__Getcvt:PROC
EXTRN	__Mbrtowc:PROC
EXTRN	__Tolower:PROC
EXTRN	__Toupper:PROC
EXTRN	__Wcrtomb:PROC
EXTRN	__Getwctype:PROC
EXTRN	__Getwctypes:PROC
EXTRN	__Towlower:PROC
EXTRN	__Towupper:PROC
EXTRN	?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z:PROC ; std::_Locinfo::_Locinfo_ctor
EXTRN	?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z:PROC	; std::_Locinfo::_Locinfo_dtor
EXTRN	??_Efacet@locale@std@@MAEPAXI@Z:PROC		; std::locale::facet::`vector deleting destructor'
EXTRN	?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ:PROC ; std::locale::_Getgloballocale
EXTRN	??_Ectype_base@std@@UAEPAXI@Z:PROC		; std::ctype_base::`vector deleting destructor'
EXTRN	??_E?$ctype@D@std@@MAEPAXI@Z:PROC		; std::ctype<char>::`vector deleting destructor'
EXTRN	??_E?$ctype@_W@std@@MAEPAXI@Z:PROC		; std::ctype<wchar_t>::`vector deleting destructor'
EXTRN	??_Efailure@ios_base@std@@UAEPAXI@Z:PROC	; std::ios_base::failure::`vector deleting destructor'
EXTRN	??_E?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vector deleting destructor'
EXTRN	??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z:PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vector deleting destructor'
EXTRN	??_E?$numpunct@_W@std@@MAEPAXI@Z:PROC		; std::numpunct<wchar_t>::`vector deleting destructor'
EXTRN	??_E?$numpunct@D@std@@MAEPAXI@Z:PROC		; std::numpunct<char>::`vector deleting destructor'
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__dclass:PROC
EXTRN	__ldclass:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?_Id_cnt@id@locale@std@@0HA:DWORD		; std::locale::id::_Id_cnt
EXTRN	?id@?$ctype@D@std@@2V0locale@2@A:DWORD		; std::ctype<char>::id
EXTRN	?id@?$ctype@_W@std@@2V0locale@2@A:DWORD		; std::ctype<wchar_t>::id
EXTRN	?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE ; std::cout
EXTRN	?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A:BYTE ; std::wcout
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B DB 018H DUP (?) ; DRIVER_FILE_NAME
?systemDriverPath@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A DB 018H DUP (?) ; systemDriverPath
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<char> >::_Psave
_BSS	ENDS
;	COMDAT ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
_BSS	ENDS
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DD 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
_BSS	ENDS
;	COMDAT ?id@?$numpunct@_W@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@_W@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<wchar_t>::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DD 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
_BSS	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B
_BSS	SEGMENT
?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B DD 01H DUP (?) ; std::_Facetptr<std::numpunct<char> >::_Psave
_BSS	ENDS
CRT$XCU	SEGMENT
?DRIVER_FILE_NAME$initializer$@@3P6AXXZA DD FLAT:??__EDRIVER_FILE_NAME@@YAXXZ ; DRIVER_FILE_NAME$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@4202a05f20000000
CONST	SEGMENT
__real@4202a05f20000000 DQ 04202a05f20000000r	; 1e+10
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@D@std@@8 DD FLAT:??_R0?AV?$numpunct@D@std@@@8 ; std::numpunct<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@D@std@@8 ; std::numpunct<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@D@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@D@std@@8 DD 00H				; std::numpunct<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$numpunct@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::numpunct<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$numpunct@D@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@D@std@@6B@ DD 00H			; std::numpunct<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@D@std@@@8
	DD	FLAT:??_R3?$numpunct@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$numpunct@_W@std@@8 DD FLAT:??_R0?AV?$numpunct@_W@std@@@8 ; std::numpunct<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R2?$numpunct@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$numpunct@_W@std@@8 ; std::numpunct<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$numpunct@_W@std@@8
rdata$r	SEGMENT
??_R3?$numpunct@_W@std@@8 DD 00H			; std::numpunct<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$numpunct@_W@std@@@8
data$rs	SEGMENT
??_R0?AV?$numpunct@_W@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::numpunct<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$numpunct@_W@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$numpunct@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$numpunct@_W@std@@6B@ DD 00H			; std::numpunct<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$numpunct@_W@std@@@8
	DD	FLAT:??_R3?$numpunct@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8 DD 00H ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@'
	DB	'_W@std@@@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ DD 00H ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD FLAT:??_R1A@?0A@EA@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	SEGMENT
??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8 DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
data$rs	SEGMENT
??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@'
	DB	'std@@@std@@@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
rdata$r	SEGMENT
??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD 00H ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@8
	DD	FLAT:??_R3?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@failure@ios_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@failure@ios_base@std@@8 DD FLAT:??_R0?AVfailure@ios_base@std@@@8 ; std::ios_base::failure::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2failure@ios_base@std@@8
rdata$r	SEGMENT
??_R2failure@ios_base@std@@8 DD FLAT:??_R1A@?0A@EA@failure@ios_base@std@@8 ; std::ios_base::failure::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@system_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3failure@ios_base@std@@8
rdata$r	SEGMENT
??_R3failure@ios_base@std@@8 DD 00H			; std::ios_base::failure::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	05H
	DD	FLAT:??_R2failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R4failure@ios_base@std@@6B@
rdata$r	SEGMENT
??_R4failure@ios_base@std@@6B@ DD 00H			; std::ios_base::failure::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	FLAT:??_R3failure@ios_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@_W@std@@8 DD FLAT:??_R0?AV?$ctype@_W@std@@@8 ; std::ctype<wchar_t>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R2?$ctype@_W@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@_W@std@@8 ; std::ctype<wchar_t>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@_W@std@@8
rdata$r	SEGMENT
??_R3?$ctype@_W@std@@8 DD 00H				; std::ctype<wchar_t>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@_W@std@@@8
data$rs	SEGMENT
??_R0?AV?$ctype@_W@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<wchar_t> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@_W@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ctype@_W@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@_W@std@@6B@ DD 00H				; std::ctype<wchar_t>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@_W@std@@@8
	DD	FLAT:??_R3?$ctype@_W@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@?$ctype@D@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@?$ctype@D@std@@8 DD FLAT:??_R0?AV?$ctype@D@std@@@8 ; std::ctype<char>::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R2?$ctype@D@std@@8
rdata$r	SEGMENT
??_R2?$ctype@D@std@@8 DD FLAT:??_R1A@?0A@EA@?$ctype@D@std@@8 ; std::ctype<char>::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ctype_base@std@@8
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3?$ctype@D@std@@8
rdata$r	SEGMENT
??_R3?$ctype@D@std@@8 DD 00H				; std::ctype<char>::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV?$ctype@D@std@@@8
data$rs	SEGMENT
??_R0?AV?$ctype@D@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype<char> `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV?$ctype@D@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4?$ctype@D@std@@6B@
rdata$r	SEGMENT
??_R4?$ctype@D@std@@6B@ DD 00H				; std::ctype<char>::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV?$ctype@D@std@@@8
	DD	FLAT:??_R3?$ctype@D@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ctype_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ctype_base@std@@8 DD FLAT:??_R0?AUctype_base@std@@@8 ; std::ctype_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2ctype_base@std@@8
rdata$r	SEGMENT
??_R2ctype_base@std@@8 DD FLAT:??_R1A@?0A@EA@ctype_base@std@@8 ; std::ctype_base::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@facet@locale@std@@8
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3ctype_base@std@@8
rdata$r	SEGMENT
??_R3ctype_base@std@@8 DD 00H				; std::ctype_base::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUctype_base@std@@@8
data$rs	SEGMENT
??_R0?AUctype_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::ctype_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUctype_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4ctype_base@std@@6B@
rdata$r	SEGMENT
??_R4ctype_base@std@@6B@ DD 00H				; std::ctype_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUctype_base@std@@@8
	DD	FLAT:??_R3ctype_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R2_Crt_new_delete@std@@8 DD FLAT:??_R1A@?0A@EA@_Crt_new_delete@std@@8 ; std::_Crt_new_delete::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R3_Crt_new_delete@std@@8 DD 00H			; std::_Crt_new_delete::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AU_Crt_new_delete@std@@@8
data$rs	SEGMENT
??_R0?AU_Crt_new_delete@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Crt_new_delete `RTTI Type Descriptor'
	DD	00H
	DB	'.?AU_Crt_new_delete@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	SEGMENT
??_R13?0A@EA@_Crt_new_delete@std@@8 DD FLAT:??_R0?AU_Crt_new_delete@std@@@8 ; std::_Crt_new_delete::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@facet@locale@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@facet@locale@std@@8 DD FLAT:??_R0?AVfacet@locale@std@@@8 ; std::locale::facet::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R2facet@locale@std@@8
rdata$r	SEGMENT
??_R2facet@locale@std@@8 DD FLAT:??_R1A@?0A@EA@facet@locale@std@@8 ; std::locale::facet::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_Facet_base@std@@8
	DD	FLAT:??_R13?0A@EA@_Crt_new_delete@std@@8
rdata$r	ENDS
;	COMDAT ??_R3facet@locale@std@@8
rdata$r	SEGMENT
??_R3facet@locale@std@@8 DD 00H				; std::locale::facet::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	03H
	DD	FLAT:??_R2facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVfacet@locale@std@@@8
data$rs	SEGMENT
??_R0?AVfacet@locale@std@@@8 DD FLAT:??_7type_info@@6B@	; std::locale::facet `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfacet@locale@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4facet@locale@std@@6B@
rdata$r	SEGMENT
??_R4facet@locale@std@@6B@ DD 00H			; std::locale::facet::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVfacet@locale@std@@@8
	DD	FLAT:??_R3facet@locale@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Facet_base@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Facet_base@std@@8 DD FLAT:??_R0?AV_Facet_base@std@@@8 ; std::_Facet_base::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Facet_base@std@@8
rdata$r	SEGMENT
??_R2_Facet_base@std@@8 DD FLAT:??_R1A@?0A@EA@_Facet_base@std@@8 ; std::_Facet_base::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3_Facet_base@std@@8
rdata$r	SEGMENT
??_R3_Facet_base@std@@8 DD 00H				; std::_Facet_base::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Facet_base@std@@@8
data$rs	SEGMENT
??_R0?AV_Facet_base@std@@@8 DD FLAT:??_7type_info@@6B@	; std::_Facet_base `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Facet_base@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Facet_base@std@@6B@
rdata$r	SEGMENT
??_R4_Facet_base@std@@6B@ DD 00H			; std::_Facet_base::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Facet_base@std@@@8
	DD	FLAT:??_R3_Facet_base@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_cast@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_cast@std@@8 DD FLAT:??_R0?AVbad_cast@std@@@8 ; std::bad_cast::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_cast@std@@8
rdata$r	SEGMENT
??_R2bad_cast@std@@8 DD FLAT:??_R1A@?0A@EA@bad_cast@std@@8 ; std::bad_cast::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_cast@std@@8
rdata$r	SEGMENT
??_R3bad_cast@std@@8 DD 00H				; std::bad_cast::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_cast@std@@6B@
rdata$r	SEGMENT
??_R4bad_cast@std@@6B@ DD 00H				; std::bad_cast::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	FLAT:??_R3bad_cast@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_Iostream_error_category2@std@@8 DD FLAT:??_R0?AV_Iostream_error_category2@std@@@8 ; std::_Iostream_error_category2::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R2_Iostream_error_category2@std@@8 DD FLAT:??_R1A@?0A@EA@_Iostream_error_category2@std@@8 ; std::_Iostream_error_category2::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_Iostream_error_category2@std@@8
rdata$r	SEGMENT
??_R3_Iostream_error_category2@std@@8 DD 00H		; std::_Iostream_error_category2::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AV_Iostream_error_category2@std@@@8
data$rs	SEGMENT
??_R0?AV_Iostream_error_category2@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_Iostream_error_category2 `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_Iostream_error_category2@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R4_Iostream_error_category2@std@@6B@
rdata$r	SEGMENT
??_R4_Iostream_error_category2@std@@6B@ DD 00H		; std::_Iostream_error_category2::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_Iostream_error_category2@std@@@8
	DD	FLAT:??_R3_Iostream_error_category2@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@system_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@system_error@std@@8 DD FLAT:??_R0?AVsystem_error@std@@@8 ; std::system_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2system_error@std@@8
rdata$r	SEGMENT
??_R2system_error@std@@8 DD FLAT:??_R1A@?0A@EA@system_error@std@@8 ; std::system_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@_System_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3system_error@std@@8
rdata$r	SEGMENT
??_R3system_error@std@@8 DD 00H				; std::system_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4system_error@std@@6B@
rdata$r	SEGMENT
??_R4system_error@std@@6B@ DD 00H			; std::system_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	FLAT:??_R3system_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@_System_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@_System_error@std@@8 DD FLAT:??_R0?AV_System_error@std@@@8 ; std::_System_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2_System_error@std@@8
rdata$r	SEGMENT
??_R2_System_error@std@@8 DD FLAT:??_R1A@?0A@EA@_System_error@std@@8 ; std::_System_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@runtime_error@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3_System_error@std@@8
rdata$r	SEGMENT
??_R3_System_error@std@@8 DD 00H			; std::_System_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4_System_error@std@@6B@
rdata$r	SEGMENT
??_R4_System_error@std@@6B@ DD 00H			; std::_System_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	FLAT:??_R3_System_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@error_category@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@error_category@std@@8 DD FLAT:??_R0?AVerror_category@std@@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R2error_category@std@@8
rdata$r	SEGMENT
??_R2error_category@std@@8 DD FLAT:??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3error_category@std@@8
rdata$r	SEGMENT
??_R3error_category@std@@8 DD 00H			; std::error_category::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2error_category@std@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVerror_category@std@@@8
data$rs	SEGMENT
??_R0?AVerror_category@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::error_category `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVerror_category@std@@', 00H
data$rs	ENDS
;	COMDAT ??_R1A@?0A@EA@runtime_error@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@runtime_error@std@@8 DD FLAT:??_R0?AVruntime_error@std@@@8 ; std::runtime_error::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R2runtime_error@std@@8
rdata$r	SEGMENT
??_R2runtime_error@std@@8 DD FLAT:??_R1A@?0A@EA@runtime_error@std@@8 ; std::runtime_error::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3runtime_error@std@@8
rdata$r	SEGMENT
??_R3runtime_error@std@@8 DD 00H			; std::runtime_error::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4runtime_error@std@@6B@
rdata$r	SEGMENT
??_R4runtime_error@std@@6B@ DD 00H			; std::runtime_error::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	FLAT:??_R3runtime_error@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_alloc@std@@6B@
rdata$r	SEGMENT
??_R4bad_alloc@std@@6B@ DD 00H				; std::bad_alloc::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_alloc@std@@8
rdata$r	SEGMENT
??_R2bad_alloc@std@@8 DD FLAT:??_R1A@?0A@EA@bad_alloc@std@@8 ; std::bad_alloc::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_alloc@std@@8
rdata$r	SEGMENT
??_R3bad_alloc@std@@8 DD 00H				; std::bad_alloc::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_alloc@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_alloc@std@@8 DD FLAT:??_R0?AVbad_alloc@std@@@8 ; std::bad_alloc::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_alloc@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@bad_array_new_length@std@@8 DD FLAT:??_R0?AVbad_array_new_length@std@@@8 ; std::bad_array_new_length::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R2bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R2bad_array_new_length@std@@8 DD FLAT:??_R1A@?0A@EA@bad_array_new_length@std@@8 ; std::bad_array_new_length::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@bad_alloc@std@@8
	DD	FLAT:??_R1A@?0A@EA@exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R3bad_array_new_length@std@@8
rdata$r	SEGMENT
??_R3bad_array_new_length@std@@8 DD 00H			; std::bad_array_new_length::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R4bad_array_new_length@std@@6B@
rdata$r	SEGMENT
??_R4bad_array_new_length@std@@6B@ DD 00H		; std::bad_array_new_length::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	FLAT:??_R3bad_array_new_length@std@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@exception@std@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@exception@std@@8 DD FLAT:??_R0?AVexception@std@@@8 ; std::exception::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R2exception@std@@8
rdata$r	SEGMENT
??_R2exception@std@@8 DD FLAT:??_R1A@?0A@EA@exception@std@@8 ; std::exception::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3exception@std@@8
rdata$r	SEGMENT
??_R3exception@std@@8 DD 00H				; std::exception::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2exception@std@@8
rdata$r	ENDS
;	COMDAT ??_R4exception@std@@6B@
rdata$r	SEGMENT
??_R4exception@std@@6B@ DD 00H				; std::exception::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	FLAT:??_R3exception@std@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position@ DB 'invalid string position'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4@
CONST	SEGMENT
??_C@_01LFCBOECM@?4@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OOPEBDOJ@pP@
CONST	SEGMENT
??_C@_02OOPEBDOJ@pP@ DB 'pP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MDKMJEGG@eE@
CONST	SEGMENT
??_C@_02MDKMJEGG@eE@ DB 'eE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$numpunct@D@std@@6B@
CONST	SEGMENT
??_7?$numpunct@D@std@@6B@ DD FLAT:??_R4?$numpunct@D@std@@6B@ ; std::numpunct<char>::`vftable'
	DD	FLAT:??_E?$numpunct@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_decimal_point@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
	DD	FLAT:?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
CONST	ENDS
;	COMDAT ??_7?$numpunct@_W@std@@6B@
CONST	SEGMENT
??_7?$numpunct@_W@std@@6B@ DD FLAT:??_R4?$numpunct@_W@std@@6B@ ; std::numpunct<wchar_t>::`vftable'
	DD	FLAT:??_E?$numpunct@_W@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ
	DD	FLAT:?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ
	DD	FLAT:?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
	DD	FLAT:?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
	DD	FLAT:?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
CONST	ENDS
;	COMDAT ??_C@_02EAOCLKAK@ld@
CONST	SEGMENT
??_C@_02EAOCLKAK@ld@ DB 'ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BDDLJJBK@lu@
CONST	SEGMENT
??_C@_02BDDLJJBK@lu@ DB 'lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HIKPPMOK@Ld@
CONST	SEGMENT
??_C@_02HIKPPMOK@Ld@ DB 'Ld', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CLHGNPPK@Lu@
CONST	SEGMENT
??_C@_02CLHGNPPK@Lu@ DB 'Lu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02BBAHNLBA@?$CFp@
CONST	SEGMENT
??_C@_02BBAHNLBA@?$CFp@ DB '%p', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@ ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`vftable'
	DD	FLAT:??_E?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
	DD	FLAT:?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
CONST	ENDS
;	COMDAT ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@
CONST	SEGMENT
??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ DD FLAT:??_R4?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@ ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`vftable'
	DD	FLAT:??_E?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z
	DD	FLAT:?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
CONST	ENDS
;	COMDAT ?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A
_DATA	SEGMENT
?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A DD FLAT:??_7_Iostream_error_category2@std@@6B@ ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static
	DD	05H
_DATA	ENDS
;	COMDAT ??_C@_0BO@DANBJCAN@Service?5deleted?5successfully?6@
CONST	SEGMENT
??_C@_0BO@DANBJCAN@Service?5deleted?5successfully?6@ DB 'Service deleted '
	DB	'successfully', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HMODDBCB@Failed?5to?5delete?5service?3?5@
CONST	SEGMENT
??_C@_0BL@HMODDBCB@Failed?5to?5delete?5service?3?5@ DB 'Failed to delete '
	DB	'service: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KBAIFLAC@Service?5stopped?5successfully?6@
CONST	SEGMENT
??_C@_0BO@KBAIFLAC@Service?5stopped?5successfully?6@ DB 'Service stopped '
	DB	'successfully', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CJNJBFLI@Failed?5to?5stop?5service?3?5@
CONST	SEGMENT
??_C@_0BJ@CJNJBFLI@Failed?5to?5stop?5service?3?5@ DB 'Failed to stop serv'
	DB	'ice: ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OKKGCNAB@Driver?5loaded?5successfully?6@
CONST	SEGMENT
??_C@_0BM@OKKGCNAB@Driver?5loaded?5successfully?6@ DB 'Driver loaded succ'
	DB	'essfully', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HODICPMK@Failed?5to?5start?5service?3?5@
CONST	SEGMENT
??_C@_0BK@HODICPMK@Failed?5to?5start?5service?3?5@ DB 'Failed to start se'
	DB	'rvice: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EFJAHLMN@Service?5handle?5invalid?6@
CONST	SEGMENT
??_C@_0BI@EFJAHLMN@Service?5handle?5invalid?6@ DB 'Service handle invalid'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OGKCKKFC@StartService?5failed?3?5@
CONST	SEGMENT
??_C@_0BG@OGKCKKFC@StartService?5failed?3?5@ DB 'StartService failed: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MHOMMBJC@Service?5started?5successfully?6@
CONST	SEGMENT
??_C@_0BO@MHOMMBJC@Service?5started?5successfully?6@ DB 'Service started '
	DB	'successfully', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CIOHMHPM@Failed?5to?5start?5existing?5servic@
CONST	SEGMENT
??_C@_0CD@CIOHMHPM@Failed?5to?5start?5existing?5servic@ DB 'Failed to sta'
	DB	'rt existing service: ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@GIHOLAM@Service?5already?5running?6@
CONST	SEGMENT
??_C@_0BJ@GIHOLAM@Service?5already?5running?6@ DB 'Service already runnin'
	DB	'g', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFIJGKKJ@Service?5already?5exists?6@
CONST	SEGMENT
??_C@_0BI@CFIJGKKJ@Service?5already?5exists?6@ DB 'Service already exists'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GGNPNIOP@Service?5created?5successfully?6@
CONST	SEGMENT
??_C@_0BO@GGNPNIOP@Service?5created?5successfully?6@ DB 'Service created '
	DB	'successfully', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FIKAJJGA@CreateService?5failed?3?5@
CONST	SEGMENT
??_C@_0BH@FIKAJJGA@CreateService?5failed?3?5@ DB 'CreateService failed: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PBFPCIGJ@Failed?5to?5prepare?5driver?6@
CONST	SEGMENT
??_C@_0BK@PBFPCIGJ@Failed?5to?5prepare?5driver?6@ DB 'Failed to prepare d'
	DB	'river', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@HOCONKHL@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EE@HOCONKHL@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@ DB 'E'
	DB	00H, 'z', 00H, 'A', 00H, 'n', 00H, 't', 00H, 'i', 00H, 'A', 00H
	DB	'n', 00H, 't', 00H, 'i', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'D', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '-', 00H, 'x', 00H, '8', 00H, '6', 00H, '-', 00H, 'R'
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CHLAMOON@OpenSCManager?5failed?3?5@
CONST	SEGMENT
??_C@_0BH@CHLAMOON@OpenSCManager?5failed?3?5@ DB 'OpenSCManager failed: ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KLNDMGEC@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAc?$AAo?$AAp?$AAi?$AAe?$AAd?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1CG@KLNDMGEC@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAc?$AAo?$AAp?$AAi?$AAe?$AAd?$AA?5?$AAt@ DB 'D'
	DB	00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'p', 00H, 'i', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ':', 00H, ' ', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@JKJCHNGA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5@
CONST	SEGMENT
??_C@_1FI@JKJCHNGA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'p', 00H, 'y'
	DB	00H, ' ', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'y'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, '3', 00H, '2', 00H
	DB	'\', 00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, ':', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@HOKNBJFH@?$AA?2?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2@
CONST	SEGMENT
??_C@_1BE@HOKNBJFH@?$AA?2?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2@ DB '\'
	DB	00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, '\', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JGPPEJKE@GetSystemDirectory?5failed?3?5@
CONST	SEGMENT
??_C@_0BM@JGPPEJKE@GetSystemDirectory?5failed?3?5@ DB 'GetSystemDirectory'
	DB	' failed: ', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
xdata$x	SEGMENT
__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20 DD 00H
	DD	FLAT:??_R0?AVfailure@ios_base@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0failure@ios_base@std@@QAE@ABV012@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVfailure@ios_base@std@@@8
data$r	SEGMENT
??_R0?AVfailure@ios_base@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::ios_base::failure `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVfailure@ios_base@std@@', 00H
data$r	ENDS
;	COMDAT __CTA5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__CTA5?AVfailure@ios_base@std@@ DD 05H
	DD	FLAT:__CT??_R0?AVfailure@ios_base@std@@@8??0failure@ios_base@std@@QAE@ABV012@@Z20
	DD	FLAT:__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
	DD	FLAT:__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI5?AVfailure@ios_base@std@@
xdata$x	SEGMENT
__TI5?AVfailure@ios_base@std@@ DD 00H
	DD	FLAT:??1failure@ios_base@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA5?AVfailure@ios_base@std@@
xdata$x	ENDS
;	COMDAT ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
CONST	SEGMENT
??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@ DB 'ios_base::eofbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
CONST	SEGMENT
??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@ DB 'ios_base::failbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
CONST	SEGMENT
??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@ DB 'ios_base::badbit set', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7failure@ios_base@std@@6B@
CONST	SEGMENT
??_7failure@ios_base@std@@6B@ DD FLAT:??_R4failure@ios_base@std@@6B@ ; std::ios_base::failure::`vftable'
	DD	FLAT:??_Efailure@ios_base@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7?$ctype@_W@std@@6B@
CONST	SEGMENT
??_7?$ctype@_W@std@@6B@ DD FLAT:??_R4?$ctype@_W@std@@6B@ ; std::ctype<wchar_t>::`vftable'
	DD	FLAT:??_E?$ctype@_W@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
	DD	FLAT:?do_is@?$ctype@_W@std@@MBE_NF_W@Z
	DD	FLAT:?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
	DD	FLAT:?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
	DD	FLAT:?do_widen@?$ctype@_W@std@@MBE_WD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@_W@std@@MBED_WD@Z
CONST	ENDS
;	COMDAT ??_7?$ctype@D@std@@6B@
CONST	SEGMENT
??_7?$ctype@D@std@@6B@ DD FLAT:??_R4?$ctype@D@std@@6B@	; std::ctype<char>::`vftable'
	DD	FLAT:??_E?$ctype@D@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_tolower@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
	DD	FLAT:?do_toupper@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
	DD	FLAT:?do_widen@?$ctype@D@std@@MBEDD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
	DD	FLAT:?do_narrow@?$ctype@D@std@@MBEDDD@Z
CONST	ENDS
;	COMDAT ??_7ctype_base@std@@6B@
CONST	SEGMENT
??_7ctype_base@std@@6B@ DD FLAT:??_R4ctype_base@std@@6B@ ; std::ctype_base::`vftable'
	DD	FLAT:??_Ectype_base@std@@UAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_7facet@locale@std@@6B@
CONST	SEGMENT
??_7facet@locale@std@@6B@ DD FLAT:??_R4facet@locale@std@@6B@ ; std::locale::facet::`vftable'
	DD	FLAT:??_Efacet@locale@std@@MAEPAXI@Z
	DD	FLAT:?_Incref@facet@locale@std@@UAEXXZ
	DD	FLAT:?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ELKIONDK@bad?5locale?5name@
CONST	SEGMENT
??_C@_0BA@ELKIONDK@bad?5locale?5name@ DB 'bad locale name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7_Facet_base@std@@6B@
CONST	SEGMENT
??_7_Facet_base@std@@6B@ DD FLAT:??_R4_Facet_base@std@@6B@ ; std::_Facet_base::`vftable'
	DD	FLAT:??_E_Facet_base@std@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:__purecall
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_cast@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_cast@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_cast@std@@@8
data$r	SEGMENT
??_R0?AVbad_cast@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_cast `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_cast@std@@', 00H
data$r	ENDS
;	COMDAT __CTA2?AVbad_cast@std@@
xdata$x	SEGMENT
__CTA2?AVbad_cast@std@@ DD 02H
	DD	FLAT:__CT??_R0?AVbad_cast@std@@@8??0bad_cast@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI2?AVbad_cast@std@@
xdata$x	SEGMENT
__TI2?AVbad_cast@std@@ DD 00H
	DD	FLAT:??1bad_cast@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA2?AVbad_cast@std@@
xdata$x	ENDS
;	COMDAT ??_C@_08EPJLHIJG@bad?5cast@
CONST	SEGMENT
??_C@_08EPJLHIJG@bad?5cast@ DB 'bad cast', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7bad_cast@std@@6B@
CONST	SEGMENT
??_7bad_cast@std@@6B@ DD FLAT:??_R4bad_cast@std@@6B@	; std::bad_cast::`vftable'
	DD	FLAT:??_Ebad_cast@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
CONST	SEGMENT
?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB DB 069H ; `std::_Iostream_error_category2::message'::`5'::_Iostream_error
	DB	06fH
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	020H
	DB	065H
	DB	072H
	DB	072H
	DB	06fH
	DB	072H
	DB	00H
CONST	ENDS
;	COMDAT ??_C@_08LLGCOLLL@iostream@
CONST	SEGMENT
??_C@_08LLGCOLLL@iostream@ DB 'iostream', 00H		; `string'
CONST	ENDS
;	COMDAT ??_7_Iostream_error_category2@std@@6B@
CONST	SEGMENT
??_7_Iostream_error_category2@std@@6B@ DD FLAT:??_R4_Iostream_error_category2@std@@6B@ ; std::_Iostream_error_category2::`vftable'
	DD	FLAT:??_E_Iostream_error_category2@std@@UAEPAXI@Z
	DD	FLAT:?name@_Iostream_error_category2@std@@UBEPBDXZ
	DD	FLAT:?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
	DD	FLAT:?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
	DD	FLAT:?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
CONST	ENDS
;	COMDAT __CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AV_System_error@std@@@8??0_System_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AV_System_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0_System_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AV_System_error@std@@@8
data$r	SEGMENT
??_R0?AV_System_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::_System_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AV_System_error@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20
xdata$x	SEGMENT
__CT??_R0?AVsystem_error@std@@@8??0system_error@std@@QAE@ABV01@@Z20 DD 00H
	DD	FLAT:??_R0?AVsystem_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	014H
	DD	FLAT:??0system_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVsystem_error@std@@@8
data$r	SEGMENT
??_R0?AVsystem_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::system_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVsystem_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7system_error@std@@6B@
CONST	SEGMENT
??_7system_error@std@@6B@ DD FLAT:??_R4system_error@std@@6B@ ; std::system_error::`vftable'
	DD	FLAT:??_Esystem_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_7_System_error@std@@6B@
CONST	SEGMENT
??_7_System_error@std@@6B@ DD FLAT:??_R4_System_error@std@@6B@ ; std::_System_error::`vftable'
	DD	FLAT:??_E_System_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT __CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVruntime_error@std@@@8??0runtime_error@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVruntime_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0runtime_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVruntime_error@std@@@8
data$r	SEGMENT
??_R0?AVruntime_error@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::runtime_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVruntime_error@std@@', 00H
data$r	ENDS
;	COMDAT ??_7runtime_error@std@@6B@
CONST	SEGMENT
??_7runtime_error@std@@6B@ DD FLAT:??_R4runtime_error@std@@6B@ ; std::runtime_error::`vftable'
	DD	FLAT:??_Eruntime_error@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT __CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12 DD 010H
	DD	FLAT:??_R0?AVbad_alloc@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_alloc@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_alloc@std@@@8
data$r	SEGMENT
??_R0?AVbad_alloc@std@@@8 DD FLAT:??_7type_info@@6B@	; std::bad_alloc `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_alloc@std@@', 00H
data$r	ENDS
;	COMDAT __CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVbad_array_new_length@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0bad_array_new_length@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVbad_array_new_length@std@@@8
data$r	SEGMENT
??_R0?AVbad_array_new_length@std@@@8 DD FLAT:??_7type_info@@6B@ ; std::bad_array_new_length `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVbad_array_new_length@std@@', 00H
data$r	ENDS
;	COMDAT __CTA3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__CTA3?AVbad_array_new_length@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVbad_array_new_length@std@@@8??0bad_array_new_length@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVbad_alloc@std@@@8??0bad_alloc@std@@QAE@ABV01@@Z12
	DD	FLAT:__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	ENDS
;	COMDAT __TI3?AVbad_array_new_length@std@@
xdata$x	SEGMENT
__TI3?AVbad_array_new_length@std@@ DD 00H
	DD	FLAT:??1bad_array_new_length@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVbad_array_new_length@std@@
xdata$x	ENDS
;	COMDAT __CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@std@@@8??0exception@std@@QAE@ABV01@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@std@@@8
data$r	SEGMENT
??_R0?AVexception@std@@@8 DD FLAT:??_7type_info@@6B@	; std::exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@std@@', 00H
data$r	ENDS
;	COMDAT ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@
CONST	SEGMENT
??_C@_0BF@KINCDENJ@bad?5array?5new?5length@ DB 'bad array new length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7bad_array_new_length@std@@6B@
CONST	SEGMENT
??_7bad_array_new_length@std@@6B@ DD FLAT:??_R4bad_array_new_length@std@@6B@ ; std::bad_array_new_length::`vftable'
	DD	FLAT:??_Ebad_array_new_length@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_7bad_alloc@std@@6B@
CONST	SEGMENT
??_7bad_alloc@std@@6B@ DD FLAT:??_R4bad_alloc@std@@6B@	; std::bad_alloc::`vftable'
	DD	FLAT:??_Ebad_alloc@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT ??_C@_0BC@EOODALEL@Unknown?5exception@
CONST	SEGMENT
??_C@_0BC@EOODALEL@Unknown?5exception@ DB 'Unknown exception', 00H ; `string'
CONST	ENDS
;	COMDAT ??_7exception@std@@6B@
CONST	SEGMENT
??_7exception@std@@6B@ DD FLAT:??_R4exception@std@@6B@	; std::exception::`vftable'
	DD	FLAT:??_Eexception@std@@UAEPAXI@Z
	DD	FLAT:?what@exception@std@@UBEPBDXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z$0
__ehfuncinfo$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@D@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z$2
__ehfuncinfo$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$numpunct@D@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$6
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$3
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z$3
__ehfuncinfo$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z$0
__ehfuncinfo$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Init@?$numpunct@_W@std@@IAEXABV_Locinfo@2@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z$2
__ehfuncinfo$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$numpunct@_W@std@@QAE@ABV_Locinfo@1@I_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z$3
__ehfuncinfo$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3
__ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1
__ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$3
__ehfuncinfo$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z$0
__ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z$0
__ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$1
__ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$0
__tryblocktable$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$5
__unwindtable$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 01H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$7
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	01H
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$3
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0
__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$5
__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0
__tryblocktable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$12
__unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$0
__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$7
__ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$5
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$12 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0
__tryblocktable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$12
__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	01H
	DD	FLAT:__tryblocktable$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0
__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:__catchsym$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$7
__ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	01H
	DD	FLAT:__tryblocktable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:___std_terminate
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0
__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$2
__ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	01H
	DD	FLAT:__tryblocktable$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?CopyDriverToSystemDrivers@@YA_NXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?CopyDriverToSystemDrivers@@YA_NXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?CopyDriverToSystemDrivers@@YA_NXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CopyDriverToSystemDrivers@@YA_NXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CopyDriverToSystemDrivers@@YA_NXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?CopyDriverToSystemDrivers@@YA_NXZ$2
	DD	00H
	DD	FLAT:__unwindfunclet$?CopyDriverToSystemDrivers@@YA_NXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CopyDriverToSystemDrivers@@YA_NXZ$2
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1
__ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1
__ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
__ehfuncinfo$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Locinfo@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$??0_Locinfo@std@@QAE@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0_Locinfo@std@@QAE@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0system_error@std@@QAE@Verror_code@1@PBD@Z$0
__ehfuncinfo$??0system_error@std@@QAE@Verror_code@1@PBD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0system_error@std@@QAE@Verror_code@1@PBD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$5
	DD	00H
	DD	FLAT:__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$6
__ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z$1
__ehfuncinfo$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Makestr@_System_error@std@@CA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@Verror_code@2@V32@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
CRT$XCU	SEGMENT
?systemDriverPath$initializer$@@3P6AXXZA DD FLAT:??__EsystemDriverPath@@YAXXZ ; systemDriverPath$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$numpunct@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$numpunct@_W@std@@@std@@QAE@XZ PROC	; std::_Tidy_guard<std::numpunct<wchar_t> >::~_Tidy_guard<std::numpunct<wchar_t> >, COMDAT
; _this$ = ecx

; 86   :     _CONSTEXPR20 ~_Tidy_guard() {

  00000	56		 push	 esi

; 87   :         if (_Target) {

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	85 f6		 test	 esi, esi
  00005	74 1b		 je	 SHORT $LN6@Tidy_guard
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  00007	ff 76 08	 push	 DWORD PTR [esi+8]
  0000a	e8 00 00 00 00	 call	 _free

; 203  :         _CSTD free(const_cast<_Elem*>(_Falsename));

  0000f	ff 76 10	 push	 DWORD PTR [esi+16]
  00012	e8 00 00 00 00	 call	 _free

; 204  :         _CSTD free(const_cast<_Elem*>(_Truename));

  00017	ff 76 14	 push	 DWORD PTR [esi+20]
  0001a	e8 00 00 00 00	 call	 _free
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Tidy_guard:
  00022	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 90   :     }

  00023	c3		 ret	 0
??1?$_Tidy_guard@V?$numpunct@_W@std@@@std@@QAE@XZ ENDP	; std::_Tidy_guard<std::numpunct<wchar_t> >::~_Tidy_guard<std::numpunct<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z PROC		; std::_Maklocchr<char>, COMDAT

; 500  : _Elem __CRTDECL _Maklocchr(char _Byte, _Elem*, const _Locinfo::_Cvtvec&) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 501  :     // convert char to _Elem using _Cvtvec
; 502  :     return static_cast<_Elem>(static_cast<unsigned char>(_Byte));

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 503  : }

  00006	5d		 pop	 ebp
  00007	c3		 ret	 0
??$_Maklocchr@D@std@@YADDPADABU_Cvtvec@@@Z ENDP		; std::_Maklocchr<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z PROC	; std::_Maklocstr<char>, COMDAT

; 526  : _Elem* __CRTDECL _Maklocstr(const char* _Ptr, _Elem*, const _Locinfo::_Cvtvec&) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 527  :     // convert C string to _Elem sequence using _Cvtvec
; 528  :     size_t _Count = _CSTD strlen(_Ptr) + 1;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Ptr$[ebp]
  00006	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
  00009	0f 1f 80 00 00
	00 00		 npad	 7
$LL11@Maklocstr:
  00010	8a 08		 mov	 cl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 c9		 test	 cl, cl
  00015	75 f9		 jne	 SHORT $LL11@Maklocstr
  00017	56		 push	 esi
  00018	2b c2		 sub	 eax, edx
  0001a	57		 push	 edi

; 529  : 
; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0001b	6a 01		 push	 1
  0001d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  00020	57		 push	 edi
  00021	e8 00 00 00 00	 call	 _calloc
  00026	8b f0		 mov	 esi, eax
  00028	83 c4 08	 add	 esp, 8

; 531  : 
; 532  :     if (!_Ptrdest) {

  0002b	85 f6		 test	 esi, esi
  0002d	74 17		 je	 SHORT $LN17@Maklocstr

; 534  :     }
; 535  : 
; 536  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  0002f	85 ff		 test	 edi, edi
  00031	74 0d		 je	 SHORT $LN4@Maklocstr
  00033	57		 push	 edi
  00034	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _memcpy
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN4@Maklocstr:

; 537  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));
; 538  :     }
; 539  : 
; 540  :     return _Ptrdest;
; 541  : }

  00040	5f		 pop	 edi
  00041	8b c6		 mov	 eax, esi
  00043	5e		 pop	 esi
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
$LN17@Maklocstr:

; 533  :         _Xbad_alloc();

  00046	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN15@Maklocstr:
  0004b	cc		 int	 3
??$_Maklocstr@D@std@@YAPADPBDPADABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QAE@XZ PROC	; std::_Tidy_guard<std::numpunct<char> >::~_Tidy_guard<std::numpunct<char> >, COMDAT
; _this$ = ecx

; 86   :     _CONSTEXPR20 ~_Tidy_guard() {

  00000	56		 push	 esi

; 87   :         if (_Target) {

  00001	8b 31		 mov	 esi, DWORD PTR [ecx]
  00003	85 f6		 test	 esi, esi
  00005	74 1b		 je	 SHORT $LN6@Tidy_guard
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  00007	ff 76 08	 push	 DWORD PTR [esi+8]
  0000a	e8 00 00 00 00	 call	 _free

; 203  :         _CSTD free(const_cast<_Elem*>(_Falsename));

  0000f	ff 76 10	 push	 DWORD PTR [esi+16]
  00012	e8 00 00 00 00	 call	 _free

; 204  :         _CSTD free(const_cast<_Elem*>(_Truename));

  00017	ff 76 14	 push	 DWORD PTR [esi+20]
  0001a	e8 00 00 00 00	 call	 _free
  0001f	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN6@Tidy_guard:
  00022	5e		 pop	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 90   :     }

  00023	c3		 ret	 0
??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QAE@XZ ENDP	; std::_Tidy_guard<std::numpunct<char> >::~_Tidy_guard<std::numpunct<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>, COMDAT

; 182  : __declspec(allocator) void* _Allocate_manually_vector_aligned(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 183  :     // allocate _Bytes manually aligned to at least _Big_allocation_alignment
; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00009	3b c8		 cmp	 ecx, eax
  0000b	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  00011	51		 push	 ecx
  00012	0f ae e8	 lfence
  00015	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 186  :         _Throw_bad_array_new_length(); // add overflow
; 187  :     }
; 188  : 
; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  0001a	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  0001c	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0001f	85 c9		 test	 ecx, ecx
  00021	74 0e		 je	 SHORT $LN9@Allocate_m

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00023	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00026	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00029	0f ae e8	 lfence

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  0002c	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 193  : 
; 194  : #ifdef _DEBUG
; 195  :     static_cast<uintptr_t*>(_Ptr)[-2] = _Big_allocation_sentinel;
; 196  : #endif // defined(_DEBUG)
; 197  :     return _Ptr;
; 198  : }

  0002f	5d		 pop	 ebp
  00030	c3		 ret	 0
$LN9@Allocate_m:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  00031	6a 00		 push	 0
  00033	6a 00		 push	 0
  00035	6a 00		 push	 0
  00037	6a 00		 push	 0
  00039	6a 00		 push	 0
  0003b	e8 00 00 00 00	 call	 __invoke_watson
$LN7@Allocate_m:
  00040	cc		 int	 3
??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate_manually_vector_aligned<std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z
_TEXT	SEGMENT
__Bytes$ = 8						; size = 4
??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z PROC ; std::_Allocate<8,std::_Default_allocate_traits>, COMDAT

; 225  : __declspec(allocator) _CONSTEXPR20 void* _Allocate(const size_t _Bytes) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 226  :     // allocate _Bytes
; 227  :     if (_Bytes == 0) {

  00003	8b 45 08	 mov	 eax, DWORD PTR __Bytes$[ebp]
  00006	85 c0		 test	 eax, eax
  00008	75 02		 jne	 SHORT $LN2@Allocate

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
; 254  :         }
; 255  : #endif // defined(_M_IX86) || defined(_M_X64)
; 256  :         return _Traits::_Allocate(_Bytes);
; 257  :     }
; 258  : }

  0000a	5d		 pop	 ebp
  0000b	c3		 ret	 0
$LN2@Allocate:

; 228  :         return nullptr;
; 229  :     }
; 230  : 
; 231  : #if _HAS_CXX20 // TRANSITION, GH-1532
; 232  :     if (_STD is_constant_evaluated()) {
; 233  :         return _Traits::_Allocate(_Bytes);
; 234  :     }
; 235  : #endif // _HAS_CXX20
; 236  : 
; 237  : #ifdef __cpp_aligned_new
; 238  :     if constexpr (_Align > __STDCPP_DEFAULT_NEW_ALIGNMENT__) {
; 239  :         size_t _Passed_align = _Align;
; 240  : #if defined(_M_IX86) || defined(_M_X64)
; 241  :         if (_Bytes >= _Big_allocation_threshold) {
; 242  :             // boost the alignment of big allocations to help autovectorization
; 243  :             _Passed_align = (_STD max)(_Align, _Big_allocation_alignment);
; 244  :         }
; 245  : #endif // defined(_M_IX86) || defined(_M_X64)
; 246  :         return _Traits::_Allocate_aligned(_Bytes, _Passed_align);
; 247  :     } else
; 248  : #endif // defined(__cpp_aligned_new)
; 249  :     {
; 250  : #if defined(_M_IX86) || defined(_M_X64)
; 251  :         if (_Bytes >= _Big_allocation_threshold) {

  0000c	3d 00 10 00 00	 cmp	 eax, 4096		; 00001000H
  00011	72 2b		 jb	 SHORT $LN3@Allocate

; 184  :     const size_t _Block_size = _Non_user_size + _Bytes;

  00013	8d 48 23	 lea	 ecx, DWORD PTR [eax+35]

; 185  :     if (_Block_size <= _Bytes) {

  00016	3b c8		 cmp	 ecx, eax
  00018	0f 86 00 00 00
	00		 jbe	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length

; 136  :         return ::operator new(_Bytes);

  0001e	51		 push	 ecx
  0001f	0f ae e8	 lfence
  00022	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 189  :     const uintptr_t _Ptr_container = reinterpret_cast<uintptr_t>(_Traits::_Allocate(_Block_size));

  00027	8b c8		 mov	 ecx, eax

; 136  :         return ::operator new(_Bytes);

  00029	83 c4 04	 add	 esp, 4

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0002c	85 c9		 test	 ecx, ecx
  0002e	74 1a		 je	 SHORT $LN17@Allocate

; 191  :     void* const _Ptr = reinterpret_cast<void*>((_Ptr_container + _Non_user_size) & ~(_Big_allocation_alignment - 1));

  00030	8d 41 23	 lea	 eax, DWORD PTR [ecx+35]
  00033	83 e0 e0	 and	 eax, -32		; ffffffe0H
  00036	0f ae e8	 lfence

; 192  :     static_cast<uintptr_t*>(_Ptr)[-1] = _Ptr_container;

  00039	89 48 fc	 mov	 DWORD PTR [eax-4], ecx

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
; 254  :         }
; 255  : #endif // defined(_M_IX86) || defined(_M_X64)
; 256  :         return _Traits::_Allocate(_Bytes);
; 257  :     }
; 258  : }

  0003c	5d		 pop	 ebp
  0003d	c3		 ret	 0
$LN3@Allocate:

; 136  :         return ::operator new(_Bytes);

  0003e	0f ae e8	 lfence
  00041	89 45 08	 mov	 DWORD PTR __Bytes$[ebp], eax

; 252  :             // boost the alignment of big allocations to help autovectorization
; 253  :             return _Allocate_manually_vector_aligned<_Traits>(_Bytes);
; 254  :         }
; 255  : #endif // defined(_M_IX86) || defined(_M_X64)
; 256  :         return _Traits::_Allocate(_Bytes);
; 257  :     }
; 258  : }

  00044	5d		 pop	 ebp

; 136  :         return ::operator new(_Bytes);

  00045	e9 00 00 00 00	 jmp	 ??2@YAPAXI@Z		; operator new
$LN17@Allocate:

; 190  :     _STL_VERIFY(_Ptr_container != 0, "invalid argument"); // validate even in release since we're doing p[-1]

  0004a	6a 00		 push	 0
  0004c	6a 00		 push	 0
  0004e	6a 00		 push	 0
  00050	6a 00		 push	 0
  00052	6a 00		 push	 0
  00054	e8 00 00 00 00	 call	 __invoke_watson
$LN15@Allocate:
  00059	cc		 int	 3
??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ENDP ; std::_Allocate<8,std::_Default_allocate_traits>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??_G?$numpunct@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@D@std@@MAEPAXI@Z PROC			; std::numpunct<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 142  :     __CLR_OR_THIS_CALL ~numpunct() noexcept override {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  00006	ff 76 08	 push	 DWORD PTR [esi+8]

; 142  :     __CLR_OR_THIS_CALL ~numpunct() noexcept override {

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  0000f	e8 00 00 00 00	 call	 _free

; 203  :         _CSTD free(const_cast<_Elem*>(_Falsename));

  00014	ff 76 10	 push	 DWORD PTR [esi+16]
  00017	e8 00 00 00 00	 call	 _free

; 204  :         _CSTD free(const_cast<_Elem*>(_Truename));

  0001c	ff 76 14	 push	 DWORD PTR [esi+20]
  0001f	e8 00 00 00 00	 call	 _free
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 144  :     }

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00031	74 0b		 je	 SHORT $LN13@scalar
  00033	6a 18		 push	 24			; 00000018H
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN13@scalar:
  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??_G?$numpunct@D@std@@MAEPAXI@Z ENDP			; std::numpunct<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_truename, COMDAT
; _this$ = ecx

; 196  :     virtual string_type __CLR_OR_THIS_CALL do_truename() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 197  :         return string_type{_Truename};

  00004	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0000e	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 196  :     virtual string_type __CLR_OR_THIS_CALL do_truename() const {

  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0001b	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LL23@do_truenam:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00025	8a 01		 mov	 al, BYTE PTR [ecx]
  00027	41		 inc	 ecx
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL23@do_truenam
  0002c	2b cf		 sub	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002e	51		 push	 ecx
  0002f	52		 push	 edx
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 197  :         return string_type{_Truename};

  00037	5f		 pop	 edi
  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi

; 198  :     }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?do_truename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_truename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_falsename, COMDAT
; _this$ = ecx

; 192  :     virtual string_type __CLR_OR_THIS_CALL do_falsename() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 193  :         return string_type{_Falsename};

  00004	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0000e	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 192  :     virtual string_type __CLR_OR_THIS_CALL do_falsename() const {

  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0001b	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LL23@do_falsena:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00025	8a 01		 mov	 al, BYTE PTR [ecx]
  00027	41		 inc	 ecx
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL23@do_falsena
  0002c	2b cf		 sub	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002e	51		 push	 ecx
  0002f	52		 push	 edx
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 193  :         return string_type{_Falsename};

  00037	5f		 pop	 edi
  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi

; 194  :     }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?do_falsename@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_falsename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<char>::do_grouping, COMDAT
; _this$ = ecx

; 188  :     virtual string __CLR_OR_THIS_CALL do_grouping() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 189  :         return string{_Grouping};

  00004	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0000e	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 188  :     virtual string __CLR_OR_THIS_CALL do_grouping() const {

  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0001b	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LL23@do_groupin:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00025	8a 01		 mov	 al, BYTE PTR [ecx]
  00027	41		 inc	 ecx
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL23@do_groupin
  0002c	2b cf		 sub	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002e	51		 push	 ecx
  0002f	52		 push	 edx
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 189  :         return string{_Grouping};

  00037	5f		 pop	 edi
  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi

; 190  :     }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?do_grouping@?$numpunct@D@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<char>::do_grouping
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_thousands_sep@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_thousands_sep, COMDAT
; _this$ = ecx

; 185  :         return _Kseparator;

  00000	8a 41 0d	 mov	 al, BYTE PTR [ecx+13]

; 186  :     }

  00003	c3		 ret	 0
?do_thousands_sep@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_thousands_sep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_decimal_point@?$numpunct@D@std@@MBEDXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@D@std@@MBEDXZ PROC		; std::numpunct<char>::do_decimal_point, COMDAT
; _this$ = ecx

; 181  :         return _Dp;

  00000	8a 41 0c	 mov	 al, BYTE PTR [ecx+12]

; 182  :     }

  00003	c3		 ret	 0
?do_decimal_point@?$numpunct@D@std@@MBEDXZ ENDP		; std::numpunct<char>::do_decimal_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??1?$numpunct@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@D@std@@MAE@XZ PROC			; std::numpunct<char>::~numpunct<char>, COMDAT
; _this$ = ecx

; 142  :     __CLR_OR_THIS_CALL ~numpunct() noexcept override {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  00003	ff 76 08	 push	 DWORD PTR [esi+8]

; 142  :     __CLR_OR_THIS_CALL ~numpunct() noexcept override {

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  0000c	e8 00 00 00 00	 call	 _free

; 203  :         _CSTD free(const_cast<_Elem*>(_Falsename));

  00011	ff 76 10	 push	 DWORD PTR [esi+16]
  00014	e8 00 00 00 00	 call	 _free

; 204  :         _CSTD free(const_cast<_Elem*>(_Truename));

  00019	ff 76 14	 push	 DWORD PTR [esi+20]
  0001c	e8 00 00 00 00	 call	 _free
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 143  :         _Tidy();
; 144  :     }

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??1?$numpunct@D@std@@MAE@XZ ENDP			; std::numpunct<char>::~numpunct<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -124						; size = 52
$T3 = -72						; size = 44
__Lock$4 = -28						; size = 4
$T5 = -24						; size = 4
__Psave$1$ = -24					; size = 4
__Lock$6 = -20						; size = 4
$T7 = -20						; size = 4
$T8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$9 = 8					; size = 4
__Guard$10 = 8						; size = 4
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<char> >, COMDAT

; 435  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 70	 sub	 esp, 112		; 00000070H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	33 c0		 xor	 eax, eax

; 436  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  0002a	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002d	50		 push	 eax
  0002e	89 45 f0	 mov	 DWORD PTR $T8[ebp], eax
  00031	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax
  00034	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00039	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id

; 437  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003f	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<char> >::_Psave
  00044	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004b	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  0004e	85 ff		 test	 edi, edi
  00050	75 2f		 jne	 SHORT $LN11@use_facet

; 92   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00052	57		 push	 edi
  00053	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00056	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 93   :                 if (_Id == 0) {

  0005b	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, edi ; std::numpunct<char>::id
  00061	75 10		 jne	 SHORT $LN12@use_facet

; 94   :                     _Id = static_cast<size_t>(++_Id_cnt);

  00063	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00068	40		 inc	 eax
  00069	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006e	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A, eax ; std::numpunct<char>::id
$LN12@use_facet:

; 95   :                 }
; 96   :                 _END_LOCK()

  00073	8d 4d ec	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  00076	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@D@std@@2V0locale@2@A ; std::numpunct<char>::id
$LN11@use_facet:

; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00081	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00084	8d 1c bd 00 00
	00 00		 lea	 ebx, DWORD PTR [edi*4]
  0008b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0008e	3b 79 0c	 cmp	 edi, DWORD PTR [ecx+12]
  00091	73 16		 jae	 SHORT $LN19@use_facet
  00093	0f ae e8	 lfence
  00096	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00099	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0009c	8b 34 03	 mov	 esi, DWORD PTR [ebx+eax]

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  0009f	85 f6		 test	 esi, esi
  000a1	0f 85 66 01 00
	00		 jne	 $LN109@use_facet
  000a7	eb 02		 jmp	 SHORT $LN125@use_facet
$LN19@use_facet:

; 374  :     }
; 375  : 
; 376  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000a9	33 f6		 xor	 esi, esi
$LN125@use_facet:

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  000ab	80 79 14 00	 cmp	 BYTE PTR [ecx+20], 0
  000af	74 13		 je	 SHORT $LN14@use_facet

; 379  :             return _Facptr; // found facet or not transparent
; 380  :         }
; 381  : 
; 382  :         // look in current locale
; 383  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000b1	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 384  :         if (_Id < _Ptr0->_Facetcount) {

  000b6	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000b9	73 11		 jae	 SHORT $LN126@use_facet

; 385  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000bb	0f ae e8	 lfence
  000be	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c1	8b 34 03	 mov	 esi, DWORD PTR [ebx+eax]
$LN14@use_facet:

; 438  : 
; 439  :     const size_t _Id         = _Facet::id._Get_index();
; 440  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 441  : 
; 442  :     if (!_Pf) {

  000c4	85 f6		 test	 esi, esi
  000c6	0f 85 41 01 00
	00		 jne	 $LN109@use_facet
$LN126@use_facet:

; 443  :         if (_Psave) {

  000cc	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000cf	85 c0		 test	 eax, eax
  000d1	74 07		 je	 SHORT $LN3@use_facet

; 444  :             _Pf = _Psave; // lazy facet already allocated

  000d3	8b f0		 mov	 esi, eax

; 445  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000d5	e9 33 01 00 00	 jmp	 $LN109@use_facet
$LN3@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 136  :             *_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->_C_str()), 0, true);

  000da	6a 18		 push	 24			; 00000018H
  000dc	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e1	8b f0		 mov	 esi, eax
  000e3	83 c4 04	 add	 esp, 4
  000e6	89 75 ec	 mov	 DWORD PTR $T7[ebp], esi
  000e9	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ed	85 f6		 test	 esi, esi
  000ef	0f 84 e4 00 00
	00		 je	 $LN24@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f5	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  000f8	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000fb	85 c9		 test	 ecx, ecx
  000fd	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  000ff	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00102	85 c0		 test	 eax, eax
  00104	75 0a		 jne	 SHORT $LN33@use_facet
  00106	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00109	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  0010b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 136  :             *_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->_C_str()), 0, true);

  00110	50		 push	 eax
  00111	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  00114	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00119	b8 01 00 00 00	 mov	 eax, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 143  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0011e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 136  :             *_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->_C_str()), 0, true);

  00125	89 45 f0	 mov	 DWORD PTR $T8[ebp], eax
  00128	89 45 e8	 mov	 DWORD PTR $T5[ebp], eax

; 129  :     numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false) : locale::facet(_Refs) {

  0012b	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  00132	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@D@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 285  :         return localeconv();

  00138	e8 00 00 00 00	 call	 _localeconv

; 281  :         return ::_Getcvt();

  0013d	8d 45 b8	 lea	 eax, DWORD PTR $T3[ebp]
  00140	50		 push	 eax
  00141	e8 00 00 00 00	 call	 __Getcvt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 156  :         _Grouping  = nullptr;

  00146	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 157  :         _Falsename = nullptr;

  0014d	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 158  :         _Truename  = nullptr;

  00154	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 160  :         _Tidy_guard<numpunct> _Guard{this};

  0015b	89 75 08	 mov	 DWORD PTR __Guard$10[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0015e	6a 01		 push	 1
  00160	6a 01		 push	 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 160  :         _Tidy_guard<numpunct> _Guard{this};

  00162	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  00166	e8 00 00 00 00	 call	 _calloc
  0016b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 531  : 
; 532  :     if (!_Ptrdest) {

  0016e	85 c0		 test	 eax, eax
  00170	0f 84 b3 00 00
	00		 je	 $LN131@use_facet

; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  00176	6a 01		 push	 1
  00178	6a 06		 push	 6

; 537  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  0017a	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 161  :         _Grouping      = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char*>(nullptr), _Cvt);

  0017d	89 46 08	 mov	 DWORD PTR [esi+8], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  00180	e8 00 00 00 00	 call	 _calloc
  00185	8b c8		 mov	 ecx, eax
  00187	83 c4 08	 add	 esp, 8

; 531  : 
; 532  :     if (!_Ptrdest) {

  0018a	85 c9		 test	 ecx, ecx
  0018c	0f 84 9c 00 00
	00		 je	 $LN132@use_facet

; 534  :     }
; 535  : 
; 536  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  00192	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_05LAPONLG@false@
  00197	89 01		 mov	 DWORD PTR [ecx], eax
  00199	66 a1 04 00 00
	00		 mov	 ax, WORD PTR ??_C@_05LAPONLG@false@+4

; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  0019f	6a 01		 push	 1
  001a1	6a 05		 push	 5

; 536  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  001a3	66 89 41 04	 mov	 WORD PTR [ecx+4], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 162  :         _Falsename     = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem*>(nullptr), _Cvt);

  001a7	89 4e 10	 mov	 DWORD PTR [esi+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  001aa	e8 00 00 00 00	 call	 _calloc
  001af	8b c8		 mov	 ecx, eax
  001b1	83 c4 08	 add	 esp, 8

; 531  : 
; 532  :     if (!_Ptrdest) {

  001b4	85 c9		 test	 ecx, ecx
  001b6	74 7b		 je	 SHORT $LN133@use_facet

; 534  :     }
; 535  : 
; 536  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {

  001b8	a1 00 00 00 00	 mov	 eax, DWORD PTR ??_C@_04LOAJBDKD@true@
  001bd	89 01		 mov	 DWORD PTR [ecx], eax
  001bf	a0 04 00 00 00	 mov	 al, BYTE PTR ??_C@_04LOAJBDKD@true@+4
  001c4	88 41 04	 mov	 BYTE PTR [ecx+4], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 163  :         _Truename      = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem*>(nullptr), _Cvt);

  001c7	89 4e 14	 mov	 DWORD PTR [esi+20], ecx

; 164  :         _Guard._Target = nullptr;

  001ca	c7 45 08 00 00
	00 00		 mov	 DWORD PTR __Guard$10[ebp], 0

; 165  : 
; 166  :         if (_Isdef) { // apply defaults for required facets
; 167  :             _Dp         = _Maklocchr('.', static_cast<_Elem*>(nullptr), _Cvt);

  001d1	66 c7 46 0c 2e
	2c		 mov	 WORD PTR [esi+12], 11310 ; 00002c2eH

; 136  :             *_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->_C_str()), 0, true);

  001d7	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  001d9	33 f6		 xor	 esi, esi
$LN25@use_facet:
  001db	f6 45 f0 01	 test	 BYTE PTR $T8[ebp], 1
  001df	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  001e6	74 08		 je	 SHORT $LN29@use_facet
  001e8	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  001eb	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  001f0	89 75 08	 mov	 DWORD PTR __Psave_guard$9[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 458  :             _Facet_Register(_Pfmod);

  001f3	56		 push	 esi
  001f4	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  001f8	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 459  : #endif // ^^^ !defined(_M_CEE) ^^^
; 460  : 
; 461  :             _Pfmod->_Incref();

  001fd	8b 16		 mov	 edx, DWORD PTR [esi]
  001ff	83 c4 04	 add	 esp, 4
  00202	8b ce		 mov	 ecx, esi
  00204	ff 52 04	 call	 DWORD PTR [edx+4]

; 462  :             _Facetptr<_Facet>::_Psave = _Psave;

  00207	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<char> >::_Psave
$LN109@use_facet:

; 463  :             _Pf                       = _Psave;
; 464  : 
; 465  :             (void) _Psave_guard.release();
; 466  :         }
; 467  :     }
; 468  : 
; 469  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  0020d	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00210	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00215	8b c6		 mov	 eax, esi

; 470  :     _END_LOCK()
; 471  : } // end of use_facet body

  00217	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0021a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00221	59		 pop	 ecx
  00222	5f		 pop	 edi
  00223	5e		 pop	 esi
  00224	5b		 pop	 ebx
  00225	8b e5		 mov	 esp, ebp
  00227	5d		 pop	 ebp
  00228	c3		 ret	 0
$LN131@use_facet:

; 533  :         _Xbad_alloc();

  00229	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN132@use_facet:
  0022e	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN133@use_facet:
  00233	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN128@use_facet:
  00238	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$2:
  00008	6a 18		 push	 24			; 00000018H
  0000a	8b 45 ec	 mov	 eax, DWORD PTR $T7[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$3:
  00017	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0001a	83 e0 01	 and	 eax, 1
  0001d	0f 84 0c 00 00
	00		 je	 $LN28@use_facet
  00023	83 65 e8 fe	 and	 DWORD PTR $T5[ebp], -2	; fffffffeH
  00027	8d 4d 84	 lea	 ecx, DWORD PTR $T2[ebp]
  0002a	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN28@use_facet:
  0002f	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$4:
  00030	8b 4d ec	 mov	 ecx, DWORD PTR $T7[ebp]
  00033	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$6:
  00038	8d 4d 08	 lea	 ecx, DWORD PTR __Guard$10[ebp]
  0003b	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$numpunct@D@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::numpunct<char> >::~_Tidy_guard<std::numpunct<char> >
__unwindfunclet$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z$1:
  00040	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$9[ebp]
  00043	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00048	cc		 int	 3
  00049	cc		 int	 3
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
__ehhandler$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z:
  0004d	90		 npad	 1
  0004e	90		 npad	 1
  0004f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00053	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00056	8b 4a 80	 mov	 ecx, DWORD PTR [edx-128]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<char> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -116				; size = 4
$T2 = -112						; size = 8
$T3 = -108						; size = 4
$T4 = -104						; size = 8
__Ctype_fac$1$ = -100					; size = 4
$T5 = -96						; size = 8
__Eoff$1$ = -92						; size = 4
__Count$GSCopy$2$ = -92					; size = 4
__Count$GSCopy$1$ = -88					; size = 4
$T6 = -84						; size = 8
$T7 = -84						; size = 8
$T8 = -84						; size = 8
$T9 = -84						; size = 8
$T10 = -84						; size = 8
__Kseparator$ = -80					; size = 1
__Buf$GSCopy$1$ = -80					; size = 4
$T11 = -80						; size = 4
__Dp$ = -76						; size = 2
_this$1$ = -72						; size = 4
__Iosbase$GSCopy$1$ = -68				; size = 4
__Dest$7$ = -68						; size = 4
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Buf$ = 28						; size = 4
__Count$ = 32						; size = 4
__Is_finite_val$ = 36					; size = 1
??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput_v3<0>, COMDAT
; _this$ = ecx

; 1470 :         bool _Is_finite_val) const { // put formatted floating-point to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002e	8b 75 20	 mov	 esi, DWORD PTR __Count$[ebp]
  00031	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00034	8b 4d 14	 mov	 ecx, DWORD PTR __Iosbase$[ebp]
  00037	8b 7d 1c	 mov	 edi, DWORD PTR __Buf$[ebp]
  0003a	89 45 8c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003d	89 4d bc	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], ecx
  00040	89 7d b0	 mov	 DWORD PTR __Buf$GSCopy$1$[ebp], edi
  00043	89 75 a8	 mov	 DWORD PTR __Count$GSCopy$1$[ebp], esi

; 1471 :         auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  00046	85 f6		 test	 esi, esi
  00048	74 11		 je	 SHORT $LN20@Fput_v3
  0004a	8a 07		 mov	 al, BYTE PTR [edi]
  0004c	3c 2b		 cmp	 al, 43			; 0000002bH
  0004e	74 04		 je	 SHORT $LN19@Fput_v3
  00050	3c 2d		 cmp	 al, 45			; 0000002dH
  00052	75 07		 jne	 SHORT $LN20@Fput_v3
$LN19@Fput_v3:
  00054	bb 01 00 00 00	 mov	 ebx, 1
  00059	eb 02		 jmp	 SHORT $LN21@Fput_v3
$LN20@Fput_v3:
  0005b	33 db		 xor	 ebx, ebx
$LN21@Fput_v3:

; 1472 :         const char* _Exps;
; 1473 :         if ((_Iosbase.flags() & ios_base::floatfield) != (ios_base::scientific | ios_base::fixed)) {

  0005d	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00060	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00065	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  0006a	74 07		 je	 SHORT $LN4@Fput_v3

; 1474 :             _Exps = "eE";

  0006c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02MDKMJEGG@eE@

; 1475 :         } else { // correct for hexadecimal floating-point

  00071	eb 22		 jmp	 SHORT $LN6@Fput_v3
$LN4@Fput_v3:

; 1476 :             _Exps = "pP";
; 1477 :             if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1478 :                 && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X')) {

  00073	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00076	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02OOPEBDOJ@pP@
  0007b	3b c6		 cmp	 eax, esi
  0007d	77 16		 ja	 SHORT $LN6@Fput_v3
  0007f	80 3c 1f 30	 cmp	 BYTE PTR [edi+ebx], 48	; 00000030H
  00083	75 10		 jne	 SHORT $LN6@Fput_v3
  00085	8a 4c 1f 01	 mov	 cl, BYTE PTR [edi+ebx+1]
  00089	80 f9 78	 cmp	 cl, 120			; 00000078H
  0008c	74 05		 je	 SHORT $LN7@Fput_v3
  0008e	80 f9 58	 cmp	 cl, 88			; 00000058H
  00091	75 02		 jne	 SHORT $LN6@Fput_v3
$LN7@Fput_v3:

; 1479 :                 _Prefix += 2;

  00093	8b d8		 mov	 ebx, eax
$LN6@Fput_v3:

; 1480 :             }
; 1481 :         }
; 1482 :         const size_t _Eoff = _CSTD strcspn(&_Buf[0], _Exps); // find exponent

  00095	52		 push	 edx
  00096	57		 push	 edi
  00097	e8 00 00 00 00	 call	 _strcspn
  0009c	89 45 a4	 mov	 DWORD PTR __Eoff$1$[ebp], eax

; 1483 :         char _Dp[2]        = {"."};

  0009f	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  000a4	66 89 45 b4	 mov	 WORD PTR __Dp$[ebp], ax

; 1484 :         _Dp[0]             = (_CSTD localeconv())->decimal_point[0];

  000a8	e8 00 00 00 00	 call	 _localeconv
  000ad	8b 00		 mov	 eax, DWORD PTR [eax]
  000af	8a 00		 mov	 al, BYTE PTR [eax]
  000b1	88 45 b4	 mov	 BYTE PTR __Dp$[ebp], al

; 1485 :         const size_t _Poff = _CSTD strcspn(&_Buf[0], &_Dp[0]); // find decimal point

  000b4	8d 45 b4	 lea	 eax, DWORD PTR __Dp$[ebp]
  000b7	50		 push	 eax
  000b8	57		 push	 edi
  000b9	e8 00 00 00 00	 call	 _strcspn
  000be	8b f8		 mov	 edi, eax
  000c0	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  000c3	8b 45 bc	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  000c6	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  000c9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cc	89 4d 94	 mov	 DWORD PTR $T3[ebp], ecx
  000cf	89 4d 9c	 mov	 DWORD PTR $T4[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  000d2	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d4	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1487 :         const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  000d7	8d 45 98	 lea	 eax, DWORD PTR $T4[ebp]
  000da	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000e1	50		 push	 eax
  000e2	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000e7	8b 4d 94	 mov	 ecx, DWORD PTR $T3[ebp]
  000ea	83 c4 04	 add	 esp, 4
  000ed	89 45 9c	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f7	85 c9		 test	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  000f9	74 11		 je	 SHORT $LN37@Fput_v3

; 355  :             delete _Ptr->_Decref();

  000fb	8b 01		 mov	 eax, DWORD PTR [ecx]
  000fd	ff 50 08	 call	 DWORD PTR [eax+8]
  00100	8b c8		 mov	 ecx, eax
  00102	85 c9		 test	 ecx, ecx
  00104	74 06		 je	 SHORT $LN37@Fput_v3
  00106	8b 01		 mov	 eax, DWORD PTR [ecx]
  00108	6a 01		 push	 1
  0010a	ff 10		 call	 DWORD PTR [eax]
$LN37@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1488 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  0010c	6a 00		 push	 0
  0010e	56		 push	 esi
  0010f	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00112	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00117	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  0011b	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  0011e	8b 45 9c	 mov	 eax, DWORD PTR __Ctype_fac$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00121	0f 47 4d d8	 cmova	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  00125	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1489 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  00126	8b 4d b0	 mov	 ecx, DWORD PTR __Buf$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  00129	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1488 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  0012b	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  00132	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1489 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  00135	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  00138	50		 push	 eax
  00139	51		 push	 ecx
  0013a	8b 4d 9c	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
  0013d	ff d2		 call	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  0013f	8b 4d bc	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00142	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00145	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00148	89 4d b0	 mov	 DWORD PTR $T11[ebp], ecx
  0014b	89 4d 94	 mov	 DWORD PTR $T2[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  0014e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00150	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1491 :         const auto& _Punct_fac  = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00153	8d 45 90	 lea	 eax, DWORD PTR $T2[ebp]
  00156	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  00160	8b 4d b0	 mov	 ecx, DWORD PTR $T11[ebp]
  00163	83 c4 04	 add	 esp, 4
  00166	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0016a	8b f0		 mov	 esi, eax
  0016c	85 c9		 test	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  0016e	74 11		 je	 SHORT $LN63@Fput_v3

; 355  :             delete _Ptr->_Decref();

  00170	8b 01		 mov	 eax, DWORD PTR [ecx]
  00172	ff 50 08	 call	 DWORD PTR [eax+8]
  00175	8b c8		 mov	 ecx, eax
  00177	85 c9		 test	 ecx, ecx
  00179	74 06		 je	 SHORT $LN63@Fput_v3
  0017b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0017d	6a 01		 push	 1
  0017f	ff 10		 call	 DWORD PTR [eax]
$LN63@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 108  :         return do_grouping();

  00181	8b 06		 mov	 eax, DWORD PTR [esi]
  00183	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00186	51		 push	 ecx
  00187	8b ce		 mov	 ecx, esi
  00189	ff 50 14	 call	 DWORD PTR [eax+20]

; 104  :         return do_thousands_sep();

  0018c	8b 06		 mov	 eax, DWORD PTR [esi]
  0018e	8b ce		 mov	 ecx, esi

; 1492 :         const string _Grouping  = _Punct_fac.grouping();

  00190	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 104  :         return do_thousands_sep();

  00194	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00197	ff d0		 call	 eax

; 1493 :         const _Elem _Kseparator = _Punct_fac.thousands_sep();

  00199	88 45 b0	 mov	 BYTE PTR __Kseparator$[ebp], al

; 1494 : 
; 1495 :         if (_Poff != _Count) {

  0019c	8b 45 a8	 mov	 eax, DWORD PTR __Count$GSCopy$1$[ebp]
  0019f	3b f8		 cmp	 edi, eax
  001a1	74 1c		 je	 SHORT $LN8@Fput_v3

; 100  :         return do_decimal_point();

  001a3	8b 06		 mov	 eax, DWORD PTR [esi]
  001a5	8b ce		 mov	 ecx, esi
  001a7	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  001aa	ff d0		 call	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001ac	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 100  :         return do_decimal_point();

  001b0	8a c8		 mov	 cl, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  001b2	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 436  :         if (_Large_mode_engaged()) {

  001b5	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1496 :             _Groupstring[_Poff] = _Punct_fac.decimal_point();

  001b9	88 0c 38	 mov	 BYTE PTR [eax+edi], cl
  001bc	8b 45 a8	 mov	 eax, DWORD PTR __Count$GSCopy$1$[ebp]
$LN8@Fput_v3:

; 1497 :         }
; 1498 : 
; 1499 :         if (_Is_finite_val) {

  001bf	80 7d 24 00	 cmp	 BYTE PTR __Is_finite_val$[ebp], 0
  001c3	74 4a		 je	 SHORT $LN3@Fput_v3

; 1500 :             size_t _Off     = _Poff == _Count ? _Eoff : _Poff;

  001c5	3b f8		 cmp	 edi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 444  :         const value_type* _Result = _Bx._Buf;

  001c7	8d 75 c0	 lea	 esi, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1500 :             size_t _Off     = _Poff == _Count ? _Eoff : _Poff;

  001ca	0f 44 7d a4	 cmove	 edi, DWORD PTR __Eoff$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001ce	83 7d d4 0f	 cmp	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH

; 445  :         if (_Large_mode_engaged()) {

  001d2	0f 47 75 c0	 cmova	 esi, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1502 :             while (*_Pg != CHAR_MAX && '\0' < *_Pg && static_cast<size_t>(*_Pg) < _Off - _Prefix) {

  001d6	8a 06		 mov	 al, BYTE PTR [esi]
  001d8	3c 7f		 cmp	 al, 127			; 0000007fH
  001da	74 33		 je	 SHORT $LN3@Fput_v3
  001dc	0f 1f 40 00	 npad	 4
$LL2@Fput_v3:
  001e0	84 c0		 test	 al, al
  001e2	7e 2b		 jle	 SHORT $LN3@Fput_v3
  001e4	0f be 0e	 movsx	 ecx, BYTE PTR [esi]
  001e7	8b c7		 mov	 eax, edi
  001e9	2b c3		 sub	 eax, ebx
  001eb	3b c8		 cmp	 ecx, eax
  001ed	73 20		 jae	 SHORT $LN3@Fput_v3

; 1503 :                 // add thousands separator
; 1504 :                 _Groupstring.insert(_Off -= *_Pg, 1, _Kseparator);

  001ef	ff 75 b0	 push	 DWORD PTR __Kseparator$[ebp]
  001f2	2b f9		 sub	 edi, ecx
  001f4	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  001f7	6a 01		 push	 1
  001f9	57		 push	 edi
  001fa	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1505 :                 if ('\0' < _Pg[1]) {

  001ff	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  00203	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00206	0f 4f f0	 cmovg	 esi, eax
  00209	8a 06		 mov	 al, BYTE PTR [esi]
  0020b	3c 7f		 cmp	 al, 127			; 0000007fH
  0020d	75 d1		 jne	 SHORT $LL2@Fput_v3
$LN3@Fput_v3:

; 1506 :                     ++_Pg; // not last group, advance
; 1507 :                 }
; 1508 :             }
; 1509 :         }
; 1510 : 
; 1511 :         _Count = _Groupstring.size();
; 1512 : 
; 1513 :         size_t _Fillcount;
; 1514 :         if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Count) {

  0020f	8b 7d bc	 mov	 edi, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00212	8b 45 e8	 mov	 eax, DWORD PTR __Groupstring$[ebp+16]
  00215	89 45 a4	 mov	 DWORD PTR __Count$GSCopy$2$[ebp], eax
  00218	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  0021c	8b 77 20	 mov	 esi, DWORD PTR [edi+32]
  0021f	7c 0e		 jl	 SHORT $LN13@Fput_v3
  00221	7f 04		 jg	 SHORT $LN204@Fput_v3
  00223	85 f6		 test	 esi, esi
  00225	74 08		 je	 SHORT $LN13@Fput_v3
$LN204@Fput_v3:
  00227	3b f0		 cmp	 esi, eax
  00229	76 04		 jbe	 SHORT $LN13@Fput_v3

; 1516 :         } else {
; 1517 :             _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Count;

  0022b	2b f0		 sub	 esi, eax
  0022d	eb 02		 jmp	 SHORT $LN12@Fput_v3
$LN13@Fput_v3:

; 1515 :             _Fillcount = 0;

  0022f	33 f6		 xor	 esi, esi
$LN12@Fput_v3:

; 1518 :         }
; 1519 : 
; 1520 :         ios_base::fmtflags _Adjustfield = _Iosbase.flags() & ios_base::adjustfield;

  00231	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00234	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1521 :         if (_Adjustfield != ios_base::left && _Adjustfield != ios_base::internal) { // put leading fill

  00239	83 f8 40	 cmp	 eax, 64			; 00000040H
  0023c	0f 84 8d 00 00
	00		 je	 $LN16@Fput_v3
  00242	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00247	74 43		 je	 SHORT $LN203@Fput_v3

; 1522 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  00249	56		 push	 esi
  0024a	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0024d	8d 45 ac	 lea	 eax, DWORD PTR $T6[ebp]
  00250	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00253	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00256	50		 push	 eax
  00257	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  0025a	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep

; 1523 :             _Fillcount = 0;

  0025f	33 f6		 xor	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00261	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1524 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00265	53		 push	 ebx
  00266	8b 10		 mov	 edx, DWORD PTR [eax]
  00268	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  0026b	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 436  :         if (_Large_mode_engaged()) {

  0026e	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1524 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00272	50		 push	 eax
  00273	51		 push	 ecx
  00274	52		 push	 edx
  00275	8d 45 ac	 lea	 eax, DWORD PTR $T7[ebp]
  00278	89 55 0c	 mov	 DWORD PTR __Dest$[ebp], edx
  0027b	50		 push	 eax
  0027c	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  0027f	89 4d 10	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00282	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00287	83 c4 30	 add	 esp, 48			; 00000030H
  0028a	eb 65		 jmp	 SHORT $LN208@Fput_v3
$LN203@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0028c	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00290	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1526 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00293	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00294	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1526 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00298	50		 push	 eax
  00299	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0029c	8d 45 ac	 lea	 eax, DWORD PTR $T8[ebp]
  0029f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  002a2	50		 push	 eax
  002a3	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  002a6	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1527 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  002ab	56		 push	 esi
  002ac	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  002af	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002b4	50		 push	 eax
  002b5	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
  002b8	8d 45 ac	 lea	 eax, DWORD PTR $T9[ebp]
  002bb	51		 push	 ecx
  002bc	50		 push	 eax
  002bd	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  002c0	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  002c3	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  002c8	83 c4 30	 add	 esp, 48			; 00000030H

; 1528 :             _Fillcount = 0;

  002cb	33 f6		 xor	 esi, esi

; 1529 :         } else {

  002cd	eb 22		 jmp	 SHORT $LN208@Fput_v3
$LN16@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  002cf	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  002d3	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1530 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  002d6	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  002d7	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1530 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  002db	50		 push	 eax
  002dc	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  002df	8d 45 ac	 lea	 eax, DWORD PTR $T10[ebp]
  002e2	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  002e5	50		 push	 eax
  002e6	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  002e9	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  002ee	83 c4 18	 add	 esp, 24			; 00000018H
$LN208@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  002f1	8b 10		 mov	 edx, DWORD PTR [eax]
  002f3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 453  :         return _Myres > _Small_string_capacity;

  002f6	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1533 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  002fa	8b 4d a4	 mov	 ecx, DWORD PTR __Count$GSCopy$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  002fd	89 45 bc	 mov	 DWORD PTR __Dest$7$[ebp], eax
  00300	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00303	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 436  :         if (_Large_mode_engaged()) {

  00306	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1533 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  0030a	2b cb		 sub	 ecx, ebx
  0030c	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2272 :         return _Mypair._Myval2._Myptr()[_Off];

  0030d	03 c3		 add	 eax, ebx

; 435  :         value_type* _Result = _Bx._Buf;

  0030f	89 55 0c	 mov	 DWORD PTR __Dest$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1533 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00312	8b 5d b8	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00315	50		 push	 eax
  00316	ff 75 bc	 push	 DWORD PTR __Dest$7$[ebp]
  00319	8d 45 a0	 lea	 eax, DWORD PTR $T5[ebp]
  0031c	52		 push	 edx
  0031d	50		 push	 eax
  0031e	53		 push	 ebx
  0031f	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1535 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00324	56		 push	 esi
  00325	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00328	8b 75 8c	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0032b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0032d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00330	50		 push	 eax
  00331	51		 push	 ecx
  00332	56		 push	 esi
  00333	53		 push	 ebx
  00334	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00337	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  0033a	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00341	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1535 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00348	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0034d	8b 4d d4	 mov	 ecx, DWORD PTR __Grouping$[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1535 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00350	83 c4 30	 add	 esp, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00353	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  00356	76 28		 jbe	 SHORT $LN92@Fput_v3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00358	8b 55 c0	 mov	 edx, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0035b	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0035c	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0035e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00364	72 10		 jb	 SHORT $LN97@Fput_v3

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00366	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00369	83 c1 23	 add	 ecx, 35			; 00000023H
  0036c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0036e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00371	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00374	77 6c		 ja	 SHORT $LN128@Fput_v3
$LN97@Fput_v3:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00376	51		 push	 ecx
  00377	52		 push	 edx
  00378	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0037d	83 c4 08	 add	 esp, 8
$LN92@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00380	8b 4d ec	 mov	 ecx, DWORD PTR __Groupstring$[ebp+20]

; 3090 :         _My_data._Mysize = 0;

  00383	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0

; 3091 :         _My_data._Myres  = _Small_string_capacity;

  0038a	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH

; 3092 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00391	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0

; 453  :         return _Myres > _Small_string_capacity;

  00395	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  00398	76 28		 jbe	 SHORT $LN124@Fput_v3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0039a	8b 55 d8	 mov	 edx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0039d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0039e	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  003a0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  003a6	72 10		 jb	 SHORT $LN129@Fput_v3

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  003a8	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  003ab	83 c1 23	 add	 ecx, 35			; 00000023H
  003ae	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003b0	83 c0 fc	 add	 eax, -4			; fffffffcH
  003b3	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  003b6	77 2a		 ja	 SHORT $LN128@Fput_v3
$LN129@Fput_v3:

; 289  :         ::operator delete(_Ptr, _Bytes);

  003b8	51		 push	 ecx
  003b9	52		 push	 edx
  003ba	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  003bf	83 c4 08	 add	 esp, 8
$LN124@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1535 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  003c2	8b c6		 mov	 eax, esi

; 1536 :     }

  003c4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003c7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003ce	59		 pop	 ecx
  003cf	5f		 pop	 edi
  003d0	5e		 pop	 esi
  003d1	5b		 pop	 ebx
  003d2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003d5	33 cd		 xor	 ecx, ebp
  003d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003dc	8b e5		 mov	 esp, ebp
  003de	5d		 pop	 ebp
  003df	c2 20 00	 ret	 32			; 00000020H
$LN128@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  003e2	6a 00		 push	 0
  003e4	6a 00		 push	 0
  003e6	6a 00		 push	 0
  003e8	6a 00		 push	 0
  003ea	6a 00		 push	 0
  003ec	e8 00 00 00 00	 call	 __invoke_watson
$LN207@Fput_v3:
  003f1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z$0:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR $T4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z$2:
  00010	8d 4d 90	 lea	 ecx, DWORD PTR $T2[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput_v3<0>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??_G?$numpunct@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$numpunct@_W@std@@MAEPAXI@Z PROC			; std::numpunct<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 142  :     __CLR_OR_THIS_CALL ~numpunct() noexcept override {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  00006	ff 76 08	 push	 DWORD PTR [esi+8]

; 142  :     __CLR_OR_THIS_CALL ~numpunct() noexcept override {

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  0000f	e8 00 00 00 00	 call	 _free

; 203  :         _CSTD free(const_cast<_Elem*>(_Falsename));

  00014	ff 76 10	 push	 DWORD PTR [esi+16]
  00017	e8 00 00 00 00	 call	 _free

; 204  :         _CSTD free(const_cast<_Elem*>(_Truename));

  0001c	ff 76 14	 push	 DWORD PTR [esi+20]
  0001f	e8 00 00 00 00	 call	 _free
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH

; 144  :     }

  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002d	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00031	74 0b		 je	 SHORT $LN13@scalar
  00033	6a 18		 push	 24			; 00000018H
  00035	56		 push	 esi
  00036	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003b	83 c4 08	 add	 esp, 8
$LN13@scalar:
  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
??_G?$numpunct@_W@std@@MAEPAXI@Z ENDP			; std::numpunct<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_truename, COMDAT
; _this$ = ecx

; 196  :     virtual string_type __CLR_OR_THIS_CALL do_truename() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 197  :         return string_type{_Truename};

  00004	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0000e	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 196  :     virtual string_type __CLR_OR_THIS_CALL do_truename() const {

  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001b	8d 79 02	 lea	 edi, DWORD PTR [ecx+2]
  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LL24@do_truenam:
  00025	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00028	83 c1 02	 add	 ecx, 2
  0002b	66 85 c0	 test	 ax, ax
  0002e	75 f5		 jne	 SHORT $LL24@do_truenam
  00030	2b cf		 sub	 ecx, edi
  00032	d1 f9		 sar	 ecx, 1

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00034	51		 push	 ecx
  00035	52		 push	 edx
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 197  :         return string_type{_Truename};

  0003d	5f		 pop	 edi
  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi

; 198  :     }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?do_truename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_truename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_falsename, COMDAT
; _this$ = ecx

; 192  :     virtual string_type __CLR_OR_THIS_CALL do_falsename() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 193  :         return string_type{_Falsename};

  00004	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0000e	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 192  :     virtual string_type __CLR_OR_THIS_CALL do_falsename() const {

  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001b	8d 79 02	 lea	 edi, DWORD PTR [ecx+2]
  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LL24@do_falsena:
  00025	66 8b 01	 mov	 ax, WORD PTR [ecx]
  00028	83 c1 02	 add	 ecx, 2
  0002b	66 85 c0	 test	 ax, ax
  0002e	75 f5		 jne	 SHORT $LL24@do_falsena
  00030	2b cf		 sub	 ecx, edi
  00032	d1 f9		 sar	 ecx, 1

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00034	51		 push	 ecx
  00035	52		 push	 edx
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 193  :         return string_type{_Falsename};

  0003d	5f		 pop	 edi
  0003e	8b c6		 mov	 eax, esi
  00040	5e		 pop	 esi

; 194  :     }

  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
?do_falsename@?$numpunct@_W@std@@MBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_falsename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ PROC ; std::numpunct<wchar_t>::do_grouping, COMDAT
; _this$ = ecx

; 188  :     virtual string __CLR_OR_THIS_CALL do_grouping() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 189  :         return string{_Grouping};

  00004	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000b	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0000e	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 188  :     virtual string __CLR_OR_THIS_CALL do_grouping() const {

  00010	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00011	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00014	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0001b	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001e	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
$LL23@do_groupin:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00025	8a 01		 mov	 al, BYTE PTR [ecx]
  00027	41		 inc	 ecx
  00028	84 c0		 test	 al, al
  0002a	75 f9		 jne	 SHORT $LL23@do_groupin
  0002c	2b cf		 sub	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0002e	51		 push	 ecx
  0002f	52		 push	 edx
  00030	8b ce		 mov	 ecx, esi
  00032	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 189  :         return string{_Grouping};

  00037	5f		 pop	 edi
  00038	8b c6		 mov	 eax, esi
  0003a	5e		 pop	 esi

; 190  :     }

  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
?do_grouping@?$numpunct@_W@std@@MBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ ENDP ; std::numpunct<wchar_t>::do_grouping
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ
_TEXT	SEGMENT
?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ PROC	; std::numpunct<wchar_t>::do_thousands_sep, COMDAT
; _this$ = ecx

; 185  :         return _Kseparator;

  00000	66 8b 41 0e	 mov	 ax, WORD PTR [ecx+14]

; 186  :     }

  00004	c3		 ret	 0
?do_thousands_sep@?$numpunct@_W@std@@MBE_WXZ ENDP	; std::numpunct<wchar_t>::do_thousands_sep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ
_TEXT	SEGMENT
?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ PROC	; std::numpunct<wchar_t>::do_decimal_point, COMDAT
; _this$ = ecx

; 181  :         return _Dp;

  00000	66 8b 41 0c	 mov	 ax, WORD PTR [ecx+12]

; 182  :     }

  00004	c3		 ret	 0
?do_decimal_point@?$numpunct@_W@std@@MBE_WXZ ENDP	; std::numpunct<wchar_t>::do_decimal_point
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??1?$numpunct@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$numpunct@_W@std@@MAE@XZ PROC			; std::numpunct<wchar_t>::~numpunct<wchar_t>, COMDAT
; _this$ = ecx

; 142  :     __CLR_OR_THIS_CALL ~numpunct() noexcept override {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  00003	ff 76 08	 push	 DWORD PTR [esi+8]

; 142  :     __CLR_OR_THIS_CALL ~numpunct() noexcept override {

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@

; 202  :         _CSTD free(const_cast<char*>(_Grouping));

  0000c	e8 00 00 00 00	 call	 _free

; 203  :         _CSTD free(const_cast<_Elem*>(_Falsename));

  00011	ff 76 10	 push	 DWORD PTR [esi+16]
  00014	e8 00 00 00 00	 call	 _free

; 204  :         _CSTD free(const_cast<_Elem*>(_Truename));

  00019	ff 76 14	 push	 DWORD PTR [esi+20]
  0001c	e8 00 00 00 00	 call	 _free
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH

; 143  :         _Tidy();
; 144  :     }

  00024	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002a	5e		 pop	 esi
  0002b	c3		 ret	 0
??1?$numpunct@_W@std@@MAE@XZ ENDP			; std::numpunct<wchar_t>::~numpunct<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
_TEXT	SEGMENT
$T2 = -176						; size = 44
$T3 = -132						; size = 52
__Mbst1$4 = -80						; size = 8
__Mbst1$5 = -80						; size = 8
$T6 = -76						; size = 4
$T7 = -72						; size = 4
__Guard$8 = -68						; size = 4
__Wc$9 = -68						; size = 2
__Wc$10 = -68						; size = 2
__Ploc$GSCopy$1$ = -68					; size = 4
__Byte$ = -64						; size = 1
__Byte$ = -64						; size = 1
__Cvt$11 = -60						; size = 44
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Ppf$ = 8						; size = 4
__Ploc$ = 12						; size = 4
?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z PROC ; std::numpunct<wchar_t>::_Getcat, COMDAT

; 133  :     static size_t _Getcat(const locale::facet** _Ppf = nullptr, const locale* _Ploc = nullptr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec a4 00 00
	00		 sub	 esp, 164		; 000000a4H
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	57		 push	 edi
  00023	50		 push	 eax
  00024	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00027	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002d	8b 7d 08	 mov	 edi, DWORD PTR __Ppf$[ebp]
  00030	8b 45 0c	 mov	 eax, DWORD PTR __Ploc$[ebp]
  00033	89 45 bc	 mov	 DWORD PTR __Ploc$GSCopy$1$[ebp], eax
  00036	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0

; 134  :         // return locale category mask and construct standard facet
; 135  :         if (_Ppf && !*_Ppf) {

  0003d	85 ff		 test	 edi, edi
  0003f	0f 84 73 01 00
	00		 je	 $LN9@Getcat
  00045	83 3f 00	 cmp	 DWORD PTR [edi], 0
  00048	0f 85 6a 01 00
	00		 jne	 $LN9@Getcat

; 136  :             *_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->_C_str()), 0, true);

  0004e	6a 18		 push	 24			; 00000018H
  00050	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00055	8b f0		 mov	 esi, eax
  00057	83 c4 04	 add	 esp, 4
  0005a	89 75 b4	 mov	 DWORD PTR $T6[ebp], esi
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00064	85 f6		 test	 esi, esi
  00066	0f 84 37 01 00
	00		 je	 $LN4@Getcat
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  0006c	8b 4d bc	 mov	 ecx, DWORD PTR __Ploc$GSCopy$1$[ebp]
  0006f	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00072	85 c9		 test	 ecx, ecx
  00074	74 0c		 je	 SHORT $LN12@Getcat
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  00076	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00079	85 c0		 test	 eax, eax
  0007b	75 0a		 jne	 SHORT $LN13@Getcat
  0007d	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00080	eb 05		 jmp	 SHORT $LN13@Getcat
$LN12@Getcat:
  00082	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN13@Getcat:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 136  :             *_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->_C_str()), 0, true);

  00087	50		 push	 eax
  00088	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0008e	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00093	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR $T7[ebp], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 143  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0009a	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 129  :     numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false) : locale::facet(_Refs) {

  000a1	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  000a8	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$numpunct@_W@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 285  :         return localeconv();

  000ae	e8 00 00 00 00	 call	 _localeconv

; 281  :         return ::_Getcvt();

  000b3	8d 85 50 ff ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 __Getcvt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 160  :         _Tidy_guard<numpunct> _Guard{this};

  000bf	89 75 bc	 mov	 DWORD PTR __Guard$8[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 281  :         return ::_Getcvt();

  000c2	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000c5	0f 11 45 c4	 movups	 XMMWORD PTR __Cvt$11[ebp], xmm0
  000c9	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  000cd	0f 11 45 d4	 movups	 XMMWORD PTR __Cvt$11[ebp+16], xmm0
  000d1	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  000d6	66 0f d6 45 e4	 movq	 QWORD PTR __Cvt$11[ebp+32], xmm0
  000db	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  000de	89 45 ec	 mov	 DWORD PTR __Cvt$11[ebp+40], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 156  :         _Grouping  = nullptr;

  000e1	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0

; 157  :         _Falsename = nullptr;

  000e8	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 158  :         _Truename  = nullptr;

  000ef	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  000f6	6a 01		 push	 1
  000f8	6a 01		 push	 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 160  :         _Tidy_guard<numpunct> _Guard{this};

  000fa	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 530  :     _Elem* _Ptrdest = static_cast<_Elem*>(_calloc_dbg(_Count, sizeof(_Elem), _CRT_BLOCK, __FILE__, __LINE__));

  000fe	e8 00 00 00 00	 call	 _calloc
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH

; 531  : 
; 532  :     if (!_Ptrdest) {

  00106	85 c0		 test	 eax, eax
  00108	0f 84 ca 00 00
	00		 je	 $LN69@Getcat

; 534  :     }
; 535  : 
; 536  :     for (_Elem* _Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr) {
; 537  :         *_Ptrnext = static_cast<_Elem>(static_cast<unsigned char>(*_Ptr));

  0010e	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 161  :         _Grouping      = _Maklocstr(_Isdef ? "" : _Ptr->grouping, static_cast<char*>(nullptr), _Cvt);

  00111	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 162  :         _Falsename     = _Maklocstr(_Lobj._Getfalse(), static_cast<_Elem*>(nullptr), _Cvt);

  00114	8d 45 c4	 lea	 eax, DWORD PTR __Cvt$11[ebp]
  00117	50		 push	 eax
  00118	6a 00		 push	 0
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_05LAPONLG@false@
  0011f	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00124	89 46 10	 mov	 DWORD PTR [esi+16], eax

; 163  :         _Truename      = _Maklocstr(_Lobj._Gettrue(), static_cast<_Elem*>(nullptr), _Cvt);

  00127	8d 45 c4	 lea	 eax, DWORD PTR __Cvt$11[ebp]
  0012a	50		 push	 eax
  0012b	6a 00		 push	 0
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_04LOAJBDKD@true@
  00132	e8 00 00 00 00	 call	 ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ; std::_Maklocstr<wchar_t>
  00137	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0013a	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 510  :     _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);

  0013d	8d 45 c4	 lea	 eax, DWORD PTR __Cvt$11[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 167  :             _Dp         = _Maklocchr('.', static_cast<_Elem*>(nullptr), _Cvt);

  00140	c6 45 c0 2e	 mov	 BYTE PTR __Byte$[ebp], 46 ; 0000002eH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 510  :     _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);

  00144	50		 push	 eax
  00145	8d 45 b0	 lea	 eax, DWORD PTR __Mbst1$4[ebp]
  00148	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR __Wc$10[ebp], 0
  0014f	50		 push	 eax
  00150	6a 01		 push	 1
  00152	8d 45 c0	 lea	 eax, DWORD PTR __Byte$[ebp]
  00155	66 0f 13 45 b0	 movlpd	 QWORD PTR __Mbst1$4[ebp], xmm0
  0015a	50		 push	 eax
  0015b	8d 45 bc	 lea	 eax, DWORD PTR __Wc$10[ebp]
  0015e	50		 push	 eax
  0015f	e8 00 00 00 00	 call	 __Mbrtowc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 167  :             _Dp         = _Maklocchr('.', static_cast<_Elem*>(nullptr), _Cvt);

  00164	0f b7 45 bc	 movzx	 eax, WORD PTR __Wc$10[ebp]
  00168	0f 57 c0	 xorps	 xmm0, xmm0
  0016b	66 89 46 0c	 mov	 WORD PTR [esi+12], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 510  :     _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);

  0016f	8d 45 c4	 lea	 eax, DWORD PTR __Cvt$11[ebp]
  00172	50		 push	 eax
  00173	8d 45 b0	 lea	 eax, DWORD PTR __Mbst1$5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 168  :             _Kseparator = _Maklocchr(',', static_cast<_Elem*>(nullptr), _Cvt);

  00176	c6 45 c0 2c	 mov	 BYTE PTR __Byte$[ebp], 44 ; 0000002cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 510  :     _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);

  0017a	50		 push	 eax
  0017b	6a 01		 push	 1
  0017d	8d 45 c0	 lea	 eax, DWORD PTR __Byte$[ebp]
  00180	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR __Wc$9[ebp], 0
  00187	50		 push	 eax
  00188	8d 45 bc	 lea	 eax, DWORD PTR __Wc$9[ebp]
  0018b	66 0f 13 45 b0	 movlpd	 QWORD PTR __Mbst1$5[ebp], xmm0
  00190	50		 push	 eax
  00191	e8 00 00 00 00	 call	 __Mbrtowc
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 168  :             _Kseparator = _Maklocchr(',', static_cast<_Elem*>(nullptr), _Cvt);

  00196	0f b7 45 bc	 movzx	 eax, WORD PTR __Wc$9[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 510  :     _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);

  0019a	83 c4 40	 add	 esp, 64			; 00000040H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 168  :             _Kseparator = _Maklocchr(',', static_cast<_Elem*>(nullptr), _Cvt);

  0019d	66 89 46 0e	 mov	 WORD PTR [esi+14], ax

; 136  :             *_Ppf = new numpunct<_Elem>(_Locinfo(_Ploc->_C_str()), 0, true);

  001a1	eb 02		 jmp	 SHORT $LN5@Getcat
$LN4@Getcat:
  001a3	33 f6		 xor	 esi, esi
$LN5@Getcat:
  001a5	f6 45 b8 01	 test	 BYTE PTR $T7[ebp], 1
  001a9	89 37		 mov	 DWORD PTR [edi], esi
  001ab	74 0b		 je	 SHORT $LN9@Getcat
  001ad	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001b3	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN9@Getcat:

; 137  :         }
; 138  :         return _X_NUMERIC;

  001b8	b8 04 00 00 00	 mov	 eax, 4

; 139  :     }

  001bd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001c7	59		 pop	 ecx
  001c8	5f		 pop	 edi
  001c9	5e		 pop	 esi
  001ca	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001cd	33 cd		 xor	 ecx, ebp
  001cf	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d4	8b e5		 mov	 esp, ebp
  001d6	5d		 pop	 ebp
  001d7	c3		 ret	 0
$LN69@Getcat:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 533  :         _Xbad_alloc();

  001d8	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN67@Getcat:
  001dd	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000	6a 18		 push	 24			; 00000018H
  00002	8b 45 b4	 mov	 eax, DWORD PTR $T6[ebp]
  00005	50		 push	 eax
  00006	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0000b	83 c4 08	 add	 esp, 8
  0000e	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000f	8b 45 b8	 mov	 eax, DWORD PTR $T7[ebp]
  00012	83 e0 01	 and	 eax, 1
  00015	0f 84 0f 00 00
	00		 je	 $LN8@Getcat
  0001b	83 65 b8 fe	 and	 DWORD PTR $T7[ebp], -2	; fffffffeH
  0001f	8d 8d 7c ff ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00025	e9 00 00 00 00	 jmp	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN8@Getcat:
  0002a	c3		 ret	 0
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  0002b	8b 4d b4	 mov	 ecx, DWORD PTR $T6[ebp]
  0002e	e9 00 00 00 00	 jmp	 ??1facet@locale@std@@MAE@XZ ; std::locale::facet::~facet
__unwindfunclet$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$4:
  00033	8d 4d bc	 lea	 ecx, DWORD PTR __Guard$8[ebp]
  00036	e9 00 00 00 00	 jmp	 ??1?$_Tidy_guard@V?$numpunct@_W@std@@@std@@QAE@XZ ; std::_Tidy_guard<std::numpunct<wchar_t> >::~_Tidy_guard<std::numpunct<wchar_t> >
  0003b	cc		 int	 3
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
__ehhandler$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  00040	90		 npad	 1
  00041	90		 npad	 1
  00042	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00046	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00049	8b 8a 50 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-176]
  0004f	33 c8		 xor	 ecx, eax
  00051	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00056	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00059	33 c8		 xor	 ecx, eax
  0005b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00060	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  00065	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ENDP ; std::numpunct<wchar_t>::_Getcat
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
__Lock$2 = -24						; size = 4
__Psave$3 = -20						; size = 4
__Lock$4 = -16						; size = 4
$T5 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$6 = 8					; size = 4
??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::numpunct<wchar_t> >, COMDAT

; 435  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 436  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00028	6a 00		 push	 0
  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  0002d	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00032	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id

; 437  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00038	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
  0003e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00045	89 5d ec	 mov	 DWORD PTR __Psave$3[ebp], ebx

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00048	85 ff		 test	 edi, edi
  0004a	75 2f		 jne	 SHORT $LN11@use_facet

; 92   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  0004c	57		 push	 edi
  0004d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00050	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 93   :                 if (_Id == 0) {

  00055	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, edi ; std::numpunct<wchar_t>::id
  0005b	75 10		 jne	 SHORT $LN12@use_facet

; 94   :                     _Id = static_cast<size_t>(++_Id_cnt);

  0005d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00062	40		 inc	 eax
  00063	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A, eax ; std::numpunct<wchar_t>::id
$LN12@use_facet:

; 95   :                 }
; 96   :                 _END_LOCK()

  0006d	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00070	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00075	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$numpunct@_W@std@@2V0locale@2@A ; std::numpunct<wchar_t>::id
$LN11@use_facet:

; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0007b	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  0007e	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00085	89 4d f0	 mov	 DWORD PTR $T5[ebp], ecx
  00088	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008b	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  0008e	73 12		 jae	 SHORT $LN19@use_facet
  00090	0f ae e8	 lfence
  00093	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00096	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00099	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  0009c	85 f6		 test	 esi, esi
  0009e	75 63		 jne	 SHORT $LN39@use_facet
  000a0	eb 05		 jmp	 SHORT $LN42@use_facet
$LN19@use_facet:

; 97   :             }
; 98   :             return _Id;
; 99   :         }
; 100  : 
; 101  : #ifdef _CRTBLD // TRANSITION, ABI: preserved for binary compatibility
; 102  :         __CLR_OR_THIS_CALL operator size_t() {
; 103  :             return _Get_index();
; 104  :         }
; 105  : #endif // defined(_CRTBLD)
; 106  : 
; 107  :     private:
; 108  :         size_t _Id = 0; // the identifier stamp
; 109  : 
; 110  :         __PURE_APPDOMAIN_GLOBAL static int _Id_cnt;
; 111  :     };
; 112  : 
; 113  :     struct _Facet_guard;
; 114  : 
; 115  :     class _CRTIMP2_PURE_IMPORT facet : public _Facet_base, public _Crt_new_delete {
; 116  :         // base class for all locale facets, performs reference counting
; 117  :     private:
; 118  :         friend _Facet_guard;
; 119  : 
; 120  :     public:
; 121  :         static size_t __CLRCALL_OR_CDECL _Getcat(const facet** = nullptr, const locale* = nullptr) {
; 122  :             // get category value, or -1 if no corresponding C category
; 123  :             return static_cast<size_t>(-1);
; 124  :         }
; 125  : 
; 126  :         void __CLR_OR_THIS_CALL _Incref() noexcept override { // increment use count
; 127  :             _MT_INCR(_Myrefs);
; 128  :         }
; 129  : 
; 130  :         _Facet_base* __CLR_OR_THIS_CALL _Decref() noexcept override { // decrement use count
; 131  :             if (_MT_DECR(_Myrefs) == 0) {
; 132  :                 return this;
; 133  :             }
; 134  : 
; 135  :             return nullptr;
; 136  :         }
; 137  : 
; 138  :     private:
; 139  :         _Atomic_counter_t _Myrefs; // the reference count
; 140  : 
; 141  :     protected:
; 142  :         explicit __CLR_OR_THIS_CALL facet(size_t _Initrefs = 0) noexcept // strengthened
; 143  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization
; 144  :         {}
; 145  : 
; 146  :         __CLR_OR_THIS_CALL ~facet() noexcept override {}
; 147  : 
; 148  :     public:
; 149  :         __CLR_OR_THIS_CALL facet(const facet&)            = delete;
; 150  :         facet& __CLR_OR_THIS_CALL operator=(const facet&) = delete;
; 151  :     };
; 152  : 
; 153  :     struct _NODISCARD _Facet_guard {
; 154  :         facet* _Target;
; 155  :         ~_Facet_guard() {
; 156  :             if (_Target) {
; 157  :                 delete _Target->_Decref();
; 158  :             }
; 159  :         }
; 160  :     };
; 161  : 
; 162  :     class _CRTIMP2_PURE_IMPORT _Locimp : public facet { // reference-counted actual implementation of a locale
; 163  :     protected:
; 164  :         __CLR_OR_THIS_CALL ~_Locimp() noexcept {
; 165  :             _Locimp_dtor(this);
; 166  :         }
; 167  : 
; 168  :     private:
; 169  :         static _Locimp* __CLRCALL_PURE_OR_CDECL _New_Locimp(bool _Transparent = false);
; 170  :         static _Locimp* __CLRCALL_PURE_OR_CDECL _New_Locimp(const _Locimp& _Right);
; 171  : 
; 172  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_dtor(_Locimp*);
; 173  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_Addfac(_Locimp*, facet*, size_t); // add a facet
; 174  :         static void __CLRCALL_PURE_OR_CDECL _Locimp_ctor(_Locimp*, const _Locimp&);
; 175  : 
; 176  :         friend locale;
; 177  : 
; 178  :         __CLR_OR_THIS_CALL _Locimp(bool _Transparent)
; 179  :             : locale::facet(1), _Facetvec(nullptr), _Facetcount(0), _Catmask(none), _Xparent(_Transparent), _Name("*") {
; 180  :         }
; 181  : 
; 182  :         __CLR_OR_THIS_CALL _Locimp(const _Locimp& _Right)
; 183  :             : locale::facet(1), _Facetvec(nullptr), _Facetcount(_Right._Facetcount), _Catmask(_Right._Catmask),
; 184  :               _Xparent(_Right._Xparent), _Name(_Right._Name.c_str()) {
; 185  :             _Locimp_ctor(this, _Right);
; 186  :         }
; 187  : 
; 188  :         void __CLR_OR_THIS_CALL _Addfac(facet* _Pfacet, size_t _Id) { // add a facet
; 189  :             _Locimp_Addfac(this, _Pfacet, _Id);
; 190  :         }
; 191  : 
; 192  :         static _Locimp* __CLRCALL_OR_CDECL _Makeloc(
; 193  :             const _Locinfo&, category, _Locimp*, const locale*); // make essential facets
; 194  : 
; 195  :         static void __CLRCALL_OR_CDECL _Makewloc(
; 196  :             const _Locinfo&, category, _Locimp*, const locale*); // make wchar_t facets
; 197  : 
; 198  : #if defined(_NATIVE_WCHAR_T_DEFINED) && !_ENFORCE_FACET_SPECIALIZATIONS
; 199  :         static void __CLRCALL_OR_CDECL _Makeushloc(
; 200  :             const _Locinfo&, category, _Locimp*, const locale*); // make ushort facets
; 201  : #endif // defined(_NATIVE_WCHAR_T_DEFINED) && !_ENFORCE_FACET_SPECIALIZATIONS
; 202  : 
; 203  :         static void __CLRCALL_OR_CDECL _Makexloc(
; 204  :             const _Locinfo&, category, _Locimp*, const locale*); // make remaining facets
; 205  : 
; 206  :         facet** _Facetvec; // pointer to vector of facets
; 207  :         size_t _Facetcount; // size of vector of facets
; 208  :         category _Catmask; // mask describing implemented categories
; 209  :         bool _Xparent; // true if locale is transparent
; 210  :         _Yarn<char> _Name; // locale name, or "*" if not known
; 211  : 
; 212  :         __PURE_APPDOMAIN_GLOBAL static _Locimp* _Clocptr;
; 213  : 
; 214  :     public:
; 215  :         _Locimp& __CLR_OR_THIS_CALL operator=(const _Locimp&) = delete;
; 216  :     };
; 217  : 
; 218  :     template <class _Elem, class _Traits, class _Alloc>
; 219  :     bool operator()(
; 220  :         const basic_string<_Elem, _Traits, _Alloc>& _Left, const basic_string<_Elem, _Traits, _Alloc>& _Right) const {
; 221  :         // compare _Left and _Right strings using collate facet in locale
; 222  :         const auto& _Coll_fac = _STD use_facet<_STD collate<_Elem>>(*this);
; 223  : 
; 224  :         const _Elem* const _Left_data  = _Left.data();
; 225  :         const _Elem* const _Right_data = _Right.data();
; 226  :         return _Coll_fac.compare(_Left_data, _Left_data + _Left.size(), _Right_data, _Right_data + _Right.size()) < 0;
; 227  :     }
; 228  : 
; 229  :     template <class _Facet>
; 230  :     locale combine(const locale& _Loc) const { // combine two locales
; 231  :         _Facet* _Facptr;
; 232  : 
; 233  :         _TRY_BEGIN
; 234  :         _Facptr = const_cast<_Facet*>(_STD addressof(_STD use_facet<_Facet>(_Loc)));
; 235  :         _CATCH_ALL
; 236  :         _Xruntime_error("locale::combine facet missing");
; 237  :         _CATCH_END
; 238  : 
; 239  :         _Locimp* _Newimp = _Locimp::_New_Locimp(*_Ptr);
; 240  :         _Newimp->_Addfac(_Facptr, _Facet::id._Get_index());
; 241  :         _Newimp->_Catmask = none;
; 242  :         _Newimp->_Name    = "*";
; 243  :         return locale{_Secret_locale_construct_tag{}, _Newimp};
; 244  :     }
; 245  : 
; 246  :     template <class _Facet>
; 247  :     locale(const locale& _Loc, const _Facet* _Facptr) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 248  :         if (_Facptr) { // replace facet
; 249  :             _Ptr->_Addfac(const_cast<_Facet*>(_Facptr), _Facet::id._Get_index());
; 250  :             _Ptr->_Catmask = none;
; 251  :             _Ptr->_Name    = "*";
; 252  :         }
; 253  :     }
; 254  : 
; 255  : #pragma warning(push)
; 256  : #pragma warning(disable : 26495) // Variable 'std::locale::_Ptr' is uninitialized.
; 257  :                                  // Always initialize a member variable (type.6).
; 258  : 
; 259  :     // We must not explicitly initialize _Ptr here; we rely on it maintaining the value
; 260  :     // previously created in its storage. To be precise:
; 261  :     // In locale0.cpp, locale::_Init() uses True Placement New at classic_locale's address,
; 262  :     // and classic_locale is constructed from the _Noinit enumerator of type _Uninitialized.
; 263  :     // The sequencing is highly unusual; the True Placement New happens before the _Uninitialized construction,
; 264  :     // so while _Ptr here formally has indeterminate value, we expect it to actually keep the previous value.
; 265  :     locale(_Uninitialized) {} // defer construction
; 266  : #pragma warning(pop)
; 267  : 
; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {
; 269  :         _Ptr->_Incref();
; 270  :     }
; 271  : 
; 272  :     locale() noexcept : _Ptr(_Init(true)) {}
; 273  : 
; 274  : #if !defined(MRTDLL) || !defined(_CRTBLD)
; 275  :     locale(const locale& _Loc, const locale& _Other, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 276  :         // construct a locale by copying named facets
; 277  :         if (_Cat != none) { // worth adding, do it
; 278  :             _STL_ASSERT((_Cat & all) == _Cat, "the bitmask value specifying category must be valid");
; 279  :             _Facet_guard _Guard{_Ptr};
; 280  :             _BEGIN_LOCINFO(_Lobj)
; 281  :             _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, &_Other);
; 282  :             _Lobj._Addcats(_Loc._Ptr->_Catmask, _Loc.name().c_str());
; 283  :             _Lobj._Addcats(_Other._Ptr->_Catmask, _Other.name().c_str());
; 284  :             _Ptr->_Catmask = _Loc._Ptr->_Catmask | _Other._Ptr->_Catmask;
; 285  :             _Ptr->_Name    = _Lobj._Getname();
; 286  :             _END_LOCINFO()
; 287  :             _Guard._Target = nullptr;
; 288  :         }
; 289  :     }
; 290  : 
; 291  : private:
; 292  :     void _Construct(const string& _Str, category _Cat) {
; 293  :         _STL_ASSERT((_Cat & all) == _Cat, "the bitmask value specifying category must be valid");
; 294  :         // construct a locale with named facets
; 295  :         bool _Bad = false;
; 296  :         _Init();
; 297  :         if (_Cat != none) { // worth adding, do it
; 298  :             _Facet_guard _Guard{_Ptr};
; 299  :             _BEGIN_LOCINFO(_Lobj(_Cat, _Str.c_str()))
; 300  :             if (_Badname(_Lobj)) {
; 301  :                 _Bad = true;
; 302  :             } else { // name okay, build the locale
; 303  :                 _Locimp::_Makeloc(_Lobj, _Cat, _Ptr, nullptr);
; 304  :                 _Ptr->_Catmask = _Cat;
; 305  :                 _Ptr->_Name    = _Str.c_str();
; 306  :             }
; 307  :             _END_LOCINFO()
; 308  :             _Guard._Target = nullptr;
; 309  :         }
; 310  : 
; 311  :         if (_Bad) { // Don't throw within _BEGIN_LOCINFO if we can avoid it
; 312  :             delete _Ptr->_Decref();
; 313  :             _Xruntime_error("bad locale name");
; 314  :         }
; 315  :     }
; 316  : 
; 317  : public:
; 318  :     explicit locale(const char* _Locname, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) {
; 319  :         // construct a locale with named facets
; 320  :         // _Locname might have been returned from setlocale().
; 321  :         // Therefore, _Construct() takes const string&.
; 322  :         if (_Locname) {
; 323  :             _Construct(_Locname, _Cat);
; 324  :             return;
; 325  :         }
; 326  : 
; 327  :         _Xruntime_error("bad locale name");
; 328  :     }
; 329  : 
; 330  :     locale(const locale& _Loc, const char* _Locname, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 331  :         // construct a locale by copying, replacing named facets
; 332  :         // _Locname might have been returned from setlocale().
; 333  :         // Therefore, _Construct() takes const string&.
; 334  :         if (_Locname) {
; 335  :             _Construct(_Locname, _Cat);
; 336  :             return;
; 337  :         }
; 338  : 
; 339  :         _Xruntime_error("bad locale name");
; 340  :     }
; 341  : 
; 342  :     explicit locale(const string& _Str, category _Cat = all) : _Ptr(_Locimp::_New_Locimp()) {
; 343  :         // construct a locale with named facets
; 344  :         _Construct(_Str, _Cat);
; 345  :     }
; 346  : 
; 347  :     locale(const locale& _Loc, const string& _Str, category _Cat) : _Ptr(_Locimp::_New_Locimp(*_Loc._Ptr)) {
; 348  :         // construct a locale by copying, replacing named facets
; 349  :         _Construct(_Str, _Cat);
; 350  :     }
; 351  : #endif // !MRTDLL || !_CRTBLD
; 352  : 
; 353  :     ~locale() noexcept {
; 354  :         if (_Ptr) {
; 355  :             delete _Ptr->_Decref();
; 356  :         }
; 357  :     }
; 358  : 
; 359  :     const locale& operator=(const locale& _Right) noexcept {
; 360  :         if (_Ptr != _Right._Ptr) { // different implementation, point at new one
; 361  :             delete _Ptr->_Decref();
; 362  :             _Ptr = _Right._Ptr;
; 363  :             _Ptr->_Incref();
; 364  :         }
; 365  :         return *this;
; 366  :     }
; 367  : 
; 368  :     string name() const {
; 369  :         return _Ptr ? _Ptr->_Name.c_str() : string{};
; 370  :     }
; 371  : 
; 372  :     _Ret_z_ const char* _C_str() const noexcept {
; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";
; 374  :     }
; 375  : 
; 376  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000a2	33 f6		 xor	 esi, esi
  000a4	89 4d f0	 mov	 DWORD PTR $T5[ebp], ecx
$LN42@use_facet:

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  000a7	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000ab	74 16		 je	 SHORT $LN14@use_facet

; 379  :             return _Facptr; // found facet or not transparent
; 380  :         }
; 381  : 
; 382  :         // look in current locale
; 383  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000ad	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 384  :         if (_Id < _Ptr0->_Facetcount) {

  000b2	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000b5	73 10		 jae	 SHORT $LN43@use_facet

; 385  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000b7	0f ae e8	 lfence
  000ba	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000bd	8b 75 f0	 mov	 esi, DWORD PTR $T5[ebp]
  000c0	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 438  : 
; 439  :     const size_t _Id         = _Facet::id._Get_index();
; 440  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 441  : 
; 442  :     if (!_Pf) {

  000c3	85 f6		 test	 esi, esi
  000c5	75 3c		 jne	 SHORT $LN39@use_facet
$LN43@use_facet:

; 443  :         if (_Psave) {

  000c7	85 db		 test	 ebx, ebx
  000c9	74 04		 je	 SHORT $LN3@use_facet

; 444  :             _Pf = _Psave; // lazy facet already allocated

  000cb	8b f3		 mov	 esi, ebx
  000cd	eb 34		 jmp	 SHORT $LN39@use_facet
$LN3@use_facet:

; 445  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000cf	ff 75 08	 push	 DWORD PTR __Loc$[ebp]
  000d2	8d 45 ec	 lea	 eax, DWORD PTR __Psave$3[ebp]
  000d5	50		 push	 eax
  000d6	e8 00 00 00 00	 call	 ?_Getcat@?$numpunct@_W@std@@SAIPAPBVfacet@locale@2@PBV42@@Z ; std::numpunct<wchar_t>::_Getcat
  000db	83 c4 08	 add	 esp, 8
  000de	83 f8 ff	 cmp	 eax, -1
  000e1	74 3c		 je	 SHORT $LN48@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  000e3	8b 75 ec	 mov	 esi, DWORD PTR __Psave$3[ebp]
  000e6	89 75 08	 mov	 DWORD PTR __Psave_guard$6[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 458  :             _Facet_Register(_Pfmod);

  000e9	56		 push	 esi
  000ea	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ee	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 459  : #endif // ^^^ !defined(_M_CEE) ^^^
; 460  : 
; 461  :             _Pfmod->_Incref();

  000f3	8b 16		 mov	 edx, DWORD PTR [esi]
  000f5	83 c4 04	 add	 esp, 4
  000f8	8b ce		 mov	 ecx, esi
  000fa	ff 52 04	 call	 DWORD PTR [edx+4]

; 462  :             _Facetptr<_Facet>::_Psave = _Psave;

  000fd	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$numpunct@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::numpunct<wchar_t> >::_Psave
$LN39@use_facet:

; 463  :             _Pf                       = _Psave;
; 464  : 
; 465  :             (void) _Psave_guard.release();
; 466  :         }
; 467  :     }
; 468  : 
; 469  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00103	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00106	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0010b	8b c6		 mov	 eax, esi

; 470  :     _END_LOCK()
; 471  : } // end of use_facet body

  0010d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00110	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00117	59		 pop	 ecx
  00118	5f		 pop	 edi
  00119	5e		 pop	 esi
  0011a	5b		 pop	 ebx
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
$LN48@use_facet:

; 446  : #if _HAS_EXCEPTIONS
; 447  :             _Throw_bad_cast(); // lazy disallowed

  0011f	e8 00 00 00 00	 call	 ?_Throw_bad_cast@std@@YAXXZ ; std::_Throw_bad_cast
$LN45@use_facet:
  00124	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z$1:
  00008	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a e4	 mov	 ecx, DWORD PTR [edx-28]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::numpunct<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??$_Float_put_desired_precision@N@std@@YAH_JH@Z
_TEXT	SEGMENT
__Precision$ = 8					; size = 8
__Float_flags$ = 16					; size = 4
??$_Float_put_desired_precision@N@std@@YAH_JH@Z PROC	; std::_Float_put_desired_precision<double>, COMDAT

; 1178 : int _Float_put_desired_precision(const streamsize _Precision, const ios_base::fmtflags _Float_flags) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Float_flags$[ebp]

; 1179 :     // return the effective precision determined by N4950 [facet.num.put.virtuals]/2.1 and printf's rules
; 1180 :     const bool _Is_hex = _Float_flags == (ios_base::fixed | ios_base::scientific);

  00006	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H

; 1181 :     if (_Is_hex) {

  0000c	75 07		 jne	 SHORT $LN2@Float_put_

; 1182 :         // return the number of hexits needed (after the radix point) to represent the floating-point value exactly
; 1183 :         if constexpr (is_same_v<_Ty, double>) {
; 1184 :             return ((DBL_MANT_DIG - 1) + 3) / 4;

  0000e	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH

; 1204 :     }
; 1205 : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
$LN2@Float_put_:

; 1185 :         } else if constexpr (is_same_v<_Ty, long double>) {
; 1186 :             return ((LDBL_MANT_DIG - 1) + 3) / 4;
; 1187 :         } else {
; 1188 :             _STL_INTERNAL_STATIC_ASSERT(false); // unexpected type; shouldn't be float
; 1189 :         }
; 1190 :     }
; 1191 : 
; 1192 :     if (_Precision > 0) {

  00015	8b 55 0c	 mov	 edx, DWORD PTR __Precision$[ebp+4]
  00018	8b 45 08	 mov	 eax, DWORD PTR __Precision$[ebp]
  0001b	85 d2		 test	 edx, edx
  0001d	7c 06		 jl	 SHORT $LN3@Float_put_
  0001f	7f 14		 jg	 SHORT $LN6@Float_put_
  00021	85 c0		 test	 eax, eax
  00023	75 10		 jne	 SHORT $LN6@Float_put_
$LN3@Float_put_:

; 1193 :         return static_cast<int>(_Precision);
; 1194 :     } else if (_Precision == 0) {

  00025	0b c2		 or	 eax, edx
  00027	75 07		 jne	 SHORT $LN5@Float_put_

; 1195 :         const bool _Is_default_float = _Float_flags == 0;

  00029	85 c9		 test	 ecx, ecx
  0002b	0f 94 c0	 sete	 al

; 1204 :     }
; 1205 : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN5@Float_put_:

; 1196 :         if (_Is_default_float) {
; 1197 :             return 1;
; 1198 :         } else {
; 1199 :             return 0;
; 1200 :         }
; 1201 :     } else {
; 1202 :         constexpr int _Default_precision = 6;
; 1203 :         return _Default_precision;

  00030	b8 06 00 00 00	 mov	 eax, 6
$LN6@Float_put_:

; 1204 :     }
; 1205 : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??$_Float_put_desired_precision@N@std@@YAH_JH@Z ENDP	; std::_Float_put_desired_precision<double>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -116				; size = 4
__Su$1$ = -112						; size = 4
__Eoff$1$ = -108					; size = 4
__Old_capacity$1$ = -108				; size = 4
__Pg$1$ = -104						; size = 4
$T2 = -104						; size = 4
__New_ptr$1$ = -100					; size = 4
__Buf$GSCopy$1$ = -100					; size = 4
__Iosbase$GSCopy$1$ = -96				; size = 4
__Prefix$1$ = -92					; size = 4
__Dp$ = -88						; size = 2
$T3 = -84						; size = 8
$T4 = -84						; size = 8
$T5 = -84						; size = 8
$T6 = -84						; size = 8
$T7 = -84						; size = 8
$T8 = -84						; size = 8
$T9 = -84						; size = 8
$T10 = -84						; size = 8
tv1253 = -80						; size = 4
__Kseparator$1$ = -76					; size = 4
__Ctype_fac$1$ = -76					; size = 4
_this$1$ = -72						; size = 4
tv1259 = -68						; size = 4
__Punct_fac$1$ = -68					; size = 4
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Buf$ = 28						; size = 4
__Count$ = 32						; size = 4
__Is_finite_val$ = 36					; size = 1
??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput_v3<0>, COMDAT
; _this$ = ecx

; 1470 :         bool _Is_finite_val) const { // put formatted floating-point to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 68	 sub	 esp, 104		; 00000068H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	89 4d b8	 mov	 DWORD PTR _this$1$[ebp], ecx
  0002e	8b 75 20	 mov	 esi, DWORD PTR __Count$[ebp]
  00031	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00034	8b 4d 14	 mov	 ecx, DWORD PTR __Iosbase$[ebp]
  00037	8b 5d 1c	 mov	 ebx, DWORD PTR __Buf$[ebp]
  0003a	89 45 8c	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003d	89 4d a0	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], ecx
  00040	89 5d 9c	 mov	 DWORD PTR __Buf$GSCopy$1$[ebp], ebx

; 1471 :         auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  00043	85 f6		 test	 esi, esi
  00045	74 11		 je	 SHORT $LN20@Fput_v3
  00047	8a 03		 mov	 al, BYTE PTR [ebx]
  00049	3c 2b		 cmp	 al, 43			; 0000002bH
  0004b	74 04		 je	 SHORT $LN19@Fput_v3
  0004d	3c 2d		 cmp	 al, 45			; 0000002dH
  0004f	75 07		 jne	 SHORT $LN20@Fput_v3
$LN19@Fput_v3:
  00051	bf 01 00 00 00	 mov	 edi, 1
  00056	eb 02		 jmp	 SHORT $LN285@Fput_v3
$LN20@Fput_v3:
  00058	33 ff		 xor	 edi, edi
$LN285@Fput_v3:

; 1472 :         const char* _Exps;
; 1473 :         if ((_Iosbase.flags() & ios_base::floatfield) != (ios_base::scientific | ios_base::fixed)) {

  0005a	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0005d	25 00 30 00 00	 and	 eax, 12288		; 00003000H
  00062	89 7d a4	 mov	 DWORD PTR __Prefix$1$[ebp], edi
  00065	3d 00 30 00 00	 cmp	 eax, 12288		; 00003000H
  0006a	74 07		 je	 SHORT $LN4@Fput_v3

; 1474 :             _Exps = "eE";

  0006c	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02MDKMJEGG@eE@

; 1475 :         } else { // correct for hexadecimal floating-point

  00071	eb 25		 jmp	 SHORT $LN6@Fput_v3
$LN4@Fput_v3:

; 1476 :             _Exps = "pP";
; 1477 :             if (_Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1478 :                 && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X')) {

  00073	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  00076	ba 00 00 00 00	 mov	 edx, OFFSET ??_C@_02OOPEBDOJ@pP@
  0007b	3b c6		 cmp	 eax, esi
  0007d	77 19		 ja	 SHORT $LN6@Fput_v3
  0007f	80 3c 3b 30	 cmp	 BYTE PTR [ebx+edi], 48	; 00000030H
  00083	75 13		 jne	 SHORT $LN6@Fput_v3
  00085	8a 4c 3b 01	 mov	 cl, BYTE PTR [ebx+edi+1]
  00089	80 f9 78	 cmp	 cl, 120			; 00000078H
  0008c	74 05		 je	 SHORT $LN7@Fput_v3
  0008e	80 f9 58	 cmp	 cl, 88			; 00000058H
  00091	75 05		 jne	 SHORT $LN6@Fput_v3
$LN7@Fput_v3:

; 1479 :                 _Prefix += 2;

  00093	8b f8		 mov	 edi, eax
  00095	89 7d a4	 mov	 DWORD PTR __Prefix$1$[ebp], edi
$LN6@Fput_v3:

; 1480 :             }
; 1481 :         }
; 1482 :         const size_t _Eoff = _CSTD strcspn(&_Buf[0], _Exps); // find exponent

  00098	52		 push	 edx
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 _strcspn
  0009f	89 45 94	 mov	 DWORD PTR __Eoff$1$[ebp], eax

; 1483 :         char _Dp[2]        = {"."};

  000a2	b8 2e 00 00 00	 mov	 eax, 46			; 0000002eH
  000a7	66 89 45 a8	 mov	 WORD PTR __Dp$[ebp], ax

; 1484 :         _Dp[0]             = (_CSTD localeconv())->decimal_point[0];

  000ab	e8 00 00 00 00	 call	 _localeconv
  000b0	8b 00		 mov	 eax, DWORD PTR [eax]
  000b2	8a 00		 mov	 al, BYTE PTR [eax]
  000b4	88 45 a8	 mov	 BYTE PTR __Dp$[ebp], al

; 1485 :         const size_t _Poff = _CSTD strcspn(&_Buf[0], &_Dp[0]); // find decimal point

  000b7	8d 45 a8	 lea	 eax, DWORD PTR __Dp$[ebp]
  000ba	50		 push	 eax
  000bb	53		 push	 ebx
  000bc	e8 00 00 00 00	 call	 _strcspn
  000c1	8b d8		 mov	 ebx, eax
  000c3	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  000c6	8b 45 a0	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  000c9	8b 40 30	 mov	 eax, DWORD PTR [eax+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  000cc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000cf	89 4d 98	 mov	 DWORD PTR $T2[ebp], ecx
  000d2	89 4d b0	 mov	 DWORD PTR $T3[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  000d5	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d7	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1487 :         const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  000da	8d 45 ac	 lea	 eax, DWORD PTR $T3[ebp]
  000dd	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000e4	50		 push	 eax
  000e5	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  000ea	8b 4d 98	 mov	 ecx, DWORD PTR $T2[ebp]
  000ed	83 c4 04	 add	 esp, 4
  000f0	89 45 b4	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000f3	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fa	85 c9		 test	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  000fc	74 11		 je	 SHORT $LN124@Fput_v3

; 355  :             delete _Ptr->_Decref();

  000fe	8b 01		 mov	 eax, DWORD PTR [ecx]
  00100	ff 50 08	 call	 DWORD PTR [eax+8]
  00103	8b c8		 mov	 ecx, eax
  00105	85 c9		 test	 ecx, ecx
  00107	74 06		 je	 SHORT $LN124@Fput_v3
  00109	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010b	6a 01		 push	 1
  0010d	ff 10		 call	 DWORD PTR [eax]
$LN124@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1488 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  0010f	6a 00		 push	 0
  00111	56		 push	 esi
  00112	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00115	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0011a	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 435  :         value_type* _Result = _Bx._Buf;

  0011e	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  00121	8b 45 b4	 mov	 eax, DWORD PTR __Ctype_fac$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00124	0f 47 4d d8	 cmova	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  00128	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1489 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  00129	8b 4d 9c	 mov	 ecx, DWORD PTR __Buf$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  0012c	8b 00		 mov	 eax, DWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1488 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  0012e	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  00135	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1489 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  00138	8d 04 0e	 lea	 eax, DWORD PTR [esi+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  0013b	50		 push	 eax
  0013c	51		 push	 ecx
  0013d	8b 4d b4	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
  00140	ff d2		 call	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  00142	8b 4d a0	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00145	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00148	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014b	89 4d b0	 mov	 DWORD PTR $T4[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  0014e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00150	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1491 :         const auto& _Punct_fac  = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00153	8d 45 ac	 lea	 eax, DWORD PTR $T4[ebp]
  00156	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0015a	50		 push	 eax
  0015b	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  00160	8b 55 b0	 mov	 edx, DWORD PTR $T4[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1491 :         const auto& _Punct_fac  = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00163	83 c4 04	 add	 esp, 4
  00166	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0016a	8b c8		 mov	 ecx, eax
  0016c	89 4d bc	 mov	 DWORD PTR __Punct_fac$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  0016f	85 d2		 test	 edx, edx
  00171	74 16		 je	 SHORT $LN150@Fput_v3

; 355  :             delete _Ptr->_Decref();

  00173	8b 02		 mov	 eax, DWORD PTR [edx]
  00175	8b ca		 mov	 ecx, edx
  00177	ff 50 08	 call	 DWORD PTR [eax+8]
  0017a	8b c8		 mov	 ecx, eax
  0017c	85 c9		 test	 ecx, ecx
  0017e	74 06		 je	 SHORT $LN282@Fput_v3
  00180	8b 01		 mov	 eax, DWORD PTR [ecx]
  00182	6a 01		 push	 1
  00184	ff 10		 call	 DWORD PTR [eax]
$LN282@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 108  :         return do_grouping();

  00186	8b 4d bc	 mov	 ecx, DWORD PTR __Punct_fac$1$[ebp]
$LN150@Fput_v3:
  00189	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018b	8d 55 c0	 lea	 edx, DWORD PTR __Grouping$[ebp]
  0018e	52		 push	 edx
  0018f	ff 50 14	 call	 DWORD PTR [eax+20]

; 104  :         return do_thousands_sep();

  00192	8b 4d bc	 mov	 ecx, DWORD PTR __Punct_fac$1$[ebp]

; 1492 :         const string _Grouping  = _Punct_fac.grouping();

  00195	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 104  :         return do_thousands_sep();

  00199	8b 01		 mov	 eax, DWORD PTR [ecx]
  0019b	ff 50 10	 call	 DWORD PTR [eax+16]

; 1493 :         const _Elem _Kseparator = _Punct_fac.thousands_sep();

  0019e	0f b7 c0	 movzx	 eax, ax
  001a1	89 45 b4	 mov	 DWORD PTR __Kseparator$1$[ebp], eax

; 1494 : 
; 1495 :         if (_Poff != _Count) {

  001a4	3b de		 cmp	 ebx, esi
  001a6	74 1a		 je	 SHORT $LN8@Fput_v3

; 100  :         return do_decimal_point();

  001a8	8b 4d bc	 mov	 ecx, DWORD PTR __Punct_fac$1$[ebp]
  001ab	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ad	ff 50 0c	 call	 DWORD PTR [eax+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001b0	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 100  :         return do_decimal_point();

  001b4	0f b7 c8	 movzx	 ecx, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  001b7	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 436  :         if (_Large_mode_engaged()) {

  001ba	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1496 :             _Groupstring[_Poff] = _Punct_fac.decimal_point();

  001be	66 89 0c 58	 mov	 WORD PTR [eax+ebx*2], cx
$LN8@Fput_v3:

; 1497 :         }
; 1498 : 
; 1499 :         if (_Is_finite_val) {

  001c2	80 7d 24 00	 cmp	 BYTE PTR __Is_finite_val$[ebp], 0
  001c6	0f 84 a5 01 00
	00		 je	 $LN281@Fput_v3

; 1500 :             size_t _Off     = _Poff == _Count ? _Eoff : _Poff;

  001cc	3b de		 cmp	 ebx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 444  :         const value_type* _Result = _Bx._Buf;

  001ce	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1500 :             size_t _Off     = _Poff == _Count ? _Eoff : _Poff;

  001d1	0f 44 5d 94	 cmove	 ebx, DWORD PTR __Eoff$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001d5	83 7d d4 0f	 cmp	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH

; 445  :         if (_Large_mode_engaged()) {

  001d9	0f 47 4d c0	 cmova	 ecx, DWORD PTR __Grouping$[ebp]
  001dd	89 4d 98	 mov	 DWORD PTR __Pg$1$[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1502 :             while (*_Pg != CHAR_MAX && '\0' < *_Pg && static_cast<size_t>(*_Pg) < _Off - _Prefix) {

  001e0	8a 01		 mov	 al, BYTE PTR [ecx]
  001e2	3c 7f		 cmp	 al, 127			; 0000007fH
  001e4	0f 84 87 01 00
	00		 je	 $LN281@Fput_v3
  001ea	66 0f 1f 44 00
	00		 npad	 6
$LL2@Fput_v3:
  001f0	84 c0		 test	 al, al
  001f2	0f 8e 79 01 00
	00		 jle	 $LN281@Fput_v3
  001f8	0f be 09	 movsx	 ecx, BYTE PTR [ecx]
  001fb	8b c3		 mov	 eax, ebx
  001fd	2b c7		 sub	 eax, edi
  001ff	3b c8		 cmp	 ecx, eax
  00201	0f 83 6a 01 00
	00		 jae	 $LN281@Fput_v3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 469  :         if (_Mysize < _Off) {

  00207	8b 7d e8	 mov	 edi, DWORD PTR __Groupstring$[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1504 :                 _Groupstring.insert(_Off -= *_Pg, 1, _Kseparator);

  0020a	2b d9		 sub	 ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 469  :         if (_Mysize < _Off) {

  0020c	3b fb		 cmp	 edi, ebx
  0020e	0f 82 0b 03 00
	00		 jb	 $LN264@Fput_v3

; 1787 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  00214	8b 4d ec	 mov	 ecx, DWORD PTR __Groupstring$[ebp+20]
  00217	8b c1		 mov	 eax, ecx
  00219	2b c7		 sub	 eax, edi
  0021b	89 4d 94	 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx

; 1788 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  0021e	83 f8 01	 cmp	 eax, 1
  00221	72 36		 jb	 SHORT $LN27@Fput_v3

; 1789 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1790 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00223	0f ae e8	 lfence
  00226	ff 45 e8	 inc	 DWORD PTR __Groupstring$[ebp+16]

; 435  :         value_type* _Result = _Bx._Buf;

  00229	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 453  :         return _Myres > _Small_string_capacity;

  0022c	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 436  :         if (_Large_mode_engaged()) {

  00230	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00234	2b fb		 sub	 edi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1792 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  00236	8d 34 58	 lea	 esi, DWORD PTR [eax+ebx*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00239	8d 04 7d 02 00
	00 00		 lea	 eax, DWORD PTR [edi*2+2]
  00240	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1793 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00241	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00244	56		 push	 esi
  00245	50		 push	 eax
  00246	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  0024b	8b 45 b4	 mov	 eax, DWORD PTR __Kseparator$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0024e	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  00251	66 89 06	 mov	 WORD PTR [esi], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1795 :             return *this;

  00254	e9 fb 00 00 00	 jmp	 $LN54@Fput_v3
$LN27@Fput_v3:

; 3028 :         const size_type _Old_size = _My_data._Mysize;

  00259	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0025e	2b c7		 sub	 eax, edi

; 3029 :         if (max_size() - _Old_size < _Size_increase) {

  00260	83 f8 01	 cmp	 eax, 1
  00263	0f 82 b1 02 00
	00		 jb	 $LN265@Fput_v3

; 3031 :         }
; 3032 : 
; 3033 :         const size_type _New_size     = _Old_size + _Size_increase;

  00269	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  0026c	83 ce 07	 or	 esi, 7
  0026f	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00275	76 0a		 jbe	 SHORT $LN60@Fput_v3

; 2980 :             return _Max;

  00277	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  0027c	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0027f	eb 2f		 jmp	 SHORT $LN279@Fput_v3
$LN60@Fput_v3:

; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00281	8b d1		 mov	 edx, ecx
  00283	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00288	d1 ea		 shr	 edx, 1
  0028a	2b c2		 sub	 eax, edx
  0028c	3b c8		 cmp	 ecx, eax
  0028e	76 0a		 jbe	 SHORT $LN61@Fput_v3

; 2984 :             return _Max;

  00290	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00295	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00298	eb 16		 jmp	 SHORT $LN279@Fput_v3
$LN61@Fput_v3:

; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0029a	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]
  0029d	3b f0		 cmp	 esi, eax
  0029f	0f 42 f0	 cmovb	 esi, eax

; 825  :         ++_Capacity; // Take null terminator into consideration

  002a2	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  002a5	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  002aa	0f 87 65 02 00
	00		 ja	 $LN266@Fput_v3
$LN279@Fput_v3:

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  002b0	03 c0		 add	 eax, eax

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  002b2	50		 push	 eax

; 122  :     return _Count * _Ty_size;

  002b3	0f ae e8	 lfence

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  002b6	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3041 :         _My_data._Mysize      = _New_size;

  002bb	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]

; 3042 :         _My_data._Myres       = _New_capacity;

  002be	89 75 ec	 mov	 DWORD PTR __Groupstring$[ebp+20], esi

; 3043 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  002c1	2b fb		 sub	 edi, ebx
  002c3	89 4d e8	 mov	 DWORD PTR __Groupstring$[ebp+16], ecx
  002c6	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]
  002c9	89 45 9c	 mov	 DWORD PTR __New_ptr$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  002cc	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3043 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  002cf	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  002d2	89 75 90	 mov	 DWORD PTR __Su$1$[ebp], esi
  002d5	8d 14 7d 02 00
	00 00		 lea	 edx, DWORD PTR [edi*2+2]

; 3044 :         if (_Old_capacity > _Small_string_capacity) {

  002dc	8b 7d 94	 mov	 edi, DWORD PTR __Old_capacity$1$[ebp]
  002df	89 55 bc	 mov	 DWORD PTR tv1259[ebp], edx
  002e2	8d 56 02	 lea	 edx, DWORD PTR [esi+2]
  002e5	89 55 b0	 mov	 DWORD PTR tv1253[ebp], edx
  002e8	0f ae e8	 lfence
  002eb	51		 push	 ecx
  002ec	83 ff 07	 cmp	 edi, 7
  002ef	76 35		 jbe	 SHORT $LN53@Fput_v3

; 3045 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  002f1	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002f4	56		 push	 esi
  002f5	50		 push	 eax
  002f6	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  002fb	8b 45 90	 mov	 eax, DWORD PTR __Su$1$[ebp]
  002fe	8b 4d b4	 mov	 ecx, DWORD PTR __Kseparator$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00301	ff 75 bc	 push	 DWORD PTR tv1259[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  00304	66 89 08	 mov	 WORD PTR [eax], cx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00307	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0030a	03 c6		 add	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0030c	50		 push	 eax
  0030d	8b 45 b0	 mov	 eax, DWORD PTR tv1253[ebp]
  00310	50		 push	 eax
  00311	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3047 :             _Deallocate_for_capacity(_Al, _Old_ptr, _Old_capacity);

  00316	57		 push	 edi
  00317	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  0031a	56		 push	 esi
  0031b	50		 push	 eax
  0031c	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAAV?$allocator@_W@2@QA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
  00321	83 c4 24	 add	 esp, 36			; 00000024H

; 3048 :             _My_data._Bx._Ptr = _New_ptr;
; 3049 :         } else {

  00324	eb 28		 jmp	 SHORT $LN286@Fput_v3
$LN53@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00326	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  00329	51		 push	 ecx
  0032a	50		 push	 eax
  0032b	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  00330	8b 45 b4	 mov	 eax, DWORD PTR __Kseparator$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00333	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00336	ff 75 bc	 push	 DWORD PTR tv1259[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  00339	66 89 06	 mov	 WORD PTR [esi], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0033c	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  0033f	03 c1		 add	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00341	50		 push	 eax
  00342	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  00345	50		 push	 eax
  00346	e8 00 00 00 00	 call	 _memcpy
  0034b	83 c4 18	 add	 esp, 24			; 00000018H
$LN286@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1505 :                 if ('\0' < _Pg[1]) {

  0034e	8b 45 9c	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  00351	89 45 d8	 mov	 DWORD PTR __Groupstring$[ebp], eax
$LN54@Fput_v3:
  00354	8b 4d 98	 mov	 ecx, DWORD PTR __Pg$1$[ebp]
  00357	80 79 01 00	 cmp	 BYTE PTR [ecx+1], 0
  0035b	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0035e	8b 7d a4	 mov	 edi, DWORD PTR __Prefix$1$[ebp]
  00361	0f 4f c8	 cmovg	 ecx, eax
  00364	89 4d 98	 mov	 DWORD PTR __Pg$1$[ebp], ecx
  00367	8a 01		 mov	 al, BYTE PTR [ecx]
  00369	3c 7f		 cmp	 al, 127			; 0000007fH
  0036b	0f 85 7f fe ff
	ff		 jne	 $LL2@Fput_v3
$LN281@Fput_v3:

; 1506 :                     ++_Pg; // not last group, advance
; 1507 :                 }
; 1508 :             }
; 1509 :         }
; 1510 : 
; 1511 :         _Count = _Groupstring.size();
; 1512 : 
; 1513 :         size_t _Fillcount;
; 1514 :         if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Count) {

  00371	8b 45 a0	 mov	 eax, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00374	8b 5d e8	 mov	 ebx, DWORD PTR __Groupstring$[ebp+16]
  00377	83 78 24 00	 cmp	 DWORD PTR [eax+36], 0
  0037b	8b 70 20	 mov	 esi, DWORD PTR [eax+32]
  0037e	7c 0e		 jl	 SHORT $LN13@Fput_v3
  00380	7f 04		 jg	 SHORT $LN280@Fput_v3
  00382	85 f6		 test	 esi, esi
  00384	74 08		 je	 SHORT $LN13@Fput_v3
$LN280@Fput_v3:
  00386	3b f3		 cmp	 esi, ebx
  00388	76 04		 jbe	 SHORT $LN13@Fput_v3

; 1516 :         } else {
; 1517 :             _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Count;

  0038a	2b f3		 sub	 esi, ebx
  0038c	eb 02		 jmp	 SHORT $LN12@Fput_v3
$LN13@Fput_v3:

; 1515 :             _Fillcount = 0;

  0038e	33 f6		 xor	 esi, esi
$LN12@Fput_v3:

; 1518 :         }
; 1519 : 
; 1520 :         ios_base::fmtflags _Adjustfield = _Iosbase.flags() & ios_base::adjustfield;

  00390	8b 40 14	 mov	 eax, DWORD PTR [eax+20]
  00393	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1521 :         if (_Adjustfield != ios_base::left && _Adjustfield != ios_base::internal) { // put leading fill

  00398	83 f8 40	 cmp	 eax, 64			; 00000040H
  0039b	0f 84 8d 00 00
	00		 je	 $LN16@Fput_v3
  003a1	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  003a6	74 43		 je	 SHORT $LN278@Fput_v3

; 1522 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  003a8	56		 push	 esi
  003a9	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  003ac	8d 45 ac	 lea	 eax, DWORD PTR $T5[ebp]
  003af	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  003b2	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  003b5	50		 push	 eax
  003b6	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  003b9	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep

; 1523 :             _Fillcount = 0;

  003be	33 f6		 xor	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  003c0	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1524 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  003c4	57		 push	 edi
  003c5	8b 10		 mov	 edx, DWORD PTR [eax]
  003c7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  003ca	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 436  :         if (_Large_mode_engaged()) {

  003cd	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1524 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  003d1	50		 push	 eax
  003d2	51		 push	 ecx
  003d3	52		 push	 edx
  003d4	8d 45 ac	 lea	 eax, DWORD PTR $T6[ebp]
  003d7	89 55 0c	 mov	 DWORD PTR __Dest$[ebp], edx
  003da	50		 push	 eax
  003db	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  003de	89 4d 10	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  003e1	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
  003e6	83 c4 30	 add	 esp, 48			; 00000030H
  003e9	eb 65		 jmp	 SHORT $LN17@Fput_v3
$LN278@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  003eb	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 435  :         value_type* _Result = _Bx._Buf;

  003ef	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1526 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  003f2	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  003f3	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1526 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  003f7	50		 push	 eax
  003f8	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  003fb	8d 45 ac	 lea	 eax, DWORD PTR $T7[ebp]
  003fe	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00401	50		 push	 eax
  00402	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  00405	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put

; 1527 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  0040a	56		 push	 esi
  0040b	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0040e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00410	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00413	50		 push	 eax
  00414	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00417	8d 45 ac	 lea	 eax, DWORD PTR $T8[ebp]
  0041a	51		 push	 ecx
  0041b	50		 push	 eax
  0041c	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  0041f	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00422	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00427	83 c4 30	 add	 esp, 48			; 00000030H

; 1528 :             _Fillcount = 0;

  0042a	33 f6		 xor	 esi, esi

; 1529 :         } else {

  0042c	eb 22		 jmp	 SHORT $LN17@Fput_v3
$LN16@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0042e	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 435  :         value_type* _Result = _Bx._Buf;

  00432	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1530 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00435	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00436	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1530 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0043a	50		 push	 eax
  0043b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0043e	8d 45 ac	 lea	 eax, DWORD PTR $T9[ebp]
  00441	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00444	50		 push	 eax
  00445	ff 75 b8	 push	 DWORD PTR _this$1$[ebp]
  00448	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
  0044d	83 c4 18	 add	 esp, 24			; 00000018H
$LN17@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2272 :         return _Mypair._Myval2._Myptr()[_Off];

  00450	8b 10		 mov	 edx, DWORD PTR [eax]
  00452	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 435  :         value_type* _Result = _Bx._Buf;

  00455	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 453  :         return _Myres > _Small_string_capacity;

  00458	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 2272 :         return _Mypair._Myval2._Myptr()[_Off];

  0045c	89 55 0c	 mov	 DWORD PTR __Dest$[ebp], edx

; 436  :         if (_Large_mode_engaged()) {

  0045f	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1533 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00463	2b df		 sub	 ebx, edi
  00465	53		 push	 ebx
  00466	8b 5d b8	 mov	 ebx, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2272 :         return _Mypair._Myval2._Myptr()[_Off];

  00469	89 4d 10	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  0046c	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1533 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  0046f	50		 push	 eax
  00470	51		 push	 ecx
  00471	52		 push	 edx
  00472	8d 45 ac	 lea	 eax, DWORD PTR $T10[ebp]
  00475	50		 push	 eax
  00476	53		 push	 ebx
  00477	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  0047c	8b 55 a0	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1535 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  0047f	56		 push	 esi
  00480	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00483	8b 08		 mov	 ecx, DWORD PTR [eax]
  00485	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00488	8b 75 8c	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0048b	50		 push	 eax
  0048c	51		 push	 ecx
  0048d	56		 push	 esi
  0048e	53		 push	 ebx
  0048f	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00492	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  00495	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  0049c	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1535 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  004a3	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  004a8	8b 4d d4	 mov	 ecx, DWORD PTR __Grouping$[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1535 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  004ab	83 c4 30	 add	 esp, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  004ae	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  004b1	76 28		 jbe	 SHORT $LN179@Fput_v3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b3	8b 55 c0	 mov	 edx, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  004b6	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  004b7	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  004b9	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  004bf	72 10		 jb	 SHORT $LN184@Fput_v3

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  004c1	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  004c4	83 c1 23	 add	 ecx, 35			; 00000023H
  004c7	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004c9	83 c0 fc	 add	 eax, -4			; fffffffcH
  004cc	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  004cf	77 53		 ja	 SHORT $LN288@Fput_v3
$LN184@Fput_v3:

; 289  :         ::operator delete(_Ptr, _Bytes);

  004d1	51		 push	 ecx
  004d2	52		 push	 edx
  004d3	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  004d8	83 c4 08	 add	 esp, 8
$LN179@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1383 :         _Tidy_deallocate();

  004db	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]

; 3090 :         _My_data._Mysize = 0;

  004de	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0

; 3091 :         _My_data._Myres  = _Small_string_capacity;

  004e5	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH

; 3092 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  004ec	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0

; 1383 :         _Tidy_deallocate();

  004f0	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1535 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  004f5	8b c6		 mov	 eax, esi

; 1536 :     }

  004f7	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004fa	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00501	59		 pop	 ecx
  00502	5f		 pop	 edi
  00503	5e		 pop	 esi
  00504	5b		 pop	 ebx
  00505	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00508	33 cd		 xor	 ecx, ebp
  0050a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0050f	8b e5		 mov	 esp, ebp
  00511	5d		 pop	 ebp
  00512	c2 20 00	 ret	 32			; 00000020H
$LN266@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  00515	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN265@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3030 :             _Xlen_string(); // result too long

  0051a	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN264@Fput_v3:

; 470  :             _Xran();

  0051f	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran
$LN288@Fput_v3:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00524	6a 00		 push	 0
  00526	6a 00		 push	 0
  00528	6a 00		 push	 0
  0052a	6a 00		 push	 0
  0052c	6a 00		 push	 0
  0052e	e8 00 00 00 00	 call	 __invoke_watson
$LN284@Fput_v3:
  00533	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z$0:
  00000	8d 4d ac	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z$2:
  00010	8d 4d ac	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 88	 mov	 ecx, DWORD PTR [edx-120]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput_v3<0>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??$_Float_put_desired_precision@O@std@@YAH_JH@Z
_TEXT	SEGMENT
__Precision$ = 8					; size = 8
__Float_flags$ = 16					; size = 4
??$_Float_put_desired_precision@O@std@@YAH_JH@Z PROC	; std::_Float_put_desired_precision<long double>, COMDAT

; 1178 : int _Float_put_desired_precision(const streamsize _Precision, const ios_base::fmtflags _Float_flags) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	8b 4d 10	 mov	 ecx, DWORD PTR __Float_flags$[ebp]

; 1179 :     // return the effective precision determined by N4950 [facet.num.put.virtuals]/2.1 and printf's rules
; 1180 :     const bool _Is_hex = _Float_flags == (ios_base::fixed | ios_base::scientific);

  00006	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H

; 1181 :     if (_Is_hex) {

  0000c	75 07		 jne	 SHORT $LN2@Float_put_

; 1182 :         // return the number of hexits needed (after the radix point) to represent the floating-point value exactly
; 1183 :         if constexpr (is_same_v<_Ty, double>) {
; 1184 :             return ((DBL_MANT_DIG - 1) + 3) / 4;
; 1185 :         } else if constexpr (is_same_v<_Ty, long double>) {
; 1186 :             return ((LDBL_MANT_DIG - 1) + 3) / 4;

  0000e	b8 0d 00 00 00	 mov	 eax, 13			; 0000000dH

; 1204 :     }
; 1205 : }

  00013	5d		 pop	 ebp
  00014	c3		 ret	 0
$LN2@Float_put_:

; 1187 :         } else {
; 1188 :             _STL_INTERNAL_STATIC_ASSERT(false); // unexpected type; shouldn't be float
; 1189 :         }
; 1190 :     }
; 1191 : 
; 1192 :     if (_Precision > 0) {

  00015	8b 55 0c	 mov	 edx, DWORD PTR __Precision$[ebp+4]
  00018	8b 45 08	 mov	 eax, DWORD PTR __Precision$[ebp]
  0001b	85 d2		 test	 edx, edx
  0001d	7c 06		 jl	 SHORT $LN3@Float_put_
  0001f	7f 14		 jg	 SHORT $LN6@Float_put_
  00021	85 c0		 test	 eax, eax
  00023	75 10		 jne	 SHORT $LN6@Float_put_
$LN3@Float_put_:

; 1193 :         return static_cast<int>(_Precision);
; 1194 :     } else if (_Precision == 0) {

  00025	0b c2		 or	 eax, edx
  00027	75 07		 jne	 SHORT $LN5@Float_put_

; 1195 :         const bool _Is_default_float = _Float_flags == 0;

  00029	85 c9		 test	 ecx, ecx
  0002b	0f 94 c0	 sete	 al

; 1204 :     }
; 1205 : }

  0002e	5d		 pop	 ebp
  0002f	c3		 ret	 0
$LN5@Float_put_:

; 1196 :         if (_Is_default_float) {
; 1197 :             return 1;
; 1198 :         } else {
; 1199 :             return 0;
; 1200 :         }
; 1201 :     } else {
; 1202 :         constexpr int _Default_precision = 6;
; 1203 :         return _Default_precision;

  00030	b8 06 00 00 00	 mov	 eax, 6
$LN6@Float_put_:

; 1204 :     }
; 1205 : }

  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
??$_Float_put_desired_precision@O@std@@YAH_JH@Z ENDP	; std::_Float_put_desired_precision<long double>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 1
__Count$ = 28						; size = 4
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep, COMDAT

; 1631 :     _OutIt __CLRCALL_OR_CDECL _Rep(_OutIt _Dest, _Elem _Ch, size_t _Count) const { // put _Count * _Ch to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 :         for (; 0 < _Count; --_Count, (void) ++_Dest) {

  00003	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00006	56		 push	 esi
  00007	8b 75 1c	 mov	 esi, DWORD PTR __Count$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	74 4c		 je	 SHORT $LN3@Rep
  0000e	53		 push	 ebx
  0000f	8a 5d 18	 mov	 bl, BYTE PTR __Ch$[ebp]
$LL4@Rep:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00012	85 c0		 test	 eax, eax
  00014	74 3a		 je	 SHORT $LN8@Rep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  00016	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00019	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0001c	74 1d		 je	 SHORT $LN12@Rep
  0001e	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00021	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00023	85 c9		 test	 ecx, ecx
  00025	7e 14		 jle	 SHORT $LN12@Rep

; 256  :         --*_IPcount;

  00027	49		 dec	 ecx
  00028	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  0002a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0002d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0002f	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00032	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00034	88 1a		 mov	 BYTE PTR [edx], bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 518  :         return static_cast<unsigned char>(_Ch);

  00036	0f b6 c3	 movzx	 eax, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00039	eb 0d		 jmp	 SHORT $LN13@Rep
$LN12@Rep:
  0003b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003d	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 518  :         return static_cast<unsigned char>(_Ch);

  00040	0f b6 cb	 movzx	 ecx, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00043	51		 push	 ecx
  00044	8b c8		 mov	 ecx, eax
  00046	ff d2		 call	 edx
$LN13@Rep:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 522  :         return _Left == _Right;

  00048	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  0004b	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  0004e	75 04		 jne	 SHORT $LN2@Rep
$LN8@Rep:

; 527  :             _Failed = true;

  00050	c6 45 10 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@Rep:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1632 :         for (; 0 < _Count; --_Count, (void) ++_Dest) {

  00054	83 ee 01	 sub	 esi, 1
  00057	75 b9		 jne	 SHORT $LL4@Rep
  00059	5b		 pop	 ebx
$LN3@Rep:

; 1633 :             *_Dest = _Ch;
; 1634 :         }
; 1635 : 
; 1636 :         return _Dest;

  0005a	8b 55 0c	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0005d	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00060	5e		 pop	 esi
  00061	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00064	8b c2		 mov	 eax, edx
  00066	89 0a		 mov	 DWORD PTR [edx], ecx

; 1637 :     }

  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put, COMDAT

; 1623 :         _OutIt _Dest, const _Elem* _Ptr, size_t _Count) const { // put [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1624 :         for (; 0 < _Count; --_Count, (void) ++_Dest, ++_Ptr) {

  00003	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00006	56		 push	 esi
  00007	8b 75 1c	 mov	 esi, DWORD PTR __Count$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	74 51		 je	 SHORT $LN3@Put
  0000e	53		 push	 ebx
  0000f	57		 push	 edi
  00010	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL4@Put:

; 1625 :             *_Dest = *_Ptr;

  00013	8a 1f		 mov	 bl, BYTE PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00015	85 c0		 test	 eax, eax
  00017	74 3a		 je	 SHORT $LN8@Put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  00019	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001c	83 39 00	 cmp	 DWORD PTR [ecx], 0
  0001f	74 1d		 je	 SHORT $LN12@Put
  00021	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00024	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00026	85 c9		 test	 ecx, ecx
  00028	7e 14		 jle	 SHORT $LN12@Put

; 256  :         --*_IPcount;

  0002a	49		 dec	 ecx
  0002b	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  0002d	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00030	8b 11		 mov	 edx, DWORD PTR [ecx]
  00032	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  00035	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00037	88 1a		 mov	 BYTE PTR [edx], bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 518  :         return static_cast<unsigned char>(_Ch);

  00039	0f b6 c3	 movzx	 eax, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0003c	eb 0d		 jmp	 SHORT $LN13@Put
$LN12@Put:
  0003e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00040	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 518  :         return static_cast<unsigned char>(_Ch);

  00043	0f b6 cb	 movzx	 ecx, bl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00046	51		 push	 ecx
  00047	8b c8		 mov	 ecx, eax
  00049	ff d2		 call	 edx
$LN13@Put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 522  :         return _Left == _Right;

  0004b	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  0004e	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00051	75 04		 jne	 SHORT $LN2@Put
$LN8@Put:

; 527  :             _Failed = true;

  00053	c6 45 10 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@Put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1624 :         for (; 0 < _Count; --_Count, (void) ++_Dest, ++_Ptr) {

  00057	47		 inc	 edi
  00058	83 ee 01	 sub	 esi, 1
  0005b	75 b6		 jne	 SHORT $LL4@Put
  0005d	5f		 pop	 edi
  0005e	5b		 pop	 ebx
$LN3@Put:

; 1626 :         }
; 1627 : 
; 1628 :         return _Dest;

  0005f	8b 55 0c	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00062	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00065	5e		 pop	 esi
  00066	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00069	8b c2		 mov	 eax, edx
  0006b	89 0a		 mov	 DWORD PTR [edx], ecx

; 1629 :     }

  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -88				; size = 4
$T2 = -84						; size = 8
__Kseparator$3 = -80					; size = 1
__Buf$GSCopy$1$ = -80					; size = 4
__Count$GSCopy$2$ = -80					; size = 4
$T4 = -80						; size = 4
$T5 = -76						; size = 8
$T6 = -76						; size = 8
$T7 = -76						; size = 8
$T8 = -76						; size = 8
$T9 = -76						; size = 8
$T10 = -76						; size = 8
$T11 = -76						; size = 8
__Ctype_fac$1$ = -72					; size = 4
__Punct_fac$1$ = -72					; size = 4
__Iosbase$GSCopy$1$ = -68				; size = 4
__Dest$7$ = -68						; size = 4
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 1
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput, COMDAT

; 1569 :         size_t _Count) const { // put formatted integer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 7d 24	 mov	 edi, DWORD PTR __Count$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 4d 18	 mov	 ecx, DWORD PTR __Iosbase$[ebp]
  00034	8b 55 20	 mov	 edx, DWORD PTR __Buf$[ebp]
  00037	89 45 a8	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003a	89 4d bc	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], ecx
  0003d	89 55 b0	 mov	 DWORD PTR __Buf$GSCopy$1$[ebp], edx

; 1570 :         auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  00040	85 ff		 test	 edi, edi
  00042	74 11		 je	 SHORT $LN17@Iput
  00044	8a 02		 mov	 al, BYTE PTR [edx]
  00046	3c 2b		 cmp	 al, 43			; 0000002bH
  00048	74 04		 je	 SHORT $LN16@Iput
  0004a	3c 2d		 cmp	 al, 45			; 0000002dH
  0004c	75 07		 jne	 SHORT $LN17@Iput
$LN16@Iput:
  0004e	bb 01 00 00 00	 mov	 ebx, 1
  00053	eb 02		 jmp	 SHORT $LN18@Iput
$LN17@Iput:
  00055	33 db		 xor	 ebx, ebx
$LN18@Iput:

; 1571 :         if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1572 :             && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X')) {

  00057	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  0005a	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
  0005f	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  00064	75 1d		 jne	 SHORT $LN4@Iput
  00066	8d 43 02	 lea	 eax, DWORD PTR [ebx+2]
  00069	3b c7		 cmp	 eax, edi
  0006b	77 16		 ja	 SHORT $LN4@Iput
  0006d	80 3c 1a 30	 cmp	 BYTE PTR [edx+ebx], 48	; 00000030H
  00071	75 10		 jne	 SHORT $LN4@Iput
  00073	8a 54 1a 01	 mov	 dl, BYTE PTR [edx+ebx+1]
  00077	80 fa 78	 cmp	 dl, 120			; 00000078H
  0007a	74 05		 je	 SHORT $LN5@Iput
  0007c	80 fa 58	 cmp	 dl, 88			; 00000058H
  0007f	75 02		 jne	 SHORT $LN4@Iput
$LN5@Iput:

; 1573 :             _Prefix += 2;

  00081	8b d8		 mov	 ebx, eax
$LN4@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  00083	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00086	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 269  :         _Ptr->_Incref();

  00089	8b ce		 mov	 ecx, esi
  0008b	89 75 b8	 mov	 DWORD PTR $T5[ebp+4], esi
  0008e	8b 06		 mov	 eax, DWORD PTR [esi]
  00090	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1576 :         const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  00093	8d 45 b4	 lea	 eax, DWORD PTR $T5[ebp]
  00096	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<char> >
  000a3	83 c4 04	 add	 esp, 4
  000a6	89 45 b8	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000a9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b0	85 f6		 test	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  000b2	74 13		 je	 SHORT $LN34@Iput

; 355  :             delete _Ptr->_Decref();

  000b4	8b 06		 mov	 eax, DWORD PTR [esi]
  000b6	8b ce		 mov	 ecx, esi
  000b8	ff 50 08	 call	 DWORD PTR [eax+8]
  000bb	8b c8		 mov	 ecx, eax
  000bd	85 c9		 test	 ecx, ecx
  000bf	74 06		 je	 SHORT $LN34@Iput
  000c1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c3	6a 01		 push	 1
  000c5	ff 10		 call	 DWORD PTR [eax]
$LN34@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1577 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  000c7	6a 00		 push	 0
  000c9	57		 push	 edi
  000ca	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  000cd	e8 00 00 00 00	 call	 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  000d2	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  000d6	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  000d9	8b 75 b8	 mov	 esi, DWORD PTR __Ctype_fac$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  000dc	0f 47 4d d8	 cmova	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  000e0	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1578 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  000e1	8b 4d b0	 mov	 ecx, DWORD PTR __Buf$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  000e4	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1577 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  000e6	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  000ed	8b 50 1c	 mov	 edx, DWORD PTR [eax+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1578 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  000f0	8d 04 0f	 lea	 eax, DWORD PTR [edi+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2760 :         return do_widen(_First, _Last, _Dest);

  000f3	50		 push	 eax
  000f4	51		 push	 ecx
  000f5	8b ce		 mov	 ecx, esi
  000f7	ff d2		 call	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  000f9	8b 4d bc	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  000fc	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  000ff	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00102	89 4d b0	 mov	 DWORD PTR $T4[ebp], ecx
  00105	89 4d b8	 mov	 DWORD PTR $T6[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  00108	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010a	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1580 :         const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  0010d	8d 45 b4	 lea	 eax, DWORD PTR $T6[ebp]
  00110	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0011a	8b 4d b0	 mov	 ecx, DWORD PTR $T4[ebp]
  0011d	83 c4 04	 add	 esp, 4
  00120	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00124	8b f0		 mov	 esi, eax
  00126	89 75 b8	 mov	 DWORD PTR __Punct_fac$1$[ebp], esi
  00129	85 c9		 test	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  0012b	74 11		 je	 SHORT $LN60@Iput

; 355  :             delete _Ptr->_Decref();

  0012d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0012f	ff 50 08	 call	 DWORD PTR [eax+8]
  00132	8b c8		 mov	 ecx, eax
  00134	85 c9		 test	 ecx, ecx
  00136	74 06		 je	 SHORT $LN60@Iput
  00138	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013a	6a 01		 push	 1
  0013c	ff 10		 call	 DWORD PTR [eax]
$LN60@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 108  :         return do_grouping();

  0013e	8b 06		 mov	 eax, DWORD PTR [esi]
  00140	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00143	51		 push	 ecx
  00144	8b ce		 mov	 ecx, esi
  00146	ff 50 14	 call	 DWORD PTR [eax+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00149	83 7d d4 0f	 cmp	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH

; 444  :         const value_type* _Result = _Bx._Buf;

  0014d	8d 75 c0	 lea	 esi, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1581 :         const string _Grouping = _Punct_fac.grouping();

  00150	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 445  :         if (_Large_mode_engaged()) {

  00154	0f 47 75 c0	 cmova	 esi, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1583 :         if (*_Pg != CHAR_MAX && '\0' < *_Pg) { // grouping specified, add thousands separators

  00158	8a 06		 mov	 al, BYTE PTR [esi]
  0015a	3c 7f		 cmp	 al, 127			; 0000007fH
  0015c	74 46		 je	 SHORT $LN3@Iput
  0015e	84 c0		 test	 al, al
  00160	7e 42		 jle	 SHORT $LN3@Iput

; 104  :         return do_thousands_sep();

  00162	8b 4d b8	 mov	 ecx, DWORD PTR __Punct_fac$1$[ebp]
  00165	8b 01		 mov	 eax, DWORD PTR [ecx]
  00167	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  0016a	ff d0		 call	 eax

; 1584 :             const _Elem _Kseparator = _Punct_fac.thousands_sep();

  0016c	88 45 b0	 mov	 BYTE PTR __Kseparator$3[ebp], al

; 1585 :             while (*_Pg != CHAR_MAX && '\0' < *_Pg && static_cast<size_t>(*_Pg) < _Count - _Prefix) {

  0016f	8a 06		 mov	 al, BYTE PTR [esi]
  00171	3c 7f		 cmp	 al, 127			; 0000007fH
  00173	74 2f		 je	 SHORT $LN3@Iput
$LL2@Iput:
  00175	84 c0		 test	 al, al
  00177	7e 2b		 jle	 SHORT $LN3@Iput
  00179	0f be 0e	 movsx	 ecx, BYTE PTR [esi]
  0017c	8b c7		 mov	 eax, edi
  0017e	2b c3		 sub	 eax, ebx
  00180	3b c8		 cmp	 ecx, eax
  00182	73 20		 jae	 SHORT $LN3@Iput

; 1586 :                 // insert thousands separator
; 1587 :                 _Count -= *_Pg;
; 1588 :                 _Groupstring.insert(_Count, 1, _Kseparator);

  00184	ff 75 b0	 push	 DWORD PTR __Kseparator$3[ebp]
  00187	2b f9		 sub	 edi, ecx
  00189	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0018c	6a 01		 push	 1
  0018e	57		 push	 edi
  0018f	e8 00 00 00 00	 call	 ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert

; 1589 :                 if ('\0' < _Pg[1]) {

  00194	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  00198	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  0019b	0f 4f f0	 cmovg	 esi, eax
  0019e	8a 06		 mov	 al, BYTE PTR [esi]
  001a0	3c 7f		 cmp	 al, 127			; 0000007fH
  001a2	75 d1		 jne	 SHORT $LL2@Iput
$LN3@Iput:

; 1590 :                     ++_Pg; // not last group, advance
; 1591 :                 }
; 1592 :             }
; 1593 :         }
; 1594 : 
; 1595 :         _Count = _Groupstring.size();
; 1596 : 
; 1597 :         size_t _Fillcount;
; 1598 :         if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Count) {

  001a4	8b 7d bc	 mov	 edi, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  001a7	8b 45 e8	 mov	 eax, DWORD PTR __Groupstring$[ebp+16]
  001aa	89 45 b0	 mov	 DWORD PTR __Count$GSCopy$2$[ebp], eax
  001ad	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  001b1	8b 77 20	 mov	 esi, DWORD PTR [edi+32]
  001b4	7c 0e		 jl	 SHORT $LN10@Iput
  001b6	7f 04		 jg	 SHORT $LN189@Iput
  001b8	85 f6		 test	 esi, esi
  001ba	74 08		 je	 SHORT $LN10@Iput
$LN189@Iput:
  001bc	3b f0		 cmp	 esi, eax
  001be	76 04		 jbe	 SHORT $LN10@Iput

; 1600 :         } else {
; 1601 :             _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Count;

  001c0	2b f0		 sub	 esi, eax
  001c2	eb 02		 jmp	 SHORT $LN9@Iput
$LN10@Iput:

; 1599 :             _Fillcount = 0;

  001c4	33 f6		 xor	 esi, esi
$LN9@Iput:

; 1602 :         }
; 1603 : 
; 1604 :         ios_base::fmtflags _Adjustfield = _Iosbase.flags() & ios_base::adjustfield;

  001c6	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  001c9	25 c0 01 00 00	 and	 eax, 448		; 000001c0H

; 1605 :         if (_Adjustfield != ios_base::left && _Adjustfield != ios_base::internal) { // put leading fill

  001ce	83 f8 40	 cmp	 eax, 64			; 00000040H
  001d1	0f 84 8d 00 00
	00		 je	 $LN13@Iput
  001d7	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  001dc	74 43		 je	 SHORT $LN188@Iput

; 1606 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  001de	56		 push	 esi
  001df	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  001e2	8d 45 b4	 lea	 eax, DWORD PTR $T7[ebp]
  001e5	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  001e8	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  001eb	50		 push	 eax
  001ec	ff 75 08	 push	 DWORD PTR _this$[ebp]
  001ef	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep

; 1607 :             _Fillcount = 0;

  001f4	33 f6		 xor	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001f6	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1608 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  001fa	53		 push	 ebx
  001fb	8b 10		 mov	 edx, DWORD PTR [eax]
  001fd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  00200	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 436  :         if (_Large_mode_engaged()) {

  00203	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1608 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00207	50		 push	 eax
  00208	51		 push	 ecx
  00209	52		 push	 edx
  0020a	8d 45 b4	 lea	 eax, DWORD PTR $T8[ebp]
  0020d	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  00210	50		 push	 eax
  00211	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00214	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00217	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  0021c	83 c4 30	 add	 esp, 48			; 00000030H
  0021f	eb 65		 jmp	 SHORT $LN193@Iput
$LN188@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00221	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00225	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1610 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00228	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00229	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1610 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  0022d	50		 push	 eax
  0022e	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00231	8d 45 b4	 lea	 eax, DWORD PTR $T9[ebp]
  00234	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00237	50		 push	 eax
  00238	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0023b	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1611 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  00240	56		 push	 esi
  00241	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00244	8b 08		 mov	 ecx, DWORD PTR [eax]
  00246	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00249	50		 push	 eax
  0024a	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  0024d	8d 45 b4	 lea	 eax, DWORD PTR $T10[ebp]
  00250	51		 push	 ecx
  00251	50		 push	 eax
  00252	ff 75 08	 push	 DWORD PTR _this$[ebp]
  00255	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00258	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0025d	83 c4 30	 add	 esp, 48			; 00000030H

; 1612 :             _Fillcount = 0;

  00260	33 f6		 xor	 esi, esi

; 1613 :         } else {

  00262	eb 22		 jmp	 SHORT $LN193@Iput
$LN13@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00264	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00268	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1614 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  0026b	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  0026c	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1614 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  00270	50		 push	 eax
  00271	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00274	8d 45 b4	 lea	 eax, DWORD PTR $T11[ebp]
  00277	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0027a	50		 push	 eax
  0027b	ff 75 08	 push	 DWORD PTR _this$[ebp]
  0027e	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put
  00283	83 c4 18	 add	 esp, 24			; 00000018H
$LN193@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  00286	8b 10		 mov	 edx, DWORD PTR [eax]
  00288	8b 40 04	 mov	 eax, DWORD PTR [eax+4]

; 453  :         return _Myres > _Small_string_capacity;

  0028b	83 7d ec 0f	 cmp	 DWORD PTR __Groupstring$[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1617 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  0028f	8b 4d b0	 mov	 ecx, DWORD PTR __Count$GSCopy$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  00292	89 45 bc	 mov	 DWORD PTR __Dest$7$[ebp], eax
  00295	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  00298	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 436  :         if (_Large_mode_engaged()) {

  0029b	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1617 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  0029f	2b cb		 sub	 ecx, ebx
  002a1	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2272 :         return _Mypair._Myval2._Myptr()[_Off];

  002a2	03 c3		 add	 eax, ebx

; 435  :         value_type* _Result = _Bx._Buf;

  002a4	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1617 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  002a7	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  002aa	50		 push	 eax
  002ab	ff 75 bc	 push	 DWORD PTR __Dest$7$[ebp]
  002ae	8d 45 ac	 lea	 eax, DWORD PTR $T2[ebp]
  002b1	52		 push	 edx
  002b2	50		 push	 eax
  002b3	53		 push	 ebx
  002b4	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1619 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  002b9	56		 push	 esi
  002ba	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  002bd	8b 75 a8	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  002c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002c2	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  002c5	50		 push	 eax
  002c6	51		 push	 ecx
  002c7	56		 push	 esi
  002c8	53		 push	 ebx
  002c9	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  002cc	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  002cf	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  002d6	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1619 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  002dd	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  002e2	8b 4d d4	 mov	 ecx, DWORD PTR __Grouping$[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1619 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  002e5	83 c4 30	 add	 esp, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  002e8	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  002eb	76 28		 jbe	 SHORT $LN97@Iput
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002ed	8b 55 c0	 mov	 edx, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  002f0	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  002f1	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  002f3	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  002f9	72 10		 jb	 SHORT $LN102@Iput

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  002fb	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  002fe	83 c1 23	 add	 ecx, 35			; 00000023H
  00301	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00303	83 c0 fc	 add	 eax, -4			; fffffffcH
  00306	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00309	77 6a		 ja	 SHORT $LN133@Iput
$LN102@Iput:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0030b	51		 push	 ecx
  0030c	52		 push	 edx
  0030d	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00312	83 c4 08	 add	 esp, 8
$LN97@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00315	8b 4d ec	 mov	 ecx, DWORD PTR __Groupstring$[ebp+20]

; 3090 :         _My_data._Mysize = 0;

  00318	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0

; 3091 :         _My_data._Myres  = _Small_string_capacity;

  0031f	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH

; 3092 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00326	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0

; 453  :         return _Myres > _Small_string_capacity;

  0032a	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  0032d	76 28		 jbe	 SHORT $LN129@Iput
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0032f	8b 55 d8	 mov	 edx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00332	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00333	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00335	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0033b	72 10		 jb	 SHORT $LN134@Iput

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0033d	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00340	83 c1 23	 add	 ecx, 35			; 00000023H
  00343	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00345	83 c0 fc	 add	 eax, -4			; fffffffcH
  00348	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0034b	77 28		 ja	 SHORT $LN133@Iput
$LN134@Iput:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0034d	51		 push	 ecx
  0034e	52		 push	 edx
  0034f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00354	83 c4 08	 add	 esp, 8
$LN129@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1619 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00357	8b c6		 mov	 eax, esi

; 1620 :     }

  00359	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0035c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00363	59		 pop	 ecx
  00364	5f		 pop	 edi
  00365	5e		 pop	 esi
  00366	5b		 pop	 ebx
  00367	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0036a	33 cd		 xor	 ecx, ebp
  0036c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00371	8b e5		 mov	 esp, ebp
  00373	5d		 pop	 ebp
  00374	c3		 ret	 0
$LN133@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00375	6a 00		 push	 0
  00377	6a 00		 push	 0
  00379	6a 00		 push	 0
  0037b	6a 00		 push	 0
  0037d	6a 00		 push	 0
  0037f	e8 00 00 00 00	 call	 __invoke_watson
$LN192@Iput:
  00384	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$0:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR $T5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$2:
  00010	8d 4d b4	 lea	 ecx, DWORD PTR $T6[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a a4	 mov	 ecx, DWORD PTR [edx-92]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt, COMDAT

; 1416 :         char* _Fmt, char _Spec, ios_base::fmtflags _Flags) const { // generate sprintf format for floating-point

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1417 :         char* _Ptr = _Fmt;
; 1418 :         *_Ptr++    = '%';
; 1419 : 
; 1420 :         if (_Flags & ios_base::showpos) {

  00003	8b 55 14	 mov	 edx, DWORD PTR __Flags$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Fmt$[ebp]
  0000a	c6 06 25	 mov	 BYTE PTR [esi], 37	; 00000025H
  0000d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00010	f6 c2 20	 test	 dl, 32			; 00000020H
  00013	74 04		 je	 SHORT $LN2@Ffmt

; 1421 :             *_Ptr++ = '+';

  00015	c6 00 2b	 mov	 BYTE PTR [eax], 43	; 0000002bH
  00018	40		 inc	 eax
$LN2@Ffmt:

; 1422 :         }
; 1423 : 
; 1424 :         if (_Flags & ios_base::showpoint) {

  00019	f6 c2 10	 test	 dl, 16			; 00000010H
  0001c	74 04		 je	 SHORT $LN3@Ffmt

; 1425 :             *_Ptr++ = '#';

  0001e	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00021	40		 inc	 eax
$LN3@Ffmt:

; 1426 :         }
; 1427 : 
; 1428 :         *_Ptr++ = '.';
; 1429 :         *_Ptr++ = '*'; // for precision argument
; 1430 :         if (_Spec != '\0') {

  00022	8a 4d 10	 mov	 cl, BYTE PTR __Spec$[ebp]
  00025	66 c7 00 2e 2a	 mov	 WORD PTR [eax], 10798	; 00002a2eH
  0002a	83 c0 02	 add	 eax, 2
  0002d	84 c9		 test	 cl, cl
  0002f	74 03		 je	 SHORT $LN4@Ffmt

; 1431 :             *_Ptr++ = _Spec; // 'L' qualifier for long double only

  00031	88 08		 mov	 BYTE PTR [eax], cl
  00033	40		 inc	 eax
$LN4@Ffmt:

; 1432 :         }
; 1433 : 
; 1434 :         char _Ch; // specifier
; 1435 :         ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	8b ca		 mov	 ecx, edx
  00036	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H

; 1436 :         if (_Flags & ios_base::uppercase) {

  0003c	f6 c2 04	 test	 dl, 4
  0003f	74 45		 je	 SHORT $LN5@Ffmt

; 1437 :             if (_Ffl == ios_base::fixed) {

  00041	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00047	75 0d		 jne	 SHORT $LN7@Ffmt

; 1438 :                 _Ch = 'F';

  00049	b1 46		 mov	 cl, 70			; 00000046H

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  0004b	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  0004d	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  00051	8b c6		 mov	 eax, esi
  00053	5e		 pop	 esi

; 1461 :     }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN7@Ffmt:

; 1439 :             } else if (_Ffl == (ios_base::scientific | ios_base::fixed)) {

  00056	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  0005c	75 0d		 jne	 SHORT $LN9@Ffmt

; 1440 :                 _Ch = 'A';

  0005e	b1 41		 mov	 cl, 65			; 00000041H

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  00060	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  00062	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi

; 1461 :     }

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN9@Ffmt:

; 1441 :             } else if (_Ffl == ios_base::scientific) {

  0006b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00071	0f 95 c1	 setne	 cl
  00074	8d 0c 4d 45 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+69]

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  0007b	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  0007d	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  00081	8b c6		 mov	 eax, esi
  00083	5e		 pop	 esi

; 1461 :     }

  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN5@Ffmt:

; 1442 :                 _Ch = 'E';
; 1443 :             } else {
; 1444 :                 _Ch = 'G';
; 1445 :             }
; 1446 :         } else {
; 1447 :             if (_Ffl == ios_base::fixed) {

  00086	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0008c	75 0d		 jne	 SHORT $LN13@Ffmt

; 1448 :                 _Ch = 'f';

  0008e	b1 66		 mov	 cl, 102			; 00000066H

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  00090	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  00092	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  00096	8b c6		 mov	 eax, esi
  00098	5e		 pop	 esi

; 1461 :     }

  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN13@Ffmt:

; 1449 :             } else if (_Ffl == (ios_base::scientific | ios_base::fixed)) {

  0009b	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  000a1	75 0d		 jne	 SHORT $LN15@Ffmt

; 1450 :                 _Ch = 'a';

  000a3	b1 61		 mov	 cl, 97			; 00000061H

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  000a5	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  000a7	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  000ab	8b c6		 mov	 eax, esi
  000ad	5e		 pop	 esi

; 1461 :     }

  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN15@Ffmt:

; 1451 :             } else if (_Ffl == ios_base::scientific) {

  000b0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b6	0f 95 c1	 setne	 cl
  000b9	8d 0c 4d 65 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+101]

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  000c0	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  000c2	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  000c6	8b c6		 mov	 eax, esi
  000c8	5e		 pop	 esi

; 1461 :     }

  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1407 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const void* _Val) const { // put formatted void pointer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 1c	 mov	 eax, DWORD PTR __Val$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  0001b	57		 push	 edi

; 1408 :         char _Buf[2 * _Max_int_dig];
; 1409 : 
; 1410 :         return _Iput(

  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp@
  00022	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00025	8b f9		 mov	 edi, ecx
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _sprintf_s
  0002f	50		 push	 eax
  00030	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00033	50		 push	 eax
  00034	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00037	56		 push	 esi
  00038	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0003b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0003e	53		 push	 ebx
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1411 :             _Dest, _Iosbase, _Fill, _Buf, static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), "%p", _Val)));
; 1412 :     }

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	83 c4 30	 add	 esp, 48			; 00000030H
  0004b	8b c3		 mov	 eax, ebx
  0004d	33 cd		 xor	 ecx, ebp
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPBX@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -68				; size = 4
__Iosbase$GSCopy$1$ = -64				; size = 4
__Precision$ = -60					; size = 8
__Ptwo$2 = -56						; size = 4
__Is_finite$ = -56					; size = 1
_this$GSCopy$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1379 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const { // put formatted long double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  00033	33 d2		 xor	 edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1379 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const { // put formatted long double to _Dest

  00035	89 45 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  00038	8b 45 14	 mov	 eax, DWORD PTR __Iosbase$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003b	0f 11 45 d0	 movups	 XMMWORD PTR __Buf$[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1379 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const { // put formatted long double to _Dest

  0003f	89 45 c0	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  00042	89 55 e0	 mov	 DWORD PTR __Buf$[ebp+16], edx

; 861  :         _My_data._Myres  = _Small_string_capacity;

  00045	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	88 55 d0	 mov	 BYTE PTR __Buf$[ebp], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1382 :         const auto _Float_flags     = _Iosbase.flags() & ios_base::floatfield;

  0004f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00052	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00058	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx

; 1383 :         const bool _Is_fixed        = _Float_flags == ios_base::fixed;
; 1384 :         const bool _Is_hex          = _Float_flags == (ios_base::fixed | ios_base::scientific);

  0005b	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H

; 1385 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00061	75 0e		 jne	 SHORT $LN4@do_put
  00063	83 cf ff	 or	 edi, -1

; 1386 :         const int _Desired_precision =
; 1387 :             _Float_put_desired_precision<long double>(_Precision, _Float_flags); // desired precision
; 1388 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  00066	8d 72 0d	 lea	 esi, DWORD PTR [edx+13]
  00069	89 7d c8	 mov	 DWORD PTR __Precision$[ebp+4], edi

; 1186 :             return ((LDBL_MANT_DIG - 1) + 3) / 4;

  0006c	e9 8a 00 00 00	 jmp	 $LN2@do_put
$LN4@do_put:

; 1385 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00071	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  00074	8b 78 18	 mov	 edi, DWORD PTR [eax+24]

; 1192 :     if (_Precision > 0) {

  00077	85 f6		 test	 esi, esi
  00079	7c 0a		 jl	 SHORT $LN31@do_put
  0007b	7f 04		 jg	 SHORT $LN115@do_put
  0007d	85 ff		 test	 edi, edi
  0007f	74 04		 je	 SHORT $LN31@do_put
$LN115@do_put:

; 1193 :         return static_cast<int>(_Precision);

  00081	8b f7		 mov	 esi, edi
  00083	eb 18		 jmp	 SHORT $LN34@do_put
$LN31@do_put:

; 1194 :     } else if (_Precision == 0) {

  00085	8b c7		 mov	 eax, edi
  00087	0b c6		 or	 eax, esi
  00089	75 0d		 jne	 SHORT $LN33@do_put

; 1195 :         const bool _Is_default_float = _Float_flags == 0;

  0008b	85 c9		 test	 ecx, ecx

; 1196 :         if (_Is_default_float) {

  0008d	75 05		 jne	 SHORT $LN35@do_put

; 1386 :         const int _Desired_precision =
; 1387 :             _Float_put_desired_precision<long double>(_Precision, _Float_flags); // desired precision
; 1388 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  0008f	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1197 :             return 1;

  00092	eb 67		 jmp	 SHORT $LN2@do_put
$LN35@do_put:

; 1198 :         } else {
; 1199 :             return 0;

  00094	33 f6		 xor	 esi, esi
  00096	eb 05		 jmp	 SHORT $LN34@do_put
$LN33@do_put:

; 1200 :         }
; 1201 :     } else {
; 1202 :         constexpr int _Default_precision = 6;
; 1203 :         return _Default_precision;

  00098	be 06 00 00 00	 mov	 esi, 6
$LN34@do_put:

; 1389 :         if (_Is_fixed && 1e10 < _CSTD fabsl(_Val)) { // f or F format

  0009d	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  000a3	75 56		 jne	 SHORT $LN2@do_put
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 882  :         return fabs((double)_X);

  000a5	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  000aa	0f 28 c1	 movaps	 xmm0, xmm1
  000ad	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1389 :         if (_Is_fixed && 1e10 < _CSTD fabsl(_Val)) { // f or F format

  000b4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000bc	76 3d		 jbe	 SHORT $LN2@do_put
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 903  :         return frexp((double)_X, _Y);

  000be	8d 45 c8	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000c1	50		 push	 eax
  000c2	83 ec 08	 sub	 esp, 8
  000c5	0f ae e8	 lfence
  000c8	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000cd	e8 00 00 00 00	 call	 _frexp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1392 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000d2	8b 45 c8	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 903  :         return frexp((double)_X, _Y);

  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1392 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000d8	99		 cdq
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 903  :         return frexp((double)_X, _Y);

  000d9	dd d8		 fstp	 ST(0)
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1392 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000db	33 c2		 xor	 eax, edx
  000dd	2b c2		 sub	 eax, edx
  000df	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000e5	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000ea	f7 e9		 imul	 ecx
  000ec	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000ef	8b c2		 mov	 eax, edx
  000f1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f4	03 c2		 add	 eax, edx
  000f6	8b 55 e0	 mov	 edx, DWORD PTR __Buf$[ebp+16]
  000f9	03 f0		 add	 esi, eax
$LN2@do_put:

; 1393 :         }
; 1394 : 
; 1395 :         _Buf.resize(_Bufsize + 50); // add fudge factor

  000fb	83 c6 32	 add	 esi, 50			; 00000032H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2389 :         if (_New_size <= _Old_size) {

  000fe	3b f2		 cmp	 esi, edx
  00100	77 14		 ja	 SHORT $LN39@do_put

; 453  :         return _Myres > _Small_string_capacity;

  00102	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00106	8d 45 d0	 lea	 eax, DWORD PTR __Buf$[ebp]

; 3076 :         _Mypair._Myval2._Mysize = _New_size;

  00109	89 75 e0	 mov	 DWORD PTR __Buf$[ebp+16], esi

; 436  :         if (_Large_mode_engaged()) {

  0010c	0f 47 45 d0	 cmova	 eax, DWORD PTR __Buf$[ebp]

; 3077 :         _Traits::assign(_Mypair._Myval2._Myptr()[_New_size], _Elem());

  00110	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2391 :         } else {

  00114	eb 10		 jmp	 SHORT $LN40@do_put
$LN39@do_put:

; 2392 :             append(_New_size - _Old_size, _Ch);

  00116	6a 00		 push	 0
  00118	2b f2		 sub	 esi, edx
  0011a	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  0011d	56		 push	 esi
  0011e	0f ae e8	 lfence
  00121	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN40@do_put:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 335  :         return _ldtest(&_X);

  00126	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00129	83 ec 08	 sub	 esp, 8
  0012c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0012f	e8 00 00 00 00	 call	 __ldclass
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1396 :         const bool _Is_finite      = (_STD isfinite)(_Val);

  00134	8b 75 c0	 mov	 esi, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 437  :         return fpclassify(_X) <= 0;

  00137	66 85 c0	 test	 ax, ax
  0013a	0f 9e c2	 setle	 dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1396 :         const bool _Is_finite      = (_STD isfinite)(_Val);

  0013d	88 55 c8	 mov	 BYTE PTR __Is_finite$[ebp], dl
  00140	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1399 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00143	8b c1		 mov	 eax, ecx
  00145	83 e0 ef	 and	 eax, -17		; ffffffefH
  00148	84 d2		 test	 dl, dl
  0014a	0f 44 c8	 cmove	 ecx, eax
  0014d	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00150	51		 push	 ecx
  00151	6a 4c		 push	 76			; 0000004cH
  00153	50		 push	 eax
  00154	ff 75 cc	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00157	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0015c	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00160	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1399 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00163	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00168	0f 47 4d d0	 cmova	 ecx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1399 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  0016c	83 c4 10	 add	 esp, 16			; 00000010H
  0016f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	ff 75 e0	 push	 DWORD PTR __Buf$[ebp+16]
  00179	51		 push	 ecx
  0017a	e8 00 00 00 00	 call	 _sprintf_s
  0017f	83 c4 18	 add	 esp, 24			; 00000018H

; 1402 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  00182	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00185	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 444  :         const value_type* _Result = _Bx._Buf;

  00189	8d 55 d0	 lea	 edx, DWORD PTR __Buf$[ebp]

; 445  :         if (_Large_mode_engaged()) {

  0018c	0f 47 55 d0	 cmova	 edx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1402 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  00190	ff 75 c8	 push	 DWORD PTR __Is_finite$[ebp]
  00193	50		 push	 eax
  00194	52		 push	 edx
  00195	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00198	56		 push	 esi
  00199	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0019c	8b 75 bc	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0019f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  001a2	56		 push	 esi
  001a3	e8 00 00 00 00	 call	 ??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput_v3<0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001a8	8b 4d e4	 mov	 ecx, DWORD PTR __Buf$[ebp+20]
  001ab	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  001ae	76 28		 jbe	 SHORT $LN98@do_put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b0	8b 55 d0	 mov	 edx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001b3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b4	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bc	72 10		 jb	 SHORT $LN103@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001be	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c1	83 c1 23	 add	 ecx, 35			; 00000023H
  001c4	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c6	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cc	77 29		 ja	 SHORT $LN119@do_put
$LN103@do_put:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ce	51		 push	 ecx
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d5	83 c4 08	 add	 esp, 8
$LN98@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1402 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  001d8	8b c6		 mov	 eax, esi

; 1403 :     }

  001da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e4	59		 pop	 ecx
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	33 cd		 xor	 ecx, ebp
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c2 1c 00	 ret	 28			; 0000001cH
$LN119@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f7	6a 00		 push	 0
  001f9	6a 00		 push	 0
  001fb	6a 00		 push	 0
  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	e8 00 00 00 00	 call	 __invoke_watson
$LN117@do_put:
  00206	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DO@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -68				; size = 4
__Iosbase$GSCopy$1$ = -64				; size = 4
__Precision$ = -60					; size = 8
__Ptwo$2 = -56						; size = 4
__Is_finite$ = -56					; size = 1
_this$GSCopy$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1352 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const { // put formatted double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  00033	33 d2		 xor	 edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1352 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const { // put formatted double to _Dest

  00035	89 45 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  00038	8b 45 14	 mov	 eax, DWORD PTR __Iosbase$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003b	0f 11 45 d0	 movups	 XMMWORD PTR __Buf$[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1352 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const { // put formatted double to _Dest

  0003f	89 45 c0	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  00042	89 55 e0	 mov	 DWORD PTR __Buf$[ebp+16], edx

; 861  :         _My_data._Myres  = _Small_string_capacity;

  00045	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	88 55 d0	 mov	 BYTE PTR __Buf$[ebp], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1355 :         const auto _Float_flags     = _Iosbase.flags() & ios_base::floatfield;

  0004f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00052	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00058	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx

; 1356 :         const bool _Is_fixed        = _Float_flags == ios_base::fixed;
; 1357 :         const bool _Is_hex          = _Float_flags == (ios_base::fixed | ios_base::scientific);

  0005b	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H

; 1358 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00061	75 0e		 jne	 SHORT $LN4@do_put
  00063	83 cf ff	 or	 edi, -1

; 1359 :         const int _Desired_precision =
; 1360 :             _Float_put_desired_precision<double>(_Precision, _Float_flags); // desired precision
; 1361 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  00066	8d 72 0d	 lea	 esi, DWORD PTR [edx+13]
  00069	89 7d c8	 mov	 DWORD PTR __Precision$[ebp+4], edi

; 1184 :             return ((DBL_MANT_DIG - 1) + 3) / 4;

  0006c	e9 8a 00 00 00	 jmp	 $LN2@do_put
$LN4@do_put:

; 1358 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00071	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  00074	8b 78 18	 mov	 edi, DWORD PTR [eax+24]

; 1192 :     if (_Precision > 0) {

  00077	85 f6		 test	 esi, esi
  00079	7c 0a		 jl	 SHORT $LN31@do_put
  0007b	7f 04		 jg	 SHORT $LN111@do_put
  0007d	85 ff		 test	 edi, edi
  0007f	74 04		 je	 SHORT $LN31@do_put
$LN111@do_put:

; 1193 :         return static_cast<int>(_Precision);

  00081	8b f7		 mov	 esi, edi
  00083	eb 18		 jmp	 SHORT $LN34@do_put
$LN31@do_put:

; 1194 :     } else if (_Precision == 0) {

  00085	8b c7		 mov	 eax, edi
  00087	0b c6		 or	 eax, esi
  00089	75 0d		 jne	 SHORT $LN33@do_put

; 1195 :         const bool _Is_default_float = _Float_flags == 0;

  0008b	85 c9		 test	 ecx, ecx

; 1196 :         if (_Is_default_float) {

  0008d	75 05		 jne	 SHORT $LN35@do_put

; 1359 :         const int _Desired_precision =
; 1360 :             _Float_put_desired_precision<double>(_Precision, _Float_flags); // desired precision
; 1361 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  0008f	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1197 :             return 1;

  00092	eb 67		 jmp	 SHORT $LN2@do_put
$LN35@do_put:

; 1198 :         } else {
; 1199 :             return 0;

  00094	33 f6		 xor	 esi, esi
  00096	eb 05		 jmp	 SHORT $LN34@do_put
$LN33@do_put:

; 1200 :         }
; 1201 :     } else {
; 1202 :         constexpr int _Default_precision = 6;
; 1203 :         return _Default_precision;

  00098	be 06 00 00 00	 mov	 esi, 6
$LN34@do_put:

; 1362 :         if (_Is_fixed && 1e10 < _CSTD fabs(_Val)) { // f or F format

  0009d	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  000a3	75 56		 jne	 SHORT $LN2@do_put
  000a5	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  000aa	0f 28 c1	 movaps	 xmm0, xmm1
  000ad	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  000b4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000bc	76 3d		 jbe	 SHORT $LN2@do_put

; 1363 :             int _Ptwo;
; 1364 :             (void) _CSTD frexp(_Val, &_Ptwo);

  000be	8d 45 c8	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000c1	50		 push	 eax
  000c2	83 ec 08	 sub	 esp, 8
  000c5	0f ae e8	 lfence
  000c8	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000cd	e8 00 00 00 00	 call	 _frexp

; 1365 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000d2	8b 45 c8	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	99		 cdq
  000d9	dd d8		 fstp	 ST(0)
  000db	33 c2		 xor	 eax, edx
  000dd	2b c2		 sub	 eax, edx
  000df	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000e5	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000ea	f7 e9		 imul	 ecx
  000ec	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000ef	8b c2		 mov	 eax, edx
  000f1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f4	03 c2		 add	 eax, edx
  000f6	8b 55 e0	 mov	 edx, DWORD PTR __Buf$[ebp+16]
  000f9	03 f0		 add	 esi, eax
$LN2@do_put:

; 1366 :         }
; 1367 : 
; 1368 :         _Buf.resize(_Bufsize + 50); // add fudge factor

  000fb	83 c6 32	 add	 esi, 50			; 00000032H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2389 :         if (_New_size <= _Old_size) {

  000fe	3b f2		 cmp	 esi, edx
  00100	77 14		 ja	 SHORT $LN39@do_put

; 453  :         return _Myres > _Small_string_capacity;

  00102	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00106	8d 45 d0	 lea	 eax, DWORD PTR __Buf$[ebp]

; 3076 :         _Mypair._Myval2._Mysize = _New_size;

  00109	89 75 e0	 mov	 DWORD PTR __Buf$[ebp+16], esi

; 436  :         if (_Large_mode_engaged()) {

  0010c	0f 47 45 d0	 cmova	 eax, DWORD PTR __Buf$[ebp]

; 3077 :         _Traits::assign(_Mypair._Myval2._Myptr()[_New_size], _Elem());

  00110	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2391 :         } else {

  00114	eb 10		 jmp	 SHORT $LN40@do_put
$LN39@do_put:

; 2392 :             append(_New_size - _Old_size, _Ch);

  00116	6a 00		 push	 0
  00118	2b f2		 sub	 esi, edx
  0011a	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  0011d	56		 push	 esi
  0011e	0f ae e8	 lfence
  00121	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN40@do_put:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 326  :         return _dtest(&_X);

  00126	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00129	83 ec 08	 sub	 esp, 8
  0012c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0012f	e8 00 00 00 00	 call	 __dclass
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1369 :         const bool _Is_finite      = (_STD isfinite)(_Val);

  00134	8b 75 c0	 mov	 esi, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 437  :         return fpclassify(_X) <= 0;

  00137	66 85 c0	 test	 ax, ax
  0013a	0f 9e c2	 setle	 dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1369 :         const bool _Is_finite      = (_STD isfinite)(_Val);

  0013d	88 55 c8	 mov	 BYTE PTR __Is_finite$[ebp], dl
  00140	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1372 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00143	8b c1		 mov	 eax, ecx
  00145	83 e0 ef	 and	 eax, -17		; ffffffefH
  00148	84 d2		 test	 dl, dl
  0014a	0f 44 c8	 cmove	 ecx, eax
  0014d	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00150	51		 push	 ecx
  00151	6a 00		 push	 0
  00153	50		 push	 eax
  00154	ff 75 cc	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00157	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Ffmt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0015c	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00160	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1372 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00163	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00168	0f 47 4d d0	 cmova	 ecx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1372 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  0016c	83 c4 10	 add	 esp, 16			; 00000010H
  0016f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	ff 75 e0	 push	 DWORD PTR __Buf$[ebp+16]
  00179	51		 push	 ecx
  0017a	e8 00 00 00 00	 call	 _sprintf_s
  0017f	83 c4 18	 add	 esp, 24			; 00000018H

; 1375 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  00182	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00185	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 444  :         const value_type* _Result = _Bx._Buf;

  00189	8d 55 d0	 lea	 edx, DWORD PTR __Buf$[ebp]

; 445  :         if (_Large_mode_engaged()) {

  0018c	0f 47 55 d0	 cmova	 edx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1375 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  00190	ff 75 c8	 push	 DWORD PTR __Is_finite$[ebp]
  00193	50		 push	 eax
  00194	52		 push	 edx
  00195	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00198	56		 push	 esi
  00199	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0019c	8b 75 bc	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0019f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  001a2	56		 push	 esi
  001a3	e8 00 00 00 00	 call	 ??$_Fput_v3@$0A@@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@1@V21@AAVios_base@1@DPBDI_N@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Fput_v3<0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001a8	8b 4d e4	 mov	 ecx, DWORD PTR __Buf$[ebp+20]
  001ab	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  001ae	76 28		 jbe	 SHORT $LN98@do_put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b0	8b 55 d0	 mov	 edx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001b3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b4	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bc	72 10		 jb	 SHORT $LN103@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001be	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c1	83 c1 23	 add	 ecx, 35			; 00000023H
  001c4	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c6	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cc	77 29		 ja	 SHORT $LN115@do_put
$LN103@do_put:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ce	51		 push	 ecx
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d5	83 c4 08	 add	 esp, 8
$LN98@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1375 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  001d8	8b c6		 mov	 eax, esi

; 1376 :     }

  001da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e4	59		 pop	 ecx
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	33 cd		 xor	 ecx, ebp
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c2 1c 00	 ret	 28			; 0000001cH
$LN115@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f7	6a 00		 push	 0
  001f9	6a 00		 push	 0
  001fb	6a 00		 push	 0
  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	e8 00 00 00 00	 call	 __invoke_watson
$LN113@do_put:
  00206	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DN@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z
_TEXT	SEGMENT
_this$1$ = -80						; size = 4
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1343 :         unsigned long long _Val) const { // put formatted unsigned long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00019	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1541 :         *_Ptr++    = '%';

  0001c	c6 45 f4 25	 mov	 BYTE PTR __Fmt$[ebp], 37 ; 00000025H

; 1344 :         char _Buf[2 * _Max_int_dig];
; 1345 :         char _Fmt[8];
; 1346 : 
; 1347 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00020	8b 57 14	 mov	 edx, DWORD PTR [edi+20]

; 1543 :         if (_Flags & ios_base::showpos) {

  00023	8b f2		 mov	 esi, edx
  00025	83 e6 20	 and	 esi, 32			; 00000020H
  00028	74 04		 je	 SHORT $LN4@do_put

; 1544 :             *_Ptr++ = '+';

  0002a	c6 45 f5 2b	 mov	 BYTE PTR __Fmt$[ebp+1], 43 ; 0000002bH
$LN4@do_put:

; 1545 :         }
; 1546 : 
; 1547 :         if (_Flags & ios_base::showbase) {

  0002e	85 f6		 test	 esi, esi
  00030	8d 45 f5	 lea	 eax, DWORD PTR __Fmt$[ebp+1]
  00033	8d 4d f6	 lea	 ecx, DWORD PTR __Fmt$[ebp+2]
  00036	0f 45 c1	 cmovne	 eax, ecx
  00039	f6 c2 08	 test	 dl, 8
  0003c	74 04		 je	 SHORT $LN5@do_put

; 1548 :             *_Ptr++ = '#';

  0003e	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00041	40		 inc	 eax
$LN5@do_put:

; 1549 :         }
; 1550 : 
; 1551 :         if (_Spec[0] != 'L') {
; 1552 :             *_Ptr++ = _Spec[0]; // qualifier
; 1553 :         } else { // change L to I64
; 1554 :             *_Ptr++ = 'I';
; 1555 :             *_Ptr++ = '6';
; 1556 :             *_Ptr++ = '4';
; 1557 :         }
; 1558 : 
; 1559 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  00042	8b ca		 mov	 ecx, edx
  00044	66 c7 00 49 36	 mov	 WORD PTR [eax], 13897	; 00003649H
  00049	81 e1 00 0e 00
	00		 and	 ecx, 3584		; 00000e00H
  0004f	c6 40 02 34	 mov	 BYTE PTR [eax+2], 52	; 00000034H

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00053	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00059	75 04		 jne	 SHORT $LN11@do_put
  0005b	b2 6f		 mov	 dl, 111			; 0000006fH
  0005d	eb 17		 jmp	 SHORT $LN10@do_put
$LN11@do_put:
  0005f	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  00065	74 04		 je	 SHORT $LN9@do_put
  00067	b2 75		 mov	 dl, 117			; 00000075H
  00069	eb 0b		 jmp	 SHORT $LN10@do_put
$LN9@do_put:
  0006b	c0 e2 03	 shl	 dl, 3
  0006e	f6 d2		 not	 dl
  00070	80 e2 20	 and	 dl, 32			; 00000020H
  00073	80 ca 58	 or	 dl, 88			; 00000058H
$LN10@do_put:

; 1344 :         char _Buf[2 * _Max_int_dig];
; 1345 :         char _Fmt[8];
; 1346 : 
; 1347 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00076	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00079	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 1344 :         char _Buf[2 * _Max_int_dig];
; 1345 :         char _Fmt[8];
; 1346 : 
; 1347 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0007c	ff 75 1c	 push	 DWORD PTR __Val$[ebp]

; 1564 :         *_Ptr                         = '\0';

  0007f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 1344 :         char _Buf[2 * _Max_int_dig];
; 1345 :         char _Fmt[8];
; 1346 : 
; 1347 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00083	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00086	50		 push	 eax
  00087	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0008a	6a 40		 push	 64			; 00000040H
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _sprintf_s
  00092	50		 push	 eax
  00093	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00096	50		 push	 eax
  00097	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0009a	57		 push	 edi
  0009b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0009e	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  000a1	53		 push	 ebx
  000a2	ff 75 b0	 push	 DWORD PTR _this$1$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1348 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "Lu", _Iosbase.flags()), _Val)));
; 1349 :     }

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	83 c4 34	 add	 esp, 52			; 00000034H
  000b0	8b c3		 mov	 eax, ebx
  000b2	33 cd		 xor	 ecx, ebp
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_K@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z
_TEXT	SEGMENT
_this$1$ = -80						; size = 4
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 8
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1334 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long long _Val) const { // put formatted long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00019	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1541 :         *_Ptr++    = '%';

  0001c	c6 45 f4 25	 mov	 BYTE PTR __Fmt$[ebp], 37 ; 00000025H

; 1335 :         char _Buf[2 * _Max_int_dig];
; 1336 :         char _Fmt[8];
; 1337 : 
; 1338 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00020	8b 57 14	 mov	 edx, DWORD PTR [edi+20]

; 1543 :         if (_Flags & ios_base::showpos) {

  00023	8b f2		 mov	 esi, edx
  00025	83 e6 20	 and	 esi, 32			; 00000020H
  00028	74 04		 je	 SHORT $LN4@do_put

; 1544 :             *_Ptr++ = '+';

  0002a	c6 45 f5 2b	 mov	 BYTE PTR __Fmt$[ebp+1], 43 ; 0000002bH
$LN4@do_put:

; 1545 :         }
; 1546 : 
; 1547 :         if (_Flags & ios_base::showbase) {

  0002e	85 f6		 test	 esi, esi
  00030	8d 45 f5	 lea	 eax, DWORD PTR __Fmt$[ebp+1]
  00033	8d 4d f6	 lea	 ecx, DWORD PTR __Fmt$[ebp+2]
  00036	0f 45 c1	 cmovne	 eax, ecx
  00039	f6 c2 08	 test	 dl, 8
  0003c	74 04		 je	 SHORT $LN5@do_put

; 1548 :             *_Ptr++ = '#';

  0003e	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00041	40		 inc	 eax
$LN5@do_put:

; 1549 :         }
; 1550 : 
; 1551 :         if (_Spec[0] != 'L') {
; 1552 :             *_Ptr++ = _Spec[0]; // qualifier
; 1553 :         } else { // change L to I64
; 1554 :             *_Ptr++ = 'I';
; 1555 :             *_Ptr++ = '6';
; 1556 :             *_Ptr++ = '4';
; 1557 :         }
; 1558 : 
; 1559 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  00042	8b ca		 mov	 ecx, edx
  00044	66 c7 00 49 36	 mov	 WORD PTR [eax], 13897	; 00003649H
  00049	81 e1 00 0e 00
	00		 and	 ecx, 3584		; 00000e00H
  0004f	c6 40 02 34	 mov	 BYTE PTR [eax+2], 52	; 00000034H

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00053	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00059	75 04		 jne	 SHORT $LN11@do_put
  0005b	b2 6f		 mov	 dl, 111			; 0000006fH
  0005d	eb 17		 jmp	 SHORT $LN10@do_put
$LN11@do_put:
  0005f	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  00065	74 04		 je	 SHORT $LN9@do_put
  00067	b2 64		 mov	 dl, 100			; 00000064H
  00069	eb 0b		 jmp	 SHORT $LN10@do_put
$LN9@do_put:
  0006b	c0 e2 03	 shl	 dl, 3
  0006e	f6 d2		 not	 dl
  00070	80 e2 20	 and	 dl, 32			; 00000020H
  00073	80 ca 58	 or	 dl, 88			; 00000058H
$LN10@do_put:

; 1335 :         char _Buf[2 * _Max_int_dig];
; 1336 :         char _Fmt[8];
; 1337 : 
; 1338 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00076	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00079	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 1335 :         char _Buf[2 * _Max_int_dig];
; 1336 :         char _Fmt[8];
; 1337 : 
; 1338 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0007c	ff 75 1c	 push	 DWORD PTR __Val$[ebp]

; 1564 :         *_Ptr                         = '\0';

  0007f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 1335 :         char _Buf[2 * _Max_int_dig];
; 1336 :         char _Fmt[8];
; 1337 : 
; 1338 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00083	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00086	50		 push	 eax
  00087	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0008a	6a 40		 push	 64			; 00000040H
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _sprintf_s
  00092	50		 push	 eax
  00093	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00096	50		 push	 eax
  00097	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0009a	57		 push	 edi
  0009b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0009e	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  000a1	53		 push	 ebx
  000a2	ff 75 b0	 push	 DWORD PTR _this$1$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1339 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "Ld", _Iosbase.flags()), _Val)));
; 1340 :     }

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	83 c4 34	 add	 esp, 52			; 00000034H
  000b0	8b c3		 mov	 eax, ebx
  000b2	33 cd		 xor	 ecx, ebp
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_J@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z
_TEXT	SEGMENT
_this$1$ = -80						; size = 4
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1325 :         unsigned long _Val) const { // put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00019	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1326 :         char _Buf[2 * _Max_int_dig];
; 1327 :         char _Fmt[6];
; 1328 : 
; 1329 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 1543 :         if (_Flags & ios_base::showpos) {

  0001f	8b d0		 mov	 edx, eax
  00021	c6 45 f4 25	 mov	 BYTE PTR __Fmt$[ebp], 37 ; 00000025H
  00025	83 e2 20	 and	 edx, 32			; 00000020H
  00028	74 04		 je	 SHORT $LN4@do_put

; 1544 :             *_Ptr++ = '+';

  0002a	c6 45 f5 2b	 mov	 BYTE PTR __Fmt$[ebp+1], 43 ; 0000002bH
$LN4@do_put:

; 1545 :         }
; 1546 : 
; 1547 :         if (_Flags & ios_base::showbase) {

  0002e	8b 5d b0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00031	8d 4d f5	 lea	 ecx, DWORD PTR __Fmt$[ebp+1]
  00034	85 d2		 test	 edx, edx
  00036	8d 55 f6	 lea	 edx, DWORD PTR __Fmt$[ebp+2]
  00039	0f 45 ca	 cmovne	 ecx, edx
  0003c	a8 08		 test	 al, 8
  0003e	74 04		 je	 SHORT $LN5@do_put

; 1548 :             *_Ptr++ = '#';

  00040	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00043	41		 inc	 ecx
$LN5@do_put:

; 1549 :         }
; 1550 : 
; 1551 :         if (_Spec[0] != 'L') {
; 1552 :             *_Ptr++ = _Spec[0]; // qualifier
; 1553 :         } else { // change L to I64
; 1554 :             *_Ptr++ = 'I';
; 1555 :             *_Ptr++ = '6';
; 1556 :             *_Ptr++ = '4';
; 1557 :         }
; 1558 : 
; 1559 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  00044	8b d0		 mov	 edx, eax
  00046	c6 01 6c	 mov	 BYTE PTR [ecx], 108	; 0000006cH
  00049	81 e2 00 0e 00
	00		 and	 edx, 3584		; 00000e00H

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  0004f	81 fa 00 04 00
	00		 cmp	 edx, 1024		; 00000400H
  00055	75 04		 jne	 SHORT $LN11@do_put
  00057	b0 6f		 mov	 al, 111			; 0000006fH
  00059	eb 15		 jmp	 SHORT $LN10@do_put
$LN11@do_put:
  0005b	81 fa 00 08 00
	00		 cmp	 edx, 2048		; 00000800H
  00061	74 04		 je	 SHORT $LN9@do_put
  00063	b0 75		 mov	 al, 117			; 00000075H
  00065	eb 09		 jmp	 SHORT $LN10@do_put
$LN9@do_put:
  00067	c0 e0 03	 shl	 al, 3
  0006a	f6 d0		 not	 al
  0006c	24 20		 and	 al, 32			; 00000020H
  0006e	0c 58		 or	 al, 88			; 00000058H
$LN10@do_put:

; 1326 :         char _Buf[2 * _Max_int_dig];
; 1327 :         char _Fmt[6];
; 1328 : 
; 1329 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00070	ff 75 1c	 push	 DWORD PTR __Val$[ebp]

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00073	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 1326 :         char _Buf[2 * _Max_int_dig];
; 1327 :         char _Fmt[6];
; 1328 : 
; 1329 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00076	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00079	50		 push	 eax
  0007a	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]

; 1564 :         *_Ptr                         = '\0';

  0007d	c6 41 02 00	 mov	 BYTE PTR [ecx+2], 0

; 1326 :         char _Buf[2 * _Max_int_dig];
; 1327 :         char _Fmt[6];
; 1328 : 
; 1329 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00081	6a 40		 push	 64			; 00000040H
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _sprintf_s
  00089	50		 push	 eax
  0008a	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0008d	50		 push	 eax
  0008e	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00091	56		 push	 esi
  00092	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00095	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00098	57		 push	 edi
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1330 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "lu", _Iosbase.flags()), _Val)));
; 1331 :     }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	83 c4 30	 add	 esp, 48			; 00000030H
  000a5	8b c7		 mov	 eax, edi
  000a7	33 cd		 xor	 ecx, ebp
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DK@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z
_TEXT	SEGMENT
_this$1$ = -80						; size = 4
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 4
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1316 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long _Val) const { // put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00019	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1317 :         char _Buf[2 * _Max_int_dig];
; 1318 :         char _Fmt[6];
; 1319 : 
; 1320 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 1543 :         if (_Flags & ios_base::showpos) {

  0001f	8b d0		 mov	 edx, eax
  00021	c6 45 f4 25	 mov	 BYTE PTR __Fmt$[ebp], 37 ; 00000025H
  00025	83 e2 20	 and	 edx, 32			; 00000020H
  00028	74 04		 je	 SHORT $LN4@do_put

; 1544 :             *_Ptr++ = '+';

  0002a	c6 45 f5 2b	 mov	 BYTE PTR __Fmt$[ebp+1], 43 ; 0000002bH
$LN4@do_put:

; 1545 :         }
; 1546 : 
; 1547 :         if (_Flags & ios_base::showbase) {

  0002e	8b 5d b0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00031	8d 4d f5	 lea	 ecx, DWORD PTR __Fmt$[ebp+1]
  00034	85 d2		 test	 edx, edx
  00036	8d 55 f6	 lea	 edx, DWORD PTR __Fmt$[ebp+2]
  00039	0f 45 ca	 cmovne	 ecx, edx
  0003c	a8 08		 test	 al, 8
  0003e	74 04		 je	 SHORT $LN5@do_put

; 1548 :             *_Ptr++ = '#';

  00040	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00043	41		 inc	 ecx
$LN5@do_put:

; 1549 :         }
; 1550 : 
; 1551 :         if (_Spec[0] != 'L') {
; 1552 :             *_Ptr++ = _Spec[0]; // qualifier
; 1553 :         } else { // change L to I64
; 1554 :             *_Ptr++ = 'I';
; 1555 :             *_Ptr++ = '6';
; 1556 :             *_Ptr++ = '4';
; 1557 :         }
; 1558 : 
; 1559 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  00044	8b d0		 mov	 edx, eax
  00046	c6 01 6c	 mov	 BYTE PTR [ecx], 108	; 0000006cH
  00049	81 e2 00 0e 00
	00		 and	 edx, 3584		; 00000e00H

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  0004f	81 fa 00 04 00
	00		 cmp	 edx, 1024		; 00000400H
  00055	75 04		 jne	 SHORT $LN11@do_put
  00057	b0 6f		 mov	 al, 111			; 0000006fH
  00059	eb 15		 jmp	 SHORT $LN10@do_put
$LN11@do_put:
  0005b	81 fa 00 08 00
	00		 cmp	 edx, 2048		; 00000800H
  00061	74 04		 je	 SHORT $LN9@do_put
  00063	b0 64		 mov	 al, 100			; 00000064H
  00065	eb 09		 jmp	 SHORT $LN10@do_put
$LN9@do_put:
  00067	c0 e0 03	 shl	 al, 3
  0006a	f6 d0		 not	 al
  0006c	24 20		 and	 al, 32			; 00000020H
  0006e	0c 58		 or	 al, 88			; 00000058H
$LN10@do_put:

; 1317 :         char _Buf[2 * _Max_int_dig];
; 1318 :         char _Fmt[6];
; 1319 : 
; 1320 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00070	ff 75 1c	 push	 DWORD PTR __Val$[ebp]

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00073	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 1317 :         char _Buf[2 * _Max_int_dig];
; 1318 :         char _Fmt[6];
; 1319 : 
; 1320 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00076	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00079	50		 push	 eax
  0007a	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]

; 1564 :         *_Ptr                         = '\0';

  0007d	c6 41 02 00	 mov	 BYTE PTR [ecx+2], 0

; 1317 :         char _Buf[2 * _Max_int_dig];
; 1318 :         char _Fmt[6];
; 1319 : 
; 1320 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00081	6a 40		 push	 64			; 00000040H
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _sprintf_s
  00089	50		 push	 eax
  0008a	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0008d	50		 push	 eax
  0008e	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00091	56		 push	 esi
  00092	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00095	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00098	57		 push	 edi
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 ?_Iput@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DPADI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Iput

; 1321 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "ld", _Iosbase.flags()), _Val)));
; 1322 :     }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	83 c4 30	 add	 esp, 48			; 00000030H
  000a5	8b c7		 mov	 eax, edi
  000a7	33 cd		 xor	 ecx, ebp
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@DJ@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -84				; size = 4
$T2 = -80						; size = 8
$T3 = -80						; size = 8
$T4 = -80						; size = 8
__Punct_fac$1$ = -76					; size = 4
_this$GSCopy$1$ = -72					; size = 4
__Fill$GSCopy$ = -68					; size = 1
$T5 = -64						; size = 24
$T6 = -64						; size = 24
__Str$7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 1
__Val$ = 28						; size = 1
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put, COMDAT
; _this$ = ecx

; 1284 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, bool _Val) const { // put formatted bool to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00030	8a 45 18	 mov	 al, BYTE PTR __Fill$[ebp]
  00033	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00036	89 75 ac	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], esi

; 1285 :         if (!(_Iosbase.flags() & ios_base::boolalpha)) {

  00039	f7 47 14 00 40
	00 00		 test	 DWORD PTR [edi+20], 16384 ; 00004000H
  00040	88 45 bc	 mov	 BYTE PTR __Fill$GSCopy$[ebp], al
  00043	75 1a		 jne	 SHORT $LN2@do_put

; 1286 :             return do_put(_Dest, _Iosbase, _Fill, static_cast<long>(_Val));

  00045	0f b6 45 1c	 movzx	 eax, BYTE PTR __Val$[ebp]
  00049	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004b	50		 push	 eax
  0004c	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  0004f	57		 push	 edi
  00050	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00053	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00056	56		 push	 esi
  00057	ff 52 24	 call	 DWORD PTR [edx+36]
  0005a	e9 60 01 00 00	 jmp	 $LN82@do_put
$LN2@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  0005f	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00062	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 269  :         _Ptr->_Incref();

  00065	8b ce		 mov	 ecx, esi
  00067	89 75 b4	 mov	 DWORD PTR $T2[ebp+4], esi
  0006a	8b 06		 mov	 eax, DWORD PTR [esi]
  0006c	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1288 :             const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  0006f	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00072	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@D@std@@@std@@YAABV?$numpunct@D@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<char> >
  0007f	83 c4 04	 add	 esp, 4
  00082	89 45 b4	 mov	 DWORD PTR __Punct_fac$1$[ebp], eax
  00085	85 f6		 test	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  00087	74 1a		 je	 SHORT $LN26@do_put

; 355  :             delete _Ptr->_Decref();

  00089	8b 16		 mov	 edx, DWORD PTR [esi]
  0008b	8b ce		 mov	 ecx, esi
  0008d	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00090	ff d2		 call	 edx
  00092	85 c0		 test	 eax, eax
  00094	74 0a		 je	 SHORT $LN256@do_put
  00096	8b 08		 mov	 ecx, DWORD PTR [eax]
  00098	6a 01		 push	 1
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	8b c8		 mov	 ecx, eax
  0009e	ff d2		 call	 edx
$LN256@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000a0	8b 45 b4	 mov	 eax, DWORD PTR __Punct_fac$1$[ebp]
$LN26@do_put:
  000a3	0f 57 c0	 xorps	 xmm0, xmm0

; 860  :         _My_data._Mysize = 0;

  000a6	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+16], 0

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000ad	0f 11 45 d8	 movups	 XMMWORD PTR __Str$7[ebp], xmm0

; 861  :         _My_data._Myres  = _Small_string_capacity;

  000b1	c7 45 ec 0f 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+20], 15 ; 0000000fH

; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000b8	c6 45 d8 00	 mov	 BYTE PTR __Str$7[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1290 :             if (_Val) {

  000bc	80 7d 1c 00	 cmp	 BYTE PTR __Val$[ebp], 0
  000c0	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  000c3	8b 10		 mov	 edx, DWORD PTR [eax]
  000c5	51		 push	 ecx
  000c6	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000cd	8b c8		 mov	 ecx, eax
  000cf	74 05		 je	 SHORT $LN4@do_put

; 116  :         return do_truename();

  000d1	ff 52 1c	 call	 DWORD PTR [edx+28]

; 1291 :                 _Str.assign(_Punct_fac.truename());
; 1292 :             } else {

  000d4	eb 03		 jmp	 SHORT $LN259@do_put
$LN4@do_put:

; 112  :         return do_falsename();

  000d6	ff 52 18	 call	 DWORD PTR [edx+24]
$LN259@do_put:

; 1293 :                 _Str.assign(_Punct_fac.falsename());
; 1294 :             }
; 1295 : 
; 1296 :             size_t _Fillcount;
; 1297 :             if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Str.size()) {

  000d9	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  000dd	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T6[ebp]
  000e1	8b 77 20	 mov	 esi, DWORD PTR [edi+32]
  000e4	0f 11 45 d8	 movups	 XMMWORD PTR __Str$7[ebp], xmm0
  000e8	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  000ed	66 0f d6 45 e8	 movq	 QWORD PTR __Str$7[ebp+16], xmm0
  000f2	8b 45 e8	 mov	 eax, DWORD PTR __Str$7[ebp+16]
  000f5	7c 0e		 jl	 SHORT $LN8@do_put
  000f7	7f 04		 jg	 SHORT $LN254@do_put
  000f9	85 f6		 test	 esi, esi
  000fb	74 08		 je	 SHORT $LN8@do_put
$LN254@do_put:
  000fd	3b f0		 cmp	 esi, eax
  000ff	76 04		 jbe	 SHORT $LN8@do_put

; 1299 :             } else {
; 1300 :                 _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Str.size();

  00101	2b f0		 sub	 esi, eax
  00103	eb 02		 jmp	 SHORT $LN7@do_put
$LN8@do_put:

; 1298 :                 _Fillcount = 0;

  00105	33 f6		 xor	 esi, esi
$LN7@do_put:

; 1301 :             }
; 1302 : 
; 1303 :             if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left) { // put leading fill

  00107	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  0010a	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  0010f	83 f8 40	 cmp	 eax, 64			; 00000040H
  00112	74 28		 je	 SHORT $LN255@do_put

; 1304 :                 _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  00114	56		 push	 esi
  00115	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00118	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  0011b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0011e	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00121	50		 push	 eax
  00122	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00125	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
  0012a	83 c4 18	 add	 esp, 24			; 00000018H

; 1305 :                 _Fillcount = 0;

  0012d	33 f6		 xor	 esi, esi
  0012f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00131	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00134	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00137	89 55 10	 mov	 DWORD PTR __Dest$[ebp+4], edx
  0013a	eb 06		 jmp	 SHORT $LN9@do_put
$LN255@do_put:

; 1301 :             }
; 1302 : 
; 1303 :             if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left) { // put leading fill

  0013c	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp+4]
  0013f	8b 4d 0c	 mov	 ecx, DWORD PTR __Dest$[ebp]
$LN9@do_put:

; 1307 :             _Dest = _Put(_Dest, _Str.c_str(), _Str.size()); // put field

  00142	ff 75 e8	 push	 DWORD PTR __Str$7[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00145	83 7d ec 0f	 cmp	 DWORD PTR __Str$7[ebp+20], 15 ; 0000000fH

; 444  :         const value_type* _Result = _Bx._Buf;

  00149	8d 45 d8	 lea	 eax, DWORD PTR __Str$7[ebp]

; 445  :         if (_Large_mode_engaged()) {

  0014c	0f 47 45 d8	 cmova	 eax, DWORD PTR __Str$7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1307 :             _Dest = _Put(_Dest, _Str.c_str(), _Str.size()); // put field

  00150	50		 push	 eax
  00151	52		 push	 edx
  00152	51		 push	 ecx
  00153	8d 45 b0	 lea	 eax, DWORD PTR $T4[ebp]
  00156	50		 push	 eax
  00157	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0015a	e8 00 00 00 00	 call	 ?_Put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@PBDI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Put

; 1309 :             return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  0015f	56		 push	 esi
  00160	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$[ebp]
  00163	8b 75 ac	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  00166	8b 08		 mov	 ecx, DWORD PTR [eax]
  00168	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0016b	50		 push	 eax
  0016c	51		 push	 ecx
  0016d	56		 push	 esi
  0016e	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00171	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  00174	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  00177	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  0017e	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1309 :             return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00185	e8 00 00 00 00	 call	 ?_Rep@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@DI@Z ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::_Rep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0018a	8b 45 ec	 mov	 eax, DWORD PTR __Str$7[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1309 :             return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  0018d	83 c4 30	 add	 esp, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00190	83 f8 0f	 cmp	 eax, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  00193	76 2a		 jbe	 SHORT $LN82@do_put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00195	8b 55 d8	 mov	 edx, DWORD PTR __Str$7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00198	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0019b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0019d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001a3	72 10		 jb	 SHORT $LN87@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001a5	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001a8	83 c1 23	 add	 ecx, 35			; 00000023H
  001ab	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ad	83 c0 fc	 add	 eax, -4			; fffffffcH
  001b0	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001b3	77 29		 ja	 SHORT $LN261@do_put
$LN87@do_put:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001b5	51		 push	 ecx
  001b6	52		 push	 edx
  001b7	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001bc	83 c4 08	 add	 esp, 8
$LN82@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1311 :     }

  001bf	8b c6		 mov	 eax, esi
  001c1	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001c4	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001cb	59		 pop	 ecx
  001cc	5f		 pop	 edi
  001cd	5e		 pop	 esi
  001ce	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001d1	33 cd		 xor	 ecx, ebp
  001d3	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001d8	8b e5		 mov	 esp, ebp
  001da	5d		 pop	 ebp
  001db	c2 18 00	 ret	 24			; 00000018H
$LN261@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001de	6a 00		 push	 0
  001e0	6a 00		 push	 0
  001e2	6a 00		 push	 0
  001e4	6a 00		 push	 0
  001e6	6a 00		 push	 0
  001e8	e8 00 00 00 00	 call	 __invoke_watson
$LN258@do_put:
  001ed	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Str$7[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@DU?$char_traits@D@std@@@2@V32@AAVios_base@2@D_N@Z ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::do_put
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >, COMDAT
; _this$ = ecx

; 1224 :     __CLR_OR_THIS_CALL ~num_put() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::~num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -76						; size = 52
__Lock$3 = -24						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
__Psave$1$ = -20					; size = 4
__Lock$6 = -16						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$8 = 8					; size = 4
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >, COMDAT

; 435  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	33 db		 xor	 ebx, ebx

; 436  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	53		 push	 ebx
  0002e	89 5d e8	 mov	 DWORD PTR $T4[ebp], ebx
  00031	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00036	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id

; 437  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00044	89 45 ec	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00047	85 ff		 test	 edi, edi
  00049	75 2f		 jne	 SHORT $LN11@use_facet

; 92   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  0004b	57		 push	 edi
  0004c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0004f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 93   :                 if (_Id == 0) {

  00054	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, edi ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
  0005a	75 10		 jne	 SHORT $LN12@use_facet

; 94   :                     _Id = static_cast<size_t>(++_Id_cnt);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00061	40		 inc	 eax
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00067	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN12@use_facet:

; 95   :                 }
; 96   :                 _END_LOCK()

  0006c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00074	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
$LN11@use_facet:

; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0007a	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  0007d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00084	89 4d f0	 mov	 DWORD PTR $T7[ebp], ecx
  00087	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008a	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  0008d	73 16		 jae	 SHORT $LN19@use_facet
  0008f	0f ae e8	 lfence
  00092	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00095	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00098	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  0009b	85 f6		 test	 esi, esi
  0009d	0f 85 b1 00 00
	00		 jne	 $LN68@use_facet
  000a3	eb 05		 jmp	 SHORT $LN72@use_facet
$LN19@use_facet:

; 374  :     }
; 375  : 
; 376  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000a5	33 f6		 xor	 esi, esi
  000a7	89 4d f0	 mov	 DWORD PTR $T7[ebp], ecx
$LN72@use_facet:

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  000aa	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000ae	74 16		 je	 SHORT $LN14@use_facet

; 379  :             return _Facptr; // found facet or not transparent
; 380  :         }
; 381  : 
; 382  :         // look in current locale
; 383  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000b0	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 384  :         if (_Id < _Ptr0->_Facetcount) {

  000b5	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000b8	73 14		 jae	 SHORT $LN73@use_facet

; 385  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000ba	0f ae e8	 lfence
  000bd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c0	8b 75 f0	 mov	 esi, DWORD PTR $T7[ebp]
  000c3	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 438  : 
; 439  :     const size_t _Id         = _Facet::id._Get_index();
; 440  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 441  : 
; 442  :     if (!_Pf) {

  000c6	85 f6		 test	 esi, esi
  000c8	0f 85 86 00 00
	00		 jne	 $LN68@use_facet
$LN73@use_facet:

; 443  :         if (_Psave) {

  000ce	8b 45 ec	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000d1	85 c0		 test	 eax, eax
  000d3	74 04		 je	 SHORT $LN3@use_facet

; 444  :             _Pf = _Psave; // lazy facet already allocated

  000d5	8b f0		 mov	 esi, eax

; 445  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000d7	eb 7b		 jmp	 SHORT $LN68@use_facet
$LN3@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1215 :             *_Ppf = new num_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  000d9	6a 08		 push	 8
  000db	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e0	8b f0		 mov	 esi, eax
  000e2	83 c4 04	 add	 esp, 4
  000e5	89 75 ec	 mov	 DWORD PTR $T5[ebp], esi
  000e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ec	85 f6		 test	 esi, esi
  000ee	74 38		 je	 SHORT $LN24@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f0	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  000f3	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f6	85 c9		 test	 ecx, ecx
  000f8	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  000fa	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000fd	85 c0		 test	 eax, eax
  000ff	75 0a		 jne	 SHORT $LN33@use_facet
  00101	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00104	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  00106	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1215 :             *_Ppf = new num_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  0010b	50		 push	 eax
  0010c	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  0010f	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00114	bb 01 00 00 00	 mov	 ebx, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 143  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  00119	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1235 :     __CLR_OR_THIS_CALL num_put(const _Locinfo& _Lobj, size_t _Refs = 0) : locale::facet(_Refs) {

  00120	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@6B@

; 1215 :             *_Ppf = new num_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  00126	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  00128	33 f6		 xor	 esi, esi
$LN25@use_facet:
  0012a	f6 c3 01	 test	 bl, 1
  0012d	74 08		 je	 SHORT $LN29@use_facet
  0012f	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00132	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00137	89 75 08	 mov	 DWORD PTR __Psave_guard$8[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 458  :             _Facet_Register(_Pfmod);

  0013a	56		 push	 esi
  0013b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0013f	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 459  : #endif // ^^^ !defined(_M_CEE) ^^^
; 460  : 
; 461  :             _Pfmod->_Incref();

  00144	8b 16		 mov	 edx, DWORD PTR [esi]
  00146	83 c4 04	 add	 esp, 4
  00149	8b ce		 mov	 ecx, esi
  0014b	ff 52 04	 call	 DWORD PTR [edx+4]

; 462  :             _Facetptr<_Facet>::_Psave = _Psave;

  0014e	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >::_Psave
$LN68@use_facet:

; 463  :             _Pf                       = _Psave;
; 464  : 
; 465  :             (void) _Psave_guard.release();
; 466  :         }
; 467  :     }
; 468  : 
; 469  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00154	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00157	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0015c	8b c6		 mov	 eax, esi

; 470  :     _END_LOCK()
; 471  : } // end of use_facet body

  0015e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00161	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00168	59		 pop	 ecx
  00169	5f		 pop	 edi
  0016a	5e		 pop	 esi
  0016b	5b		 pop	 ebx
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$2:
  00008	6a 08		 push	 8
  0000a	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$8[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
; Function compile flags: /Ogtp
;	COMDAT ??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAEPAXI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ch$ = 24						; size = 2
__Count$ = 28						; size = 4
?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep, COMDAT

; 1631 :     _OutIt __CLRCALL_OR_CDECL _Rep(_OutIt _Dest, _Elem _Ch, size_t _Count) const { // put _Count * _Ch to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1632 :         for (; 0 < _Count; --_Count, (void) ++_Dest) {

  00003	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00006	56		 push	 esi
  00007	8b 75 1c	 mov	 esi, DWORD PTR __Count$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	74 54		 je	 SHORT $LN3@Rep
  0000e	53		 push	 ebx
  0000f	57		 push	 edi
  00010	8b 7d 18	 mov	 edi, DWORD PTR __Ch$[ebp]
  00013	bb ff ff 00 00	 mov	 ebx, 65535		; 0000ffffH
$LL4@Rep:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00018	85 c0		 test	 eax, eax
  0001a	74 3b		 je	 SHORT $LN8@Rep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  0001c	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001f	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00022	74 1e		 je	 SHORT $LN12@Rep
  00024	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00027	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00029	85 c9		 test	 ecx, ecx
  0002b	7e 15		 jle	 SHORT $LN12@Rep

; 256  :         --*_IPcount;

  0002d	49		 dec	 ecx
  0002e	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  00030	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00033	8b 11		 mov	 edx, DWORD PTR [ecx]
  00035	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00038	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0003a	66 89 3a	 mov	 WORD PTR [edx], di
  0003d	0f b7 c7	 movzx	 eax, di
  00040	eb 0d		 jmp	 SHORT $LN13@Rep
$LN12@Rep:
  00042	8b 08		 mov	 ecx, DWORD PTR [eax]
  00044	57		 push	 edi
  00045	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00048	8b c8		 mov	 ecx, eax
  0004a	ff d2		 call	 edx
  0004c	0f b7 c0	 movzx	 eax, ax
$LN13@Rep:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  0004f	66 3b d8	 cmp	 bx, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00052	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00055	75 04		 jne	 SHORT $LN2@Rep
$LN8@Rep:

; 527  :             _Failed = true;

  00057	c6 45 10 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@Rep:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1632 :         for (; 0 < _Count; --_Count, (void) ++_Dest) {

  0005b	83 ee 01	 sub	 esi, 1
  0005e	75 b8		 jne	 SHORT $LL4@Rep
  00060	5f		 pop	 edi
  00061	5b		 pop	 ebx
$LN3@Rep:

; 1633 :             *_Dest = _Ch;
; 1634 :         }
; 1635 : 
; 1636 :         return _Dest;

  00062	8b 55 0c	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  00065	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  00068	5e		 pop	 esi
  00069	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0006c	8b c2		 mov	 eax, edx
  0006e	89 0a		 mov	 DWORD PTR [edx], ecx

; 1637 :     }

  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Ptr$ = 24						; size = 4
__Count$ = 28						; size = 4
?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put, COMDAT

; 1623 :         _OutIt _Dest, const _Elem* _Ptr, size_t _Count) const { // put [_Ptr, _Ptr + _Count) to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1624 :         for (; 0 < _Count; --_Count, (void) ++_Dest, ++_Ptr) {

  00003	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00006	56		 push	 esi
  00007	8b 75 1c	 mov	 esi, DWORD PTR __Count$[ebp]
  0000a	85 f6		 test	 esi, esi
  0000c	74 59		 je	 SHORT $LN3@Put
  0000e	53		 push	 ebx
  0000f	57		 push	 edi
  00010	8b 7d 18	 mov	 edi, DWORD PTR __Ptr$[ebp]
$LL4@Put:

; 1625 :             *_Dest = *_Ptr;

  00013	0f b7 1f	 movzx	 ebx, WORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00016	85 c0		 test	 eax, eax
  00018	74 3f		 je	 SHORT $LN8@Put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  0001a	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0001d	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00020	74 1d		 je	 SHORT $LN12@Put
  00022	8b 50 30	 mov	 edx, DWORD PTR [eax+48]
  00025	8b 0a		 mov	 ecx, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00027	85 c9		 test	 ecx, ecx
  00029	7e 14		 jle	 SHORT $LN12@Put

; 256  :         --*_IPcount;

  0002b	49		 dec	 ecx
  0002c	89 0a		 mov	 DWORD PTR [edx], ecx

; 257  :         return (*_IPnext)++;

  0002e	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00031	8b 11		 mov	 edx, DWORD PTR [ecx]
  00033	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00036	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00038	8b c3		 mov	 eax, ebx
  0003a	66 89 1a	 mov	 WORD PTR [edx], bx
  0003d	eb 0d		 jmp	 SHORT $LN13@Put
$LN12@Put:
  0003f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00041	53		 push	 ebx
  00042	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00045	8b c8		 mov	 ecx, eax
  00047	ff d2		 call	 edx
  00049	0f b7 c0	 movzx	 eax, ax
$LN13@Put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  0004c	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00051	66 3b c8	 cmp	 cx, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 526  :         if (!_Strbuf || traits_type::eq_int_type(_Traits::eof(), _Strbuf->sputc(_Right))) {

  00054	8b 45 14	 mov	 eax, DWORD PTR __Dest$[ebp+4]
  00057	75 04		 jne	 SHORT $LN2@Put
$LN8@Put:

; 527  :             _Failed = true;

  00059	c6 45 10 01	 mov	 BYTE PTR __Dest$[ebp], 1
$LN2@Put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1624 :         for (; 0 < _Count; --_Count, (void) ++_Dest, ++_Ptr) {

  0005d	83 c7 02	 add	 edi, 2
  00060	83 ee 01	 sub	 esi, 1
  00063	75 ae		 jne	 SHORT $LL4@Put
  00065	5f		 pop	 edi
  00066	5b		 pop	 ebx
$LN3@Put:

; 1626 :         }
; 1627 : 
; 1628 :         return _Dest;

  00067	8b 55 0c	 mov	 edx, DWORD PTR ___$ReturnUdt$[ebp]
  0006a	8b 4d 10	 mov	 ecx, DWORD PTR __Dest$[ebp]
  0006d	5e		 pop	 esi
  0006e	89 42 04	 mov	 DWORD PTR [edx+4], eax
  00071	8b c2		 mov	 eax, edx
  00073	89 0a		 mov	 DWORD PTR [edx], ecx

; 1629 :     }

  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -108				; size = 4
__Su$1$ = -104						; size = 4
__Old_capacity$1$ = -100				; size = 4
tv1226 = -96						; size = 4
__Iosbase$GSCopy$1$ = -92				; size = 4
__Pg$1$ = -88						; size = 4
__Ctype_fac$1$ = -88					; size = 4
__Prefix$1$ = -84					; size = 4
$T2 = -80						; size = 8
$T3 = -80						; size = 8
$T4 = -80						; size = 8
$T5 = -80						; size = 8
$T6 = -80						; size = 8
$T7 = -80						; size = 8
$T8 = -80						; size = 8
$T9 = -80						; size = 8
tv1237 = -76						; size = 4
__New_ptr$1$ = -72					; size = 4
__Punct_fac$1$ = -72					; size = 4
__Buf$GSCopy$1$ = -72					; size = 4
__Kseparator$1$ = -68					; size = 4
__Count$GSCopy$2$ = -68					; size = 4
__Grouping$ = -64					; size = 24
__Groupstring$ = -40					; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_this$ = 8						; size = 4
___$ReturnUdt$ = 12					; size = 4
__Dest$ = 16						; size = 8
__Iosbase$ = 24						; size = 4
__Fill$ = 28						; size = 2
__Buf$ = 32						; size = 4
__Count$ = 36						; size = 4
?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput, COMDAT

; 1569 :         size_t _Count) const { // put formatted integer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 60	 sub	 esp, 96			; 00000060H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	50		 push	 eax
  00022	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00025	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002b	8b 5d 24	 mov	 ebx, DWORD PTR __Count$[ebp]
  0002e	8b 45 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00031	8b 55 18	 mov	 edx, DWORD PTR __Iosbase$[ebp]
  00034	8b 4d 20	 mov	 ecx, DWORD PTR __Buf$[ebp]
  00037	89 45 94	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  0003a	89 55 a4	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], edx
  0003d	89 4d b8	 mov	 DWORD PTR __Buf$GSCopy$1$[ebp], ecx

; 1570 :         auto _Prefix = static_cast<size_t>(0 < _Count && (*_Buf == '+' || *_Buf == '-'));

  00040	85 db		 test	 ebx, ebx
  00042	74 11		 je	 SHORT $LN17@Iput
  00044	8a 01		 mov	 al, BYTE PTR [ecx]
  00046	3c 2b		 cmp	 al, 43			; 0000002bH
  00048	74 04		 je	 SHORT $LN16@Iput
  0004a	3c 2d		 cmp	 al, 45			; 0000002dH
  0004c	75 07		 jne	 SHORT $LN17@Iput
$LN16@Iput:
  0004e	bf 01 00 00 00	 mov	 edi, 1
  00053	eb 02		 jmp	 SHORT $LN269@Iput
$LN17@Iput:
  00055	33 ff		 xor	 edi, edi
$LN269@Iput:

; 1571 :         if ((_Iosbase.flags() & ios_base::basefield) == ios_base::hex && _Prefix + 2 <= _Count && _Buf[_Prefix] == '0'
; 1572 :             && (_Buf[_Prefix + 1] == 'x' || _Buf[_Prefix + 1] == 'X')) {

  00057	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  0005a	25 00 0e 00 00	 and	 eax, 3584		; 00000e00H
  0005f	89 7d ac	 mov	 DWORD PTR __Prefix$1$[ebp], edi
  00062	3d 00 08 00 00	 cmp	 eax, 2048		; 00000800H
  00067	75 20		 jne	 SHORT $LN4@Iput
  00069	8d 47 02	 lea	 eax, DWORD PTR [edi+2]
  0006c	3b c3		 cmp	 eax, ebx
  0006e	77 19		 ja	 SHORT $LN4@Iput
  00070	80 3c 39 30	 cmp	 BYTE PTR [ecx+edi], 48	; 00000030H
  00074	75 13		 jne	 SHORT $LN4@Iput
  00076	8a 4c 39 01	 mov	 cl, BYTE PTR [ecx+edi+1]
  0007a	80 f9 78	 cmp	 cl, 120			; 00000078H
  0007d	74 05		 je	 SHORT $LN5@Iput
  0007f	80 f9 58	 cmp	 cl, 88			; 00000058H
  00082	75 05		 jne	 SHORT $LN4@Iput
$LN5@Iput:

; 1573 :             _Prefix += 2;

  00084	8b f8		 mov	 edi, eax
  00086	89 7d ac	 mov	 DWORD PTR __Prefix$1$[ebp], edi
$LN4@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  00089	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  0008c	8b 70 04	 mov	 esi, DWORD PTR [eax+4]

; 269  :         _Ptr->_Incref();

  0008f	8b ce		 mov	 ecx, esi
  00091	89 75 b4	 mov	 DWORD PTR $T3[ebp+4], esi
  00094	8b 06		 mov	 eax, DWORD PTR [esi]
  00096	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1576 :         const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Iosbase.getloc());

  00099	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  0009c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  000a9	83 c4 04	 add	 esp, 4
  000ac	89 45 a8	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000af	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000b6	85 f6		 test	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  000b8	74 13		 je	 SHORT $LN121@Iput

; 355  :             delete _Ptr->_Decref();

  000ba	8b 06		 mov	 eax, DWORD PTR [esi]
  000bc	8b ce		 mov	 ecx, esi
  000be	ff 50 08	 call	 DWORD PTR [eax+8]
  000c1	8b c8		 mov	 ecx, eax
  000c3	85 c9		 test	 ecx, ecx
  000c5	74 06		 je	 SHORT $LN121@Iput
  000c7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c9	6a 01		 push	 1
  000cb	ff 10		 call	 DWORD PTR [eax]
$LN121@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1577 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  000cd	6a 00		 push	 0
  000cf	53		 push	 ebx
  000d0	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  000d3	e8 00 00 00 00	 call	 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  000d8	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 435  :         value_type* _Result = _Bx._Buf;

  000dc	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  000df	8b 75 a8	 mov	 esi, DWORD PTR __Ctype_fac$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  000e2	0f 47 4d d8	 cmova	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  000e6	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1578 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  000e7	8b 4d b8	 mov	 ecx, DWORD PTR __Buf$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  000ea	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1577 :         basic_string<_Elem> _Groupstring(_Count, _Elem(0)); // reserve space

  000ec	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  000f3	8b 50 2c	 mov	 edx, DWORD PTR [eax+44]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1578 :         _Ctype_fac.widen(_Buf, _Buf + _Count, &_Groupstring[0]);

  000f6	8d 04 0b	 lea	 eax, DWORD PTR [ebx+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2936 :         return do_widen(_First, _Last, _Dest);

  000f9	50		 push	 eax
  000fa	51		 push	 ecx
  000fb	8b ce		 mov	 ecx, esi
  000fd	ff d2		 call	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  000ff	8b 55 a4	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  00102	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00105	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00108	89 4d b4	 mov	 DWORD PTR $T4[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  0010b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0010d	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1580 :         const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00110	8d 45 b0	 lea	 eax, DWORD PTR $T4[ebp]
  00113	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00117	50		 push	 eax
  00118	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  0011d	8b 4d b4	 mov	 ecx, DWORD PTR $T4[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1580 :         const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00120	83 c4 04	 add	 esp, 4
  00123	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00127	8b f0		 mov	 esi, eax
  00129	89 75 b8	 mov	 DWORD PTR __Punct_fac$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  0012c	85 c9		 test	 ecx, ecx
  0012e	74 11		 je	 SHORT $LN147@Iput

; 355  :             delete _Ptr->_Decref();

  00130	8b 01		 mov	 eax, DWORD PTR [ecx]
  00132	ff 50 08	 call	 DWORD PTR [eax+8]
  00135	8b c8		 mov	 ecx, eax
  00137	85 c9		 test	 ecx, ecx
  00139	74 06		 je	 SHORT $LN147@Iput
  0013b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013d	6a 01		 push	 1
  0013f	ff 10		 call	 DWORD PTR [eax]
$LN147@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 108  :         return do_grouping();

  00141	8b 06		 mov	 eax, DWORD PTR [esi]
  00143	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  00146	51		 push	 ecx
  00147	8b ce		 mov	 ecx, esi
  00149	ff 50 14	 call	 DWORD PTR [eax+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0014c	83 7d d4 0f	 cmp	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH

; 444  :         const value_type* _Result = _Bx._Buf;

  00150	8d 75 c0	 lea	 esi, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1581 :         const string _Grouping = _Punct_fac.grouping();

  00153	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 445  :         if (_Large_mode_engaged()) {

  00157	0f 47 75 c0	 cmova	 esi, DWORD PTR __Grouping$[ebp]
  0015b	89 75 a8	 mov	 DWORD PTR __Pg$1$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1583 :         if (*_Pg != CHAR_MAX && '\0' < *_Pg) { // grouping specified, add thousands separators

  0015e	8a 06		 mov	 al, BYTE PTR [esi]
  00160	3c 7f		 cmp	 al, 127			; 0000007fH
  00162	0f 84 a1 01 00
	00		 je	 $LN266@Iput
  00168	84 c0		 test	 al, al
  0016a	0f 8e 99 01 00
	00		 jle	 $LN266@Iput

; 104  :         return do_thousands_sep();

  00170	8b 4d b8	 mov	 ecx, DWORD PTR __Punct_fac$1$[ebp]
  00173	8b 01		 mov	 eax, DWORD PTR [ecx]
  00175	ff 50 10	 call	 DWORD PTR [eax+16]

; 1584 :             const _Elem _Kseparator = _Punct_fac.thousands_sep();

  00178	0f b7 c0	 movzx	 eax, ax
  0017b	89 45 bc	 mov	 DWORD PTR __Kseparator$1$[ebp], eax

; 1585 :             while (*_Pg != CHAR_MAX && '\0' < *_Pg && static_cast<size_t>(*_Pg) < _Count - _Prefix) {

  0017e	8a 06		 mov	 al, BYTE PTR [esi]
  00180	3c 7f		 cmp	 al, 127			; 0000007fH
  00182	0f 84 81 01 00
	00		 je	 $LN266@Iput
$LL2@Iput:
  00188	84 c0		 test	 al, al
  0018a	0f 8e 79 01 00
	00		 jle	 $LN266@Iput
  00190	0f be 0e	 movsx	 ecx, BYTE PTR [esi]
  00193	8b c3		 mov	 eax, ebx
  00195	2b c7		 sub	 eax, edi
  00197	3b c8		 cmp	 ecx, eax
  00199	0f 83 6a 01 00
	00		 jae	 $LN266@Iput
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 469  :         if (_Mysize < _Off) {

  0019f	8b 7d e8	 mov	 edi, DWORD PTR __Groupstring$[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1587 :                 _Count -= *_Pg;

  001a2	2b d9		 sub	 ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 469  :         if (_Mysize < _Off) {

  001a4	3b fb		 cmp	 edi, ebx
  001a6	0f 82 05 03 00
	00		 jb	 $LN249@Iput

; 1787 :         const size_type _Old_size = _Mypair._Myval2._Mysize;

  001ac	8b 4d ec	 mov	 ecx, DWORD PTR __Groupstring$[ebp+20]
  001af	8b c1		 mov	 eax, ecx
  001b1	2b c7		 sub	 eax, edi
  001b3	89 4d 9c	 mov	 DWORD PTR __Old_capacity$1$[ebp], ecx

; 1788 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  001b6	83 f8 01	 cmp	 eax, 1
  001b9	72 36		 jb	 SHORT $LN24@Iput

; 1789 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1790 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  001bb	0f ae e8	 lfence
  001be	ff 45 e8	 inc	 DWORD PTR __Groupstring$[ebp+16]

; 435  :         value_type* _Result = _Bx._Buf;

  001c1	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 453  :         return _Myres > _Small_string_capacity;

  001c4	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 436  :         if (_Large_mode_engaged()) {

  001c8	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  001cc	2b fb		 sub	 edi, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1792 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  001ce	8d 34 58	 lea	 esi, DWORD PTR [eax+ebx*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  001d1	8d 04 7d 02 00
	00 00		 lea	 eax, DWORD PTR [edi*2+2]
  001d8	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1793 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  001d9	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  001dc	56		 push	 esi
  001dd	50		 push	 eax
  001de	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  001e3	8b 45 bc	 mov	 eax, DWORD PTR __Kseparator$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  001e6	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  001e9	66 89 06	 mov	 WORD PTR [esi], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1795 :             return *this;

  001ec	e9 fb 00 00 00	 jmp	 $LN51@Iput
$LN24@Iput:

; 3028 :         const size_type _Old_size = _My_data._Mysize;

  001f1	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  001f6	2b c7		 sub	 eax, edi

; 3029 :         if (max_size() - _Old_size < _Size_increase) {

  001f8	83 f8 01	 cmp	 eax, 1
  001fb	0f 82 ab 02 00
	00		 jb	 $LN250@Iput

; 3031 :         }
; 3032 : 
; 3033 :         const size_type _New_size     = _Old_size + _Size_increase;

  00201	8d 77 01	 lea	 esi, DWORD PTR [edi+1]

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  00204	83 ce 07	 or	 esi, 7
  00207	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0020d	76 0a		 jbe	 SHORT $LN57@Iput

; 2980 :             return _Max;

  0020f	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  00214	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00217	eb 2f		 jmp	 SHORT $LN264@Iput
$LN57@Iput:

; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00219	8b d1		 mov	 edx, ecx
  0021b	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00220	d1 ea		 shr	 edx, 1
  00222	2b c2		 sub	 eax, edx
  00224	3b c8		 cmp	 ecx, eax
  00226	76 0a		 jbe	 SHORT $LN58@Iput

; 2984 :             return _Max;

  00228	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  0022d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00230	eb 16		 jmp	 SHORT $LN264@Iput
$LN58@Iput:

; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00232	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00235	3b f0		 cmp	 esi, eax
  00237	0f 42 f0	 cmovb	 esi, eax

; 825  :         ++_Capacity; // Take null terminator into consideration

  0023a	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  0023d	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00242	0f 87 5f 02 00
	00		 ja	 $LN251@Iput
$LN264@Iput:

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  00248	03 c0		 add	 eax, eax

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0024a	50		 push	 eax

; 122  :     return _Count * _Ty_size;

  0024b	0f ae e8	 lfence

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0024e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3041 :         _My_data._Mysize      = _New_size;

  00253	8d 4f 01	 lea	 ecx, DWORD PTR [edi+1]

; 3042 :         _My_data._Myres       = _New_capacity;

  00256	89 75 ec	 mov	 DWORD PTR __Groupstring$[ebp+20], esi

; 3043 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00259	2b fb		 sub	 edi, ebx
  0025b	89 4d e8	 mov	 DWORD PTR __Groupstring$[ebp+16], ecx
  0025e	8d 0c 1b	 lea	 ecx, DWORD PTR [ebx+ebx]
  00261	89 45 b8	 mov	 DWORD PTR __New_ptr$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00264	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3043 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  00267	8d 34 01	 lea	 esi, DWORD PTR [ecx+eax]
  0026a	89 75 98	 mov	 DWORD PTR __Su$1$[ebp], esi
  0026d	8d 14 7d 02 00
	00 00		 lea	 edx, DWORD PTR [edi*2+2]

; 3044 :         if (_Old_capacity > _Small_string_capacity) {

  00274	8b 7d 9c	 mov	 edi, DWORD PTR __Old_capacity$1$[ebp]
  00277	89 55 a0	 mov	 DWORD PTR tv1226[ebp], edx
  0027a	8d 56 02	 lea	 edx, DWORD PTR [esi+2]
  0027d	89 55 b4	 mov	 DWORD PTR tv1237[ebp], edx
  00280	0f ae e8	 lfence
  00283	51		 push	 ecx
  00284	83 ff 07	 cmp	 edi, 7
  00287	76 35		 jbe	 SHORT $LN50@Iput

; 3045 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  00289	8b 75 d8	 mov	 esi, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0028c	56		 push	 esi
  0028d	50		 push	 eax
  0028e	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  00293	8b 45 98	 mov	 eax, DWORD PTR __Su$1$[ebp]
  00296	8b 4d bc	 mov	 ecx, DWORD PTR __Kseparator$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00299	ff 75 a0	 push	 DWORD PTR tv1226[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  0029c	66 89 08	 mov	 WORD PTR [eax], cx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  0029f	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  002a2	03 c6		 add	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002a4	50		 push	 eax
  002a5	8b 45 b4	 mov	 eax, DWORD PTR tv1237[ebp]
  002a8	50		 push	 eax
  002a9	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3047 :             _Deallocate_for_capacity(_Al, _Old_ptr, _Old_capacity);

  002ae	57		 push	 edi
  002af	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
  002b2	56		 push	 esi
  002b3	50		 push	 eax
  002b4	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAAV?$allocator@_W@2@QA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
  002b9	83 c4 24	 add	 esp, 36			; 00000024H

; 3048 :             _My_data._Bx._Ptr = _New_ptr;
; 3049 :         } else {

  002bc	eb 28		 jmp	 SHORT $LN270@Iput
$LN50@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002be	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  002c1	51		 push	 ecx
  002c2	50		 push	 eax
  002c3	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  002c8	8b 45 bc	 mov	 eax, DWORD PTR __Kseparator$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  002cb	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002ce	ff 75 a0	 push	 DWORD PTR tv1226[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 519  :             *_Su = _C;

  002d1	66 89 06	 mov	 WORD PTR [esi], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  002d4	8d 04 1b	 lea	 eax, DWORD PTR [ebx+ebx]
  002d7	03 c1		 add	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  002d9	50		 push	 eax
  002da	8d 46 02	 lea	 eax, DWORD PTR [esi+2]
  002dd	50		 push	 eax
  002de	e8 00 00 00 00	 call	 _memcpy
  002e3	83 c4 18	 add	 esp, 24			; 00000018H
$LN270@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1589 :                 if ('\0' < _Pg[1]) {

  002e6	8b 45 b8	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  002e9	89 45 d8	 mov	 DWORD PTR __Groupstring$[ebp], eax
$LN51@Iput:
  002ec	8b 75 a8	 mov	 esi, DWORD PTR __Pg$1$[ebp]
  002ef	80 7e 01 00	 cmp	 BYTE PTR [esi+1], 0
  002f3	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  002f6	8b 7d ac	 mov	 edi, DWORD PTR __Prefix$1$[ebp]
  002f9	0f 4f f0	 cmovg	 esi, eax
  002fc	89 75 a8	 mov	 DWORD PTR __Pg$1$[ebp], esi
  002ff	8a 06		 mov	 al, BYTE PTR [esi]
  00301	3c 7f		 cmp	 al, 127			; 0000007fH
  00303	0f 85 7f fe ff
	ff		 jne	 $LL2@Iput
$LN266@Iput:

; 1590 :                     ++_Pg; // not last group, advance
; 1591 :                 }
; 1592 :             }
; 1593 :         }
; 1594 : 
; 1595 :         _Count = _Groupstring.size();
; 1596 : 
; 1597 :         size_t _Fillcount;
; 1598 :         if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Count) {

  00309	8b 4d a4	 mov	 ecx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
  0030c	8b 45 e8	 mov	 eax, DWORD PTR __Groupstring$[ebp+16]
  0030f	89 45 bc	 mov	 DWORD PTR __Count$GSCopy$2$[ebp], eax
  00312	83 79 24 00	 cmp	 DWORD PTR [ecx+36], 0
  00316	8b 71 20	 mov	 esi, DWORD PTR [ecx+32]
  00319	7c 0e		 jl	 SHORT $LN10@Iput
  0031b	7f 04		 jg	 SHORT $LN265@Iput
  0031d	85 f6		 test	 esi, esi
  0031f	74 08		 je	 SHORT $LN10@Iput
$LN265@Iput:
  00321	3b f0		 cmp	 esi, eax
  00323	76 04		 jbe	 SHORT $LN10@Iput

; 1600 :         } else {
; 1601 :             _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Count;

  00325	2b f0		 sub	 esi, eax
  00327	eb 02		 jmp	 SHORT $LN9@Iput
$LN10@Iput:

; 1599 :             _Fillcount = 0;

  00329	33 f6		 xor	 esi, esi
$LN9@Iput:

; 1602 :         }
; 1603 : 
; 1604 :         ios_base::fmtflags _Adjustfield = _Iosbase.flags() & ios_base::adjustfield;

  0032b	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1605 :         if (_Adjustfield != ios_base::left && _Adjustfield != ios_base::internal) { // put leading fill

  0032e	8b 5d 08	 mov	 ebx, DWORD PTR _this$[ebp]
  00331	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00336	83 f8 40	 cmp	 eax, 64			; 00000040H
  00339	0f 84 85 00 00
	00		 je	 $LN13@Iput
  0033f	3d 00 01 00 00	 cmp	 eax, 256		; 00000100H
  00344	74 3f		 je	 SHORT $LN263@Iput

; 1606 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  00346	56		 push	 esi
  00347	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  0034a	8d 45 b0	 lea	 eax, DWORD PTR $T5[ebp]
  0034d	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00350	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00353	50		 push	 eax
  00354	53		 push	 ebx
  00355	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep

; 1607 :             _Fillcount = 0;

  0035a	33 f6		 xor	 esi, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0035c	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1608 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00360	57		 push	 edi
  00361	8b 10		 mov	 edx, DWORD PTR [eax]
  00363	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 435  :         value_type* _Result = _Bx._Buf;

  00366	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 436  :         if (_Large_mode_engaged()) {

  00369	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1608 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  0036d	50		 push	 eax
  0036e	51		 push	 ecx
  0036f	52		 push	 edx
  00370	8d 45 b0	 lea	 eax, DWORD PTR $T6[ebp]
  00373	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx
  00376	50		 push	 eax
  00377	53		 push	 ebx
  00378	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  0037b	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
  00380	83 c4 30	 add	 esp, 48			; 00000030H
  00383	eb 5f		 jmp	 SHORT $LN14@Iput
$LN263@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00385	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 435  :         value_type* _Result = _Bx._Buf;

  00389	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1610 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  0038c	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  0038d	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1610 :             _Dest      = _Put(_Dest, &_Groupstring[0], _Prefix);

  00391	50		 push	 eax
  00392	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  00395	8d 45 b0	 lea	 eax, DWORD PTR $T7[ebp]
  00398	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0039b	50		 push	 eax
  0039c	53		 push	 ebx
  0039d	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put

; 1611 :             _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  003a2	56		 push	 esi
  003a3	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  003a6	8b 08		 mov	 ecx, DWORD PTR [eax]
  003a8	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  003ab	50		 push	 eax
  003ac	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
  003af	8d 45 b0	 lea	 eax, DWORD PTR $T8[ebp]
  003b2	51		 push	 ecx
  003b3	50		 push	 eax
  003b4	53		 push	 ebx
  003b5	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  003b8	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  003bd	83 c4 30	 add	 esp, 48			; 00000030H

; 1612 :             _Fillcount = 0;

  003c0	33 f6		 xor	 esi, esi

; 1613 :         } else {

  003c2	eb 20		 jmp	 SHORT $LN14@Iput
$LN13@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  003c4	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 435  :         value_type* _Result = _Bx._Buf;

  003c8	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1614 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  003cb	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  003cc	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1614 :             _Dest = _Put(_Dest, &_Groupstring[0], _Prefix);

  003d0	50		 push	 eax
  003d1	ff 75 14	 push	 DWORD PTR __Dest$[ebp+4]
  003d4	8d 45 b0	 lea	 eax, DWORD PTR $T9[ebp]
  003d7	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  003da	50		 push	 eax
  003db	53		 push	 ebx
  003dc	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
  003e1	83 c4 18	 add	 esp, 24			; 00000018H
$LN14@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2272 :         return _Mypair._Myval2._Myptr()[_Off];

  003e4	8b 10		 mov	 edx, DWORD PTR [eax]
  003e6	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]

; 435  :         value_type* _Result = _Bx._Buf;

  003e9	8d 45 d8	 lea	 eax, DWORD PTR __Groupstring$[ebp]

; 453  :         return _Myres > _Small_string_capacity;

  003ec	83 7d ec 07	 cmp	 DWORD PTR __Groupstring$[ebp+20], 7

; 2272 :         return _Mypair._Myval2._Myptr()[_Off];

  003f0	89 55 10	 mov	 DWORD PTR __Dest$[ebp], edx

; 436  :         if (_Large_mode_engaged()) {

  003f3	0f 47 45 d8	 cmova	 eax, DWORD PTR __Groupstring$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1617 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  003f7	29 7d bc	 sub	 DWORD PTR __Count$GSCopy$2$[ebp], edi
  003fa	ff 75 bc	 push	 DWORD PTR __Count$GSCopy$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2272 :         return _Mypair._Myval2._Myptr()[_Off];

  003fd	89 4d 14	 mov	 DWORD PTR __Dest$[ebp+4], ecx
  00400	8d 04 78	 lea	 eax, DWORD PTR [eax+edi*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1617 :         _Dest = _Put(_Dest, &_Groupstring[_Prefix], _Count - _Prefix);

  00403	50		 push	 eax
  00404	51		 push	 ecx
  00405	52		 push	 edx
  00406	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00409	50		 push	 eax
  0040a	53		 push	 ebx
  0040b	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  00410	8b 55 a4	 mov	 edx, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1619 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00413	56		 push	 esi
  00414	ff 75 1c	 push	 DWORD PTR __Fill$[ebp]
  00417	8b 08		 mov	 ecx, DWORD PTR [eax]
  00419	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0041c	8b 75 94	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0041f	50		 push	 eax
  00420	51		 push	 ecx
  00421	56		 push	 esi
  00422	53		 push	 ebx
  00423	89 4d 10	 mov	 DWORD PTR __Dest$[ebp], ecx
  00426	89 45 14	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  00429	c7 42 20 00 00
	00 00		 mov	 DWORD PTR [edx+32], 0
  00430	c7 42 24 00 00
	00 00		 mov	 DWORD PTR [edx+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1619 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00437	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0043c	8b 4d d4	 mov	 ecx, DWORD PTR __Grouping$[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1619 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  0043f	83 c4 30	 add	 esp, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00442	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  00445	76 28		 jbe	 SHORT $LN184@Iput
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00447	8b 55 c0	 mov	 edx, DWORD PTR __Grouping$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0044a	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0044b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0044d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00453	72 10		 jb	 SHORT $LN189@Iput

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00455	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00458	83 c1 23	 add	 ecx, 35			; 00000023H
  0045b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0045d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00460	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00463	77 51		 ja	 SHORT $LN272@Iput
$LN189@Iput:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00465	51		 push	 ecx
  00466	52		 push	 edx
  00467	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0046c	83 c4 08	 add	 esp, 8
$LN184@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1383 :         _Tidy_deallocate();

  0046f	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]

; 3090 :         _My_data._Mysize = 0;

  00472	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+16], 0

; 3091 :         _My_data._Myres  = _Small_string_capacity;

  00479	c7 45 d4 0f 00
	00 00		 mov	 DWORD PTR __Grouping$[ebp+20], 15 ; 0000000fH

; 3092 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00480	c6 45 c0 00	 mov	 BYTE PTR __Grouping$[ebp], 0

; 1383 :         _Tidy_deallocate();

  00484	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1619 :         return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00489	8b c6		 mov	 eax, esi

; 1620 :     }

  0048b	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0048e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00495	59		 pop	 ecx
  00496	5f		 pop	 edi
  00497	5e		 pop	 esi
  00498	5b		 pop	 ebx
  00499	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0049c	33 cd		 xor	 ecx, ebp
  0049e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004a3	8b e5		 mov	 esp, ebp
  004a5	5d		 pop	 ebp
  004a6	c3		 ret	 0
$LN251@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  004a7	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN250@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3030 :             _Xlen_string(); // result too long

  004ac	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN249@Iput:

; 470  :             _Xran();

  004b1	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran
$LN272@Iput:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  004b6	6a 00		 push	 0
  004b8	6a 00		 push	 0
  004ba	6a 00		 push	 0
  004bc	6a 00		 push	 0
  004be	6a 00		 push	 0
  004c0	e8 00 00 00 00	 call	 __invoke_watson
$LN268@Iput:
  004c5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Groupstring$[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$2:
  00010	8d 4d b0	 lea	 ecx, DWORD PTR $T4[ebp]
  00013	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z$3:
  00018	8d 4d c0	 lea	 ecx, DWORD PTR __Grouping$[ebp]
  0001b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
__ehhandler$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z:
  00025	90		 npad	 1
  00026	90		 npad	 1
  00027	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002e	8b 4a 90	 mov	 ecx, DWORD PTR [edx-112]
  00031	33 c8		 xor	 ecx, eax
  00033	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00038	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003b	33 c8		 xor	 ecx, eax
  0003d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00042	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z
  00047	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
__Fmt$ = 12						; size = 4
__Spec$ = 16						; size = 1
__Flags$ = 20						; size = 4
?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt, COMDAT

; 1416 :         char* _Fmt, char _Spec, ios_base::fmtflags _Flags) const { // generate sprintf format for floating-point

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1417 :         char* _Ptr = _Fmt;
; 1418 :         *_Ptr++    = '%';
; 1419 : 
; 1420 :         if (_Flags & ios_base::showpos) {

  00003	8b 55 14	 mov	 edx, DWORD PTR __Flags$[ebp]
  00006	56		 push	 esi
  00007	8b 75 0c	 mov	 esi, DWORD PTR __Fmt$[ebp]
  0000a	c6 06 25	 mov	 BYTE PTR [esi], 37	; 00000025H
  0000d	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
  00010	f6 c2 20	 test	 dl, 32			; 00000020H
  00013	74 04		 je	 SHORT $LN2@Ffmt

; 1421 :             *_Ptr++ = '+';

  00015	c6 00 2b	 mov	 BYTE PTR [eax], 43	; 0000002bH
  00018	40		 inc	 eax
$LN2@Ffmt:

; 1422 :         }
; 1423 : 
; 1424 :         if (_Flags & ios_base::showpoint) {

  00019	f6 c2 10	 test	 dl, 16			; 00000010H
  0001c	74 04		 je	 SHORT $LN3@Ffmt

; 1425 :             *_Ptr++ = '#';

  0001e	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00021	40		 inc	 eax
$LN3@Ffmt:

; 1426 :         }
; 1427 : 
; 1428 :         *_Ptr++ = '.';
; 1429 :         *_Ptr++ = '*'; // for precision argument
; 1430 :         if (_Spec != '\0') {

  00022	8a 4d 10	 mov	 cl, BYTE PTR __Spec$[ebp]
  00025	66 c7 00 2e 2a	 mov	 WORD PTR [eax], 10798	; 00002a2eH
  0002a	83 c0 02	 add	 eax, 2
  0002d	84 c9		 test	 cl, cl
  0002f	74 03		 je	 SHORT $LN4@Ffmt

; 1431 :             *_Ptr++ = _Spec; // 'L' qualifier for long double only

  00031	88 08		 mov	 BYTE PTR [eax], cl
  00033	40		 inc	 eax
$LN4@Ffmt:

; 1432 :         }
; 1433 : 
; 1434 :         char _Ch; // specifier
; 1435 :         ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;

  00034	8b ca		 mov	 ecx, edx
  00036	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H

; 1436 :         if (_Flags & ios_base::uppercase) {

  0003c	f6 c2 04	 test	 dl, 4
  0003f	74 45		 je	 SHORT $LN5@Ffmt

; 1437 :             if (_Ffl == ios_base::fixed) {

  00041	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  00047	75 0d		 jne	 SHORT $LN7@Ffmt

; 1438 :                 _Ch = 'F';

  00049	b1 46		 mov	 cl, 70			; 00000046H

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  0004b	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  0004d	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  00051	8b c6		 mov	 eax, esi
  00053	5e		 pop	 esi

; 1461 :     }

  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
$LN7@Ffmt:

; 1439 :             } else if (_Ffl == (ios_base::scientific | ios_base::fixed)) {

  00056	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  0005c	75 0d		 jne	 SHORT $LN9@Ffmt

; 1440 :                 _Ch = 'A';

  0005e	b1 41		 mov	 cl, 65			; 00000041H

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  00060	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  00062	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  00066	8b c6		 mov	 eax, esi
  00068	5e		 pop	 esi

; 1461 :     }

  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
$LN9@Ffmt:

; 1441 :             } else if (_Ffl == ios_base::scientific) {

  0006b	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00071	0f 95 c1	 setne	 cl
  00074	8d 0c 4d 45 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+69]

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  0007b	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  0007d	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  00081	8b c6		 mov	 eax, esi
  00083	5e		 pop	 esi

; 1461 :     }

  00084	5d		 pop	 ebp
  00085	c3		 ret	 0
$LN5@Ffmt:

; 1442 :                 _Ch = 'E';
; 1443 :             } else {
; 1444 :                 _Ch = 'G';
; 1445 :             }
; 1446 :         } else {
; 1447 :             if (_Ffl == ios_base::fixed) {

  00086	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  0008c	75 0d		 jne	 SHORT $LN13@Ffmt

; 1448 :                 _Ch = 'f';

  0008e	b1 66		 mov	 cl, 102			; 00000066H

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  00090	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  00092	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  00096	8b c6		 mov	 eax, esi
  00098	5e		 pop	 esi

; 1461 :     }

  00099	5d		 pop	 ebp
  0009a	c3		 ret	 0
$LN13@Ffmt:

; 1449 :             } else if (_Ffl == (ios_base::scientific | ios_base::fixed)) {

  0009b	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H
  000a1	75 0d		 jne	 SHORT $LN15@Ffmt

; 1450 :                 _Ch = 'a';

  000a3	b1 61		 mov	 cl, 97			; 00000061H

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  000a5	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  000a7	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  000ab	8b c6		 mov	 eax, esi
  000ad	5e		 pop	 esi

; 1461 :     }

  000ae	5d		 pop	 ebp
  000af	c3		 ret	 0
$LN15@Ffmt:

; 1451 :             } else if (_Ffl == ios_base::scientific) {

  000b0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000b6	0f 95 c1	 setne	 cl
  000b9	8d 0c 4d 65 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+101]

; 1452 :                 _Ch = 'e';
; 1453 :             } else {
; 1454 :                 _Ch = 'g';
; 1455 :             }
; 1456 :         }
; 1457 :         *_Ptr++ = _Ch;

  000c0	88 08		 mov	 BYTE PTR [eax], cl

; 1458 : 
; 1459 :         *_Ptr = '\0';

  000c2	c6 40 01 00	 mov	 BYTE PTR [eax+1], 0

; 1460 :         return _Fmt;

  000c6	8b c6		 mov	 eax, esi
  000c8	5e		 pop	 esi

; 1461 :     }

  000c9	5d		 pop	 ebp
  000ca	c3		 ret	 0
?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z
_TEXT	SEGMENT
__Buf$ = -68						; size = 64
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1407 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, const void* _Val) const { // put formatted void pointer to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 44	 sub	 esp, 68			; 00000044H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 1c	 mov	 eax, DWORD PTR __Val$[ebp]
  00013	53		 push	 ebx
  00014	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00017	56		 push	 esi
  00018	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  0001b	57		 push	 edi

; 1408 :         char _Buf[2 * _Max_int_dig];
; 1409 : 
; 1410 :         return _Iput(

  0001c	50		 push	 eax
  0001d	68 00 00 00 00	 push	 OFFSET ??_C@_02BBAHNLBA@?$CFp@
  00022	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00025	8b f9		 mov	 edi, ecx
  00027	6a 40		 push	 64			; 00000040H
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 _sprintf_s
  0002f	50		 push	 eax
  00030	8d 45 bc	 lea	 eax, DWORD PTR __Buf$[ebp]
  00033	50		 push	 eax
  00034	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00037	56		 push	 esi
  00038	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0003b	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  0003e	53		 push	 ebx
  0003f	57		 push	 edi
  00040	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1411 :             _Dest, _Iosbase, _Fill, _Buf, static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), "%p", _Val)));
; 1412 :     }

  00045	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00048	83 c4 30	 add	 esp, 48			; 00000030H
  0004b	8b c3		 mov	 eax, ebx
  0004d	33 cd		 xor	 ecx, ebp
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPBX@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -68				; size = 4
__Iosbase$GSCopy$1$ = -64				; size = 4
__Precision$ = -60					; size = 8
__Ptwo$2 = -56						; size = 4
__Is_finite$ = -56					; size = 1
_this$GSCopy$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1379 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const { // put formatted long double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  00033	33 d2		 xor	 edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1379 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const { // put formatted long double to _Dest

  00035	89 45 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  00038	8b 45 14	 mov	 eax, DWORD PTR __Iosbase$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003b	0f 11 45 d0	 movups	 XMMWORD PTR __Buf$[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1379 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long double _Val) const { // put formatted long double to _Dest

  0003f	89 45 c0	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  00042	89 55 e0	 mov	 DWORD PTR __Buf$[ebp+16], edx

; 861  :         _My_data._Myres  = _Small_string_capacity;

  00045	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	88 55 d0	 mov	 BYTE PTR __Buf$[ebp], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1382 :         const auto _Float_flags     = _Iosbase.flags() & ios_base::floatfield;

  0004f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00052	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00058	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx

; 1383 :         const bool _Is_fixed        = _Float_flags == ios_base::fixed;
; 1384 :         const bool _Is_hex          = _Float_flags == (ios_base::fixed | ios_base::scientific);

  0005b	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H

; 1385 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00061	75 0e		 jne	 SHORT $LN4@do_put
  00063	83 cf ff	 or	 edi, -1

; 1386 :         const int _Desired_precision =
; 1387 :             _Float_put_desired_precision<long double>(_Precision, _Float_flags); // desired precision
; 1388 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  00066	8d 72 0d	 lea	 esi, DWORD PTR [edx+13]
  00069	89 7d c8	 mov	 DWORD PTR __Precision$[ebp+4], edi

; 1186 :             return ((LDBL_MANT_DIG - 1) + 3) / 4;

  0006c	e9 8a 00 00 00	 jmp	 $LN2@do_put
$LN4@do_put:

; 1385 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00071	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  00074	8b 78 18	 mov	 edi, DWORD PTR [eax+24]

; 1192 :     if (_Precision > 0) {

  00077	85 f6		 test	 esi, esi
  00079	7c 0a		 jl	 SHORT $LN31@do_put
  0007b	7f 04		 jg	 SHORT $LN115@do_put
  0007d	85 ff		 test	 edi, edi
  0007f	74 04		 je	 SHORT $LN31@do_put
$LN115@do_put:

; 1193 :         return static_cast<int>(_Precision);

  00081	8b f7		 mov	 esi, edi
  00083	eb 18		 jmp	 SHORT $LN34@do_put
$LN31@do_put:

; 1194 :     } else if (_Precision == 0) {

  00085	8b c7		 mov	 eax, edi
  00087	0b c6		 or	 eax, esi
  00089	75 0d		 jne	 SHORT $LN33@do_put

; 1195 :         const bool _Is_default_float = _Float_flags == 0;

  0008b	85 c9		 test	 ecx, ecx

; 1196 :         if (_Is_default_float) {

  0008d	75 05		 jne	 SHORT $LN35@do_put

; 1386 :         const int _Desired_precision =
; 1387 :             _Float_put_desired_precision<long double>(_Precision, _Float_flags); // desired precision
; 1388 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  0008f	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1197 :             return 1;

  00092	eb 67		 jmp	 SHORT $LN2@do_put
$LN35@do_put:

; 1198 :         } else {
; 1199 :             return 0;

  00094	33 f6		 xor	 esi, esi
  00096	eb 05		 jmp	 SHORT $LN34@do_put
$LN33@do_put:

; 1200 :         }
; 1201 :     } else {
; 1202 :         constexpr int _Default_precision = 6;
; 1203 :         return _Default_precision;

  00098	be 06 00 00 00	 mov	 esi, 6
$LN34@do_put:

; 1389 :         if (_Is_fixed && 1e10 < _CSTD fabsl(_Val)) { // f or F format

  0009d	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  000a3	75 56		 jne	 SHORT $LN2@do_put
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 882  :         return fabs((double)_X);

  000a5	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  000aa	0f 28 c1	 movaps	 xmm0, xmm1
  000ad	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1389 :         if (_Is_fixed && 1e10 < _CSTD fabsl(_Val)) { // f or F format

  000b4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000bc	76 3d		 jbe	 SHORT $LN2@do_put
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 903  :         return frexp((double)_X, _Y);

  000be	8d 45 c8	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000c1	50		 push	 eax
  000c2	83 ec 08	 sub	 esp, 8
  000c5	0f ae e8	 lfence
  000c8	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000cd	e8 00 00 00 00	 call	 _frexp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1392 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000d2	8b 45 c8	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 903  :         return frexp((double)_X, _Y);

  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1392 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000d8	99		 cdq
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 903  :         return frexp((double)_X, _Y);

  000d9	dd d8		 fstp	 ST(0)
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1392 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000db	33 c2		 xor	 eax, edx
  000dd	2b c2		 sub	 eax, edx
  000df	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000e5	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000ea	f7 e9		 imul	 ecx
  000ec	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000ef	8b c2		 mov	 eax, edx
  000f1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f4	03 c2		 add	 eax, edx
  000f6	8b 55 e0	 mov	 edx, DWORD PTR __Buf$[ebp+16]
  000f9	03 f0		 add	 esi, eax
$LN2@do_put:

; 1393 :         }
; 1394 : 
; 1395 :         _Buf.resize(_Bufsize + 50); // add fudge factor

  000fb	83 c6 32	 add	 esi, 50			; 00000032H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2389 :         if (_New_size <= _Old_size) {

  000fe	3b f2		 cmp	 esi, edx
  00100	77 14		 ja	 SHORT $LN39@do_put

; 453  :         return _Myres > _Small_string_capacity;

  00102	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00106	8d 45 d0	 lea	 eax, DWORD PTR __Buf$[ebp]

; 3076 :         _Mypair._Myval2._Mysize = _New_size;

  00109	89 75 e0	 mov	 DWORD PTR __Buf$[ebp+16], esi

; 436  :         if (_Large_mode_engaged()) {

  0010c	0f 47 45 d0	 cmova	 eax, DWORD PTR __Buf$[ebp]

; 3077 :         _Traits::assign(_Mypair._Myval2._Myptr()[_New_size], _Elem());

  00110	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2391 :         } else {

  00114	eb 10		 jmp	 SHORT $LN40@do_put
$LN39@do_put:

; 2392 :             append(_New_size - _Old_size, _Ch);

  00116	6a 00		 push	 0
  00118	2b f2		 sub	 esi, edx
  0011a	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  0011d	56		 push	 esi
  0011e	0f ae e8	 lfence
  00121	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN40@do_put:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 335  :         return _ldtest(&_X);

  00126	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00129	83 ec 08	 sub	 esp, 8
  0012c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0012f	e8 00 00 00 00	 call	 __ldclass
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1396 :         const bool _Is_finite      = (_STD isfinite)(_Val);

  00134	8b 75 c0	 mov	 esi, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 437  :         return fpclassify(_X) <= 0;

  00137	66 85 c0	 test	 ax, ax
  0013a	0f 9e c2	 setle	 dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1396 :         const bool _Is_finite      = (_STD isfinite)(_Val);

  0013d	88 55 c8	 mov	 BYTE PTR __Is_finite$[ebp], dl
  00140	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1399 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00143	8b c1		 mov	 eax, ecx
  00145	83 e0 ef	 and	 eax, -17		; ffffffefH
  00148	84 d2		 test	 dl, dl
  0014a	0f 44 c8	 cmove	 ecx, eax
  0014d	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00150	51		 push	 ecx
  00151	6a 4c		 push	 76			; 0000004cH
  00153	50		 push	 eax
  00154	ff 75 cc	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00157	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0015c	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00160	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1399 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00163	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00168	0f 47 4d d0	 cmova	 ecx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1399 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  0016c	83 c4 10	 add	 esp, 16			; 00000010H
  0016f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	ff 75 e0	 push	 DWORD PTR __Buf$[ebp+16]
  00179	51		 push	 ecx
  0017a	e8 00 00 00 00	 call	 _sprintf_s
  0017f	83 c4 18	 add	 esp, 24			; 00000018H

; 1402 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  00182	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00185	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 444  :         const value_type* _Result = _Bx._Buf;

  00189	8d 55 d0	 lea	 edx, DWORD PTR __Buf$[ebp]

; 445  :         if (_Large_mode_engaged()) {

  0018c	0f 47 55 d0	 cmova	 edx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1402 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  00190	ff 75 c8	 push	 DWORD PTR __Is_finite$[ebp]
  00193	50		 push	 eax
  00194	52		 push	 edx
  00195	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00198	56		 push	 esi
  00199	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0019c	8b 75 bc	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0019f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  001a2	56		 push	 esi
  001a3	e8 00 00 00 00	 call	 ??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput_v3<0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001a8	8b 4d e4	 mov	 ecx, DWORD PTR __Buf$[ebp+20]
  001ab	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  001ae	76 28		 jbe	 SHORT $LN98@do_put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b0	8b 55 d0	 mov	 edx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001b3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b4	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bc	72 10		 jb	 SHORT $LN103@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001be	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c1	83 c1 23	 add	 ecx, 35			; 00000023H
  001c4	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c6	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cc	77 29		 ja	 SHORT $LN119@do_put
$LN103@do_put:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ce	51		 push	 ecx
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d5	83 c4 08	 add	 esp, 8
$LN98@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1402 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  001d8	8b c6		 mov	 eax, esi

; 1403 :     }

  001da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e4	59		 pop	 ecx
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	33 cd		 xor	 ecx, ebp
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c2 1c 00	 ret	 28			; 0000001cH
$LN119@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f7	6a 00		 push	 0
  001f9	6a 00		 push	 0
  001fb	6a 00		 push	 0
  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	e8 00 00 00 00	 call	 __invoke_watson
$LN117@do_put:
  00206	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WO@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -68				; size = 4
__Iosbase$GSCopy$1$ = -64				; size = 4
__Precision$ = -60					; size = 8
__Ptwo$2 = -56						; size = 4
__Is_finite$ = -56					; size = 1
_this$GSCopy$1$ = -52					; size = 4
__Buf$ = -48						; size = 24
__Fmt$ = -24						; size = 8
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1352 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const { // put formatted double to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d cc	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  00033	33 d2		 xor	 edx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1352 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const { // put formatted double to _Dest

  00035	89 45 bc	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], eax
  00038	8b 45 14	 mov	 eax, DWORD PTR __Iosbase$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003b	0f 11 45 d0	 movups	 XMMWORD PTR __Buf$[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1352 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, double _Val) const { // put formatted double to _Dest

  0003f	89 45 c0	 mov	 DWORD PTR __Iosbase$GSCopy$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  00042	89 55 e0	 mov	 DWORD PTR __Buf$[ebp+16], edx

; 861  :         _My_data._Myres  = _Small_string_capacity;

  00045	c7 45 e4 0f 00
	00 00		 mov	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  0004c	88 55 d0	 mov	 BYTE PTR __Buf$[ebp], dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1355 :         const auto _Float_flags     = _Iosbase.flags() & ios_base::floatfield;

  0004f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00052	81 e1 00 30 00
	00		 and	 ecx, 12288		; 00003000H
  00058	89 55 fc	 mov	 DWORD PTR __$EHRec$[ebp+8], edx

; 1356 :         const bool _Is_fixed        = _Float_flags == ios_base::fixed;
; 1357 :         const bool _Is_hex          = _Float_flags == (ios_base::fixed | ios_base::scientific);

  0005b	81 f9 00 30 00
	00		 cmp	 ecx, 12288		; 00003000H

; 1358 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00061	75 0e		 jne	 SHORT $LN4@do_put
  00063	83 cf ff	 or	 edi, -1

; 1359 :         const int _Desired_precision =
; 1360 :             _Float_put_desired_precision<double>(_Precision, _Float_flags); // desired precision
; 1361 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  00066	8d 72 0d	 lea	 esi, DWORD PTR [edx+13]
  00069	89 7d c8	 mov	 DWORD PTR __Precision$[ebp+4], edi

; 1184 :             return ((DBL_MANT_DIG - 1) + 3) / 4;

  0006c	e9 8a 00 00 00	 jmp	 $LN2@do_put
$LN4@do_put:

; 1358 :         const streamsize _Precision = _Is_hex ? -1 : _Iosbase.precision(); // precision setting

  00071	8b 70 1c	 mov	 esi, DWORD PTR [eax+28]
  00074	8b 78 18	 mov	 edi, DWORD PTR [eax+24]

; 1192 :     if (_Precision > 0) {

  00077	85 f6		 test	 esi, esi
  00079	7c 0a		 jl	 SHORT $LN31@do_put
  0007b	7f 04		 jg	 SHORT $LN111@do_put
  0007d	85 ff		 test	 edi, edi
  0007f	74 04		 je	 SHORT $LN31@do_put
$LN111@do_put:

; 1193 :         return static_cast<int>(_Precision);

  00081	8b f7		 mov	 esi, edi
  00083	eb 18		 jmp	 SHORT $LN34@do_put
$LN31@do_put:

; 1194 :     } else if (_Precision == 0) {

  00085	8b c7		 mov	 eax, edi
  00087	0b c6		 or	 eax, esi
  00089	75 0d		 jne	 SHORT $LN33@do_put

; 1195 :         const bool _Is_default_float = _Float_flags == 0;

  0008b	85 c9		 test	 ecx, ecx

; 1196 :         if (_Is_default_float) {

  0008d	75 05		 jne	 SHORT $LN35@do_put

; 1359 :         const int _Desired_precision =
; 1360 :             _Float_put_desired_precision<double>(_Precision, _Float_flags); // desired precision
; 1361 :         size_t _Bufsize = static_cast<size_t>(_Desired_precision);

  0008f	8d 70 01	 lea	 esi, DWORD PTR [eax+1]

; 1197 :             return 1;

  00092	eb 67		 jmp	 SHORT $LN2@do_put
$LN35@do_put:

; 1198 :         } else {
; 1199 :             return 0;

  00094	33 f6		 xor	 esi, esi
  00096	eb 05		 jmp	 SHORT $LN34@do_put
$LN33@do_put:

; 1200 :         }
; 1201 :     } else {
; 1202 :         constexpr int _Default_precision = 6;
; 1203 :         return _Default_precision;

  00098	be 06 00 00 00	 mov	 esi, 6
$LN34@do_put:

; 1362 :         if (_Is_fixed && 1e10 < _CSTD fabs(_Val)) { // f or F format

  0009d	81 f9 00 20 00
	00		 cmp	 ecx, 8192		; 00002000H
  000a3	75 56		 jne	 SHORT $LN2@do_put
  000a5	f2 0f 10 4d 1c	 movsd	 xmm1, QWORD PTR __Val$[ebp]
  000aa	0f 28 c1	 movaps	 xmm0, xmm1
  000ad	0f 54 05 00 00
	00 00		 andps	 xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
  000b4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@4202a05f20000000
  000bc	76 3d		 jbe	 SHORT $LN2@do_put

; 1363 :             int _Ptwo;
; 1364 :             (void) _CSTD frexp(_Val, &_Ptwo);

  000be	8d 45 c8	 lea	 eax, DWORD PTR __Ptwo$2[ebp]
  000c1	50		 push	 eax
  000c2	83 ec 08	 sub	 esp, 8
  000c5	0f ae e8	 lfence
  000c8	f2 0f 11 0c 24	 movsd	 QWORD PTR [esp], xmm1
  000cd	e8 00 00 00 00	 call	 _frexp

; 1365 :             _Bufsize += _CSTD abs(_Ptwo) * 30103L / 100000L;

  000d2	8b 45 c8	 mov	 eax, DWORD PTR __Ptwo$2[ebp]
  000d5	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d8	99		 cdq
  000d9	dd d8		 fstp	 ST(0)
  000db	33 c2		 xor	 eax, edx
  000dd	2b c2		 sub	 eax, edx
  000df	69 c8 97 75 00
	00		 imul	 ecx, eax, 30103
  000e5	b8 89 b5 f8 14	 mov	 eax, 351843721		; 14f8b589H
  000ea	f7 e9		 imul	 ecx
  000ec	c1 fa 0d	 sar	 edx, 13			; 0000000dH
  000ef	8b c2		 mov	 eax, edx
  000f1	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000f4	03 c2		 add	 eax, edx
  000f6	8b 55 e0	 mov	 edx, DWORD PTR __Buf$[ebp+16]
  000f9	03 f0		 add	 esi, eax
$LN2@do_put:

; 1366 :         }
; 1367 : 
; 1368 :         _Buf.resize(_Bufsize + 50); // add fudge factor

  000fb	83 c6 32	 add	 esi, 50			; 00000032H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2389 :         if (_New_size <= _Old_size) {

  000fe	3b f2		 cmp	 esi, edx
  00100	77 14		 ja	 SHORT $LN39@do_put

; 453  :         return _Myres > _Small_string_capacity;

  00102	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00106	8d 45 d0	 lea	 eax, DWORD PTR __Buf$[ebp]

; 3076 :         _Mypair._Myval2._Mysize = _New_size;

  00109	89 75 e0	 mov	 DWORD PTR __Buf$[ebp+16], esi

; 436  :         if (_Large_mode_engaged()) {

  0010c	0f 47 45 d0	 cmova	 eax, DWORD PTR __Buf$[ebp]

; 3077 :         _Traits::assign(_Mypair._Myval2._Myptr()[_New_size], _Elem());

  00110	c6 04 30 00	 mov	 BYTE PTR [eax+esi], 0

; 2391 :         } else {

  00114	eb 10		 jmp	 SHORT $LN40@do_put
$LN39@do_put:

; 2392 :             append(_New_size - _Old_size, _Ch);

  00116	6a 00		 push	 0
  00118	2b f2		 sub	 esi, edx
  0011a	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  0011d	56		 push	 esi
  0011e	0f ae e8	 lfence
  00121	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN40@do_put:
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 326  :         return _dtest(&_X);

  00126	dd 45 1c	 fld	 QWORD PTR __Val$[ebp]
  00129	83 ec 08	 sub	 esp, 8
  0012c	dd 1c 24	 fstp	 QWORD PTR [esp]
  0012f	e8 00 00 00 00	 call	 __dclass
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1369 :         const bool _Is_finite      = (_STD isfinite)(_Val);

  00134	8b 75 c0	 mov	 esi, DWORD PTR __Iosbase$GSCopy$1$[ebp]
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_math.h

; 437  :         return fpclassify(_X) <= 0;

  00137	66 85 c0	 test	 ax, ax
  0013a	0f 9e c2	 setle	 dl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1369 :         const bool _Is_finite      = (_STD isfinite)(_Val);

  0013d	88 55 c8	 mov	 BYTE PTR __Is_finite$[ebp], dl
  00140	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]

; 1372 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00143	8b c1		 mov	 eax, ecx
  00145	83 e0 ef	 and	 eax, -17		; ffffffefH
  00148	84 d2		 test	 dl, dl
  0014a	0f 44 c8	 cmove	 ecx, eax
  0014d	8d 45 e8	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00150	51		 push	 ecx
  00151	6a 00		 push	 0
  00153	50		 push	 eax
  00154	ff 75 cc	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00157	e8 00 00 00 00	 call	 ?_Ffmt@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABAPADPADDH@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Ffmt
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0015c	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 435  :         value_type* _Result = _Bx._Buf;

  00160	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1372 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  00163	f2 0f 10 45 1c	 movsd	 xmm0, QWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 436  :         if (_Large_mode_engaged()) {

  00168	0f 47 4d d0	 cmova	 ecx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1372 :         const auto _Ngen = static_cast<size_t>(_CSTD sprintf_s(

  0016c	83 c4 10	 add	 esp, 16			; 00000010H
  0016f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00174	57		 push	 edi
  00175	50		 push	 eax
  00176	ff 75 e0	 push	 DWORD PTR __Buf$[ebp+16]
  00179	51		 push	 ecx
  0017a	e8 00 00 00 00	 call	 _sprintf_s
  0017f	83 c4 18	 add	 esp, 24			; 00000018H

; 1375 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  00182	8b 4d cc	 mov	 ecx, DWORD PTR _this$GSCopy$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00185	83 7d e4 0f	 cmp	 DWORD PTR __Buf$[ebp+20], 15 ; 0000000fH

; 444  :         const value_type* _Result = _Bx._Buf;

  00189	8d 55 d0	 lea	 edx, DWORD PTR __Buf$[ebp]

; 445  :         if (_Large_mode_engaged()) {

  0018c	0f 47 55 d0	 cmova	 edx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1375 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  00190	ff 75 c8	 push	 DWORD PTR __Is_finite$[ebp]
  00193	50		 push	 eax
  00194	52		 push	 edx
  00195	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00198	56		 push	 esi
  00199	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0019c	8b 75 bc	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0019f	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  001a2	56		 push	 esi
  001a3	e8 00 00 00 00	 call	 ??$_Fput_v3@$0A@@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@1@V21@AAVios_base@1@_WPBDI_N@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Fput_v3<0>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001a8	8b 4d e4	 mov	 ecx, DWORD PTR __Buf$[ebp+20]
  001ab	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  001ae	76 28		 jbe	 SHORT $LN98@do_put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b0	8b 55 d0	 mov	 edx, DWORD PTR __Buf$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001b3	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001b4	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b6	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bc	72 10		 jb	 SHORT $LN103@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001be	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c1	83 c1 23	 add	 ecx, 35			; 00000023H
  001c4	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c6	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c9	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cc	77 29		 ja	 SHORT $LN115@do_put
$LN103@do_put:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ce	51		 push	 ecx
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d5	83 c4 08	 add	 esp, 8
$LN98@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1375 :         return _Fput_v3(_Dest, _Iosbase, _Fill, _Buf.c_str(), _Ngen, _Is_finite);

  001d8	8b c6		 mov	 eax, esi

; 1376 :     }

  001da	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001dd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e4	59		 pop	 ecx
  001e5	5f		 pop	 edi
  001e6	5e		 pop	 esi
  001e7	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ea	33 cd		 xor	 ecx, ebp
  001ec	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f1	8b e5		 mov	 esp, ebp
  001f3	5d		 pop	 ebp
  001f4	c2 1c 00	 ret	 28			; 0000001cH
$LN115@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f7	6a 00		 push	 0
  001f9	6a 00		 push	 0
  001fb	6a 00		 push	 0
  001fd	6a 00		 push	 0
  001ff	6a 00		 push	 0
  00201	e8 00 00 00 00	 call	 __invoke_watson
$LN113@do_put:
  00206	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z$0:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Buf$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WN@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z
_TEXT	SEGMENT
_this$1$ = -80						; size = 4
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1343 :         unsigned long long _Val) const { // put formatted unsigned long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00019	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1541 :         *_Ptr++    = '%';

  0001c	c6 45 f4 25	 mov	 BYTE PTR __Fmt$[ebp], 37 ; 00000025H

; 1344 :         char _Buf[2 * _Max_int_dig];
; 1345 :         char _Fmt[8];
; 1346 : 
; 1347 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00020	8b 57 14	 mov	 edx, DWORD PTR [edi+20]

; 1543 :         if (_Flags & ios_base::showpos) {

  00023	8b f2		 mov	 esi, edx
  00025	83 e6 20	 and	 esi, 32			; 00000020H
  00028	74 04		 je	 SHORT $LN4@do_put

; 1544 :             *_Ptr++ = '+';

  0002a	c6 45 f5 2b	 mov	 BYTE PTR __Fmt$[ebp+1], 43 ; 0000002bH
$LN4@do_put:

; 1545 :         }
; 1546 : 
; 1547 :         if (_Flags & ios_base::showbase) {

  0002e	85 f6		 test	 esi, esi
  00030	8d 45 f5	 lea	 eax, DWORD PTR __Fmt$[ebp+1]
  00033	8d 4d f6	 lea	 ecx, DWORD PTR __Fmt$[ebp+2]
  00036	0f 45 c1	 cmovne	 eax, ecx
  00039	f6 c2 08	 test	 dl, 8
  0003c	74 04		 je	 SHORT $LN5@do_put

; 1548 :             *_Ptr++ = '#';

  0003e	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00041	40		 inc	 eax
$LN5@do_put:

; 1549 :         }
; 1550 : 
; 1551 :         if (_Spec[0] != 'L') {
; 1552 :             *_Ptr++ = _Spec[0]; // qualifier
; 1553 :         } else { // change L to I64
; 1554 :             *_Ptr++ = 'I';
; 1555 :             *_Ptr++ = '6';
; 1556 :             *_Ptr++ = '4';
; 1557 :         }
; 1558 : 
; 1559 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  00042	8b ca		 mov	 ecx, edx
  00044	66 c7 00 49 36	 mov	 WORD PTR [eax], 13897	; 00003649H
  00049	81 e1 00 0e 00
	00		 and	 ecx, 3584		; 00000e00H
  0004f	c6 40 02 34	 mov	 BYTE PTR [eax+2], 52	; 00000034H

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00053	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00059	75 04		 jne	 SHORT $LN11@do_put
  0005b	b2 6f		 mov	 dl, 111			; 0000006fH
  0005d	eb 17		 jmp	 SHORT $LN10@do_put
$LN11@do_put:
  0005f	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  00065	74 04		 je	 SHORT $LN9@do_put
  00067	b2 75		 mov	 dl, 117			; 00000075H
  00069	eb 0b		 jmp	 SHORT $LN10@do_put
$LN9@do_put:
  0006b	c0 e2 03	 shl	 dl, 3
  0006e	f6 d2		 not	 dl
  00070	80 e2 20	 and	 dl, 32			; 00000020H
  00073	80 ca 58	 or	 dl, 88			; 00000058H
$LN10@do_put:

; 1344 :         char _Buf[2 * _Max_int_dig];
; 1345 :         char _Fmt[8];
; 1346 : 
; 1347 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00076	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00079	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 1344 :         char _Buf[2 * _Max_int_dig];
; 1345 :         char _Fmt[8];
; 1346 : 
; 1347 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0007c	ff 75 1c	 push	 DWORD PTR __Val$[ebp]

; 1564 :         *_Ptr                         = '\0';

  0007f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 1344 :         char _Buf[2 * _Max_int_dig];
; 1345 :         char _Fmt[8];
; 1346 : 
; 1347 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00083	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00086	50		 push	 eax
  00087	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0008a	6a 40		 push	 64			; 00000040H
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _sprintf_s
  00092	50		 push	 eax
  00093	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00096	50		 push	 eax
  00097	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0009a	57		 push	 edi
  0009b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0009e	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  000a1	53		 push	 ebx
  000a2	ff 75 b0	 push	 DWORD PTR _this$1$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1348 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "Lu", _Iosbase.flags()), _Val)));
; 1349 :     }

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	83 c4 34	 add	 esp, 52			; 00000034H
  000b0	8b c3		 mov	 eax, ebx
  000b2	33 cd		 xor	 ecx, ebp
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_K@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z
_TEXT	SEGMENT
_this$1$ = -80						; size = 4
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 8
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 8
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1334 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long long _Val) const { // put formatted long long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	8b 5d 08	 mov	 ebx, DWORD PTR ___$ReturnUdt$[ebp]
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00019	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1541 :         *_Ptr++    = '%';

  0001c	c6 45 f4 25	 mov	 BYTE PTR __Fmt$[ebp], 37 ; 00000025H

; 1335 :         char _Buf[2 * _Max_int_dig];
; 1336 :         char _Fmt[8];
; 1337 : 
; 1338 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00020	8b 57 14	 mov	 edx, DWORD PTR [edi+20]

; 1543 :         if (_Flags & ios_base::showpos) {

  00023	8b f2		 mov	 esi, edx
  00025	83 e6 20	 and	 esi, 32			; 00000020H
  00028	74 04		 je	 SHORT $LN4@do_put

; 1544 :             *_Ptr++ = '+';

  0002a	c6 45 f5 2b	 mov	 BYTE PTR __Fmt$[ebp+1], 43 ; 0000002bH
$LN4@do_put:

; 1545 :         }
; 1546 : 
; 1547 :         if (_Flags & ios_base::showbase) {

  0002e	85 f6		 test	 esi, esi
  00030	8d 45 f5	 lea	 eax, DWORD PTR __Fmt$[ebp+1]
  00033	8d 4d f6	 lea	 ecx, DWORD PTR __Fmt$[ebp+2]
  00036	0f 45 c1	 cmovne	 eax, ecx
  00039	f6 c2 08	 test	 dl, 8
  0003c	74 04		 je	 SHORT $LN5@do_put

; 1548 :             *_Ptr++ = '#';

  0003e	c6 00 23	 mov	 BYTE PTR [eax], 35	; 00000023H
  00041	40		 inc	 eax
$LN5@do_put:

; 1549 :         }
; 1550 : 
; 1551 :         if (_Spec[0] != 'L') {
; 1552 :             *_Ptr++ = _Spec[0]; // qualifier
; 1553 :         } else { // change L to I64
; 1554 :             *_Ptr++ = 'I';
; 1555 :             *_Ptr++ = '6';
; 1556 :             *_Ptr++ = '4';
; 1557 :         }
; 1558 : 
; 1559 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  00042	8b ca		 mov	 ecx, edx
  00044	66 c7 00 49 36	 mov	 WORD PTR [eax], 13897	; 00003649H
  00049	81 e1 00 0e 00
	00		 and	 ecx, 3584		; 00000e00H
  0004f	c6 40 02 34	 mov	 BYTE PTR [eax+2], 52	; 00000034H

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00053	81 f9 00 04 00
	00		 cmp	 ecx, 1024		; 00000400H
  00059	75 04		 jne	 SHORT $LN11@do_put
  0005b	b2 6f		 mov	 dl, 111			; 0000006fH
  0005d	eb 17		 jmp	 SHORT $LN10@do_put
$LN11@do_put:
  0005f	81 f9 00 08 00
	00		 cmp	 ecx, 2048		; 00000800H
  00065	74 04		 je	 SHORT $LN9@do_put
  00067	b2 64		 mov	 dl, 100			; 00000064H
  00069	eb 0b		 jmp	 SHORT $LN10@do_put
$LN9@do_put:
  0006b	c0 e2 03	 shl	 dl, 3
  0006e	f6 d2		 not	 dl
  00070	80 e2 20	 and	 dl, 32			; 00000020H
  00073	80 ca 58	 or	 dl, 88			; 00000058H
$LN10@do_put:

; 1335 :         char _Buf[2 * _Max_int_dig];
; 1336 :         char _Fmt[8];
; 1337 : 
; 1338 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00076	ff 75 20	 push	 DWORD PTR __Val$[ebp+4]

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00079	88 50 03	 mov	 BYTE PTR [eax+3], dl

; 1335 :         char _Buf[2 * _Max_int_dig];
; 1336 :         char _Fmt[8];
; 1337 : 
; 1338 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0007c	ff 75 1c	 push	 DWORD PTR __Val$[ebp]

; 1564 :         *_Ptr                         = '\0';

  0007f	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 1335 :         char _Buf[2 * _Max_int_dig];
; 1336 :         char _Fmt[8];
; 1337 : 
; 1338 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00083	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00086	50		 push	 eax
  00087	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0008a	6a 40		 push	 64			; 00000040H
  0008c	50		 push	 eax
  0008d	e8 00 00 00 00	 call	 _sprintf_s
  00092	50		 push	 eax
  00093	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  00096	50		 push	 eax
  00097	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  0009a	57		 push	 edi
  0009b	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  0009e	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  000a1	53		 push	 ebx
  000a2	ff 75 b0	 push	 DWORD PTR _this$1$[ebp]
  000a5	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1339 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "Ld", _Iosbase.flags()), _Val)));
; 1340 :     }

  000aa	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000ad	83 c4 34	 add	 esp, 52			; 00000034H
  000b0	8b c3		 mov	 eax, ebx
  000b2	33 cd		 xor	 ecx, ebp
  000b4	5f		 pop	 edi
  000b5	5e		 pop	 esi
  000b6	5b		 pop	 ebx
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	8b e5		 mov	 esp, ebp
  000be	5d		 pop	 ebp
  000bf	c2 1c 00	 ret	 28			; 0000001cH
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_J@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z
_TEXT	SEGMENT
_this$1$ = -80						; size = 4
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1325 :         unsigned long _Val) const { // put formatted unsigned long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00019	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1326 :         char _Buf[2 * _Max_int_dig];
; 1327 :         char _Fmt[6];
; 1328 : 
; 1329 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 1543 :         if (_Flags & ios_base::showpos) {

  0001f	8b d0		 mov	 edx, eax
  00021	c6 45 f4 25	 mov	 BYTE PTR __Fmt$[ebp], 37 ; 00000025H
  00025	83 e2 20	 and	 edx, 32			; 00000020H
  00028	74 04		 je	 SHORT $LN4@do_put

; 1544 :             *_Ptr++ = '+';

  0002a	c6 45 f5 2b	 mov	 BYTE PTR __Fmt$[ebp+1], 43 ; 0000002bH
$LN4@do_put:

; 1545 :         }
; 1546 : 
; 1547 :         if (_Flags & ios_base::showbase) {

  0002e	8b 5d b0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00031	8d 4d f5	 lea	 ecx, DWORD PTR __Fmt$[ebp+1]
  00034	85 d2		 test	 edx, edx
  00036	8d 55 f6	 lea	 edx, DWORD PTR __Fmt$[ebp+2]
  00039	0f 45 ca	 cmovne	 ecx, edx
  0003c	a8 08		 test	 al, 8
  0003e	74 04		 je	 SHORT $LN5@do_put

; 1548 :             *_Ptr++ = '#';

  00040	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00043	41		 inc	 ecx
$LN5@do_put:

; 1549 :         }
; 1550 : 
; 1551 :         if (_Spec[0] != 'L') {
; 1552 :             *_Ptr++ = _Spec[0]; // qualifier
; 1553 :         } else { // change L to I64
; 1554 :             *_Ptr++ = 'I';
; 1555 :             *_Ptr++ = '6';
; 1556 :             *_Ptr++ = '4';
; 1557 :         }
; 1558 : 
; 1559 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  00044	8b d0		 mov	 edx, eax
  00046	c6 01 6c	 mov	 BYTE PTR [ecx], 108	; 0000006cH
  00049	81 e2 00 0e 00
	00		 and	 edx, 3584		; 00000e00H

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  0004f	81 fa 00 04 00
	00		 cmp	 edx, 1024		; 00000400H
  00055	75 04		 jne	 SHORT $LN11@do_put
  00057	b0 6f		 mov	 al, 111			; 0000006fH
  00059	eb 15		 jmp	 SHORT $LN10@do_put
$LN11@do_put:
  0005b	81 fa 00 08 00
	00		 cmp	 edx, 2048		; 00000800H
  00061	74 04		 je	 SHORT $LN9@do_put
  00063	b0 75		 mov	 al, 117			; 00000075H
  00065	eb 09		 jmp	 SHORT $LN10@do_put
$LN9@do_put:
  00067	c0 e0 03	 shl	 al, 3
  0006a	f6 d0		 not	 al
  0006c	24 20		 and	 al, 32			; 00000020H
  0006e	0c 58		 or	 al, 88			; 00000058H
$LN10@do_put:

; 1326 :         char _Buf[2 * _Max_int_dig];
; 1327 :         char _Fmt[6];
; 1328 : 
; 1329 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00070	ff 75 1c	 push	 DWORD PTR __Val$[ebp]

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00073	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 1326 :         char _Buf[2 * _Max_int_dig];
; 1327 :         char _Fmt[6];
; 1328 : 
; 1329 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00076	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00079	50		 push	 eax
  0007a	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]

; 1564 :         *_Ptr                         = '\0';

  0007d	c6 41 02 00	 mov	 BYTE PTR [ecx+2], 0

; 1326 :         char _Buf[2 * _Max_int_dig];
; 1327 :         char _Fmt[6];
; 1328 : 
; 1329 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00081	6a 40		 push	 64			; 00000040H
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _sprintf_s
  00089	50		 push	 eax
  0008a	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0008d	50		 push	 eax
  0008e	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00091	56		 push	 esi
  00092	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00095	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00098	57		 push	 edi
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1330 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "lu", _Iosbase.flags()), _Val)));
; 1331 :     }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	83 c4 30	 add	 esp, 48			; 00000030H
  000a5	8b c7		 mov	 eax, edi
  000a7	33 cd		 xor	 ecx, ebp
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WK@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z
_TEXT	SEGMENT
_this$1$ = -80						; size = 4
__Buf$ = -76						; size = 64
__Fmt$ = -12						; size = 6
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 4
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1316 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, long _Val) const { // put formatted long to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 50	 sub	 esp, 80			; 00000050H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	8b 75 14	 mov	 esi, DWORD PTR __Iosbase$[ebp]
  00015	57		 push	 edi
  00016	8b 7d 08	 mov	 edi, DWORD PTR ___$ReturnUdt$[ebp]
  00019	89 4d b0	 mov	 DWORD PTR _this$1$[ebp], ecx

; 1317 :         char _Buf[2 * _Max_int_dig];
; 1318 :         char _Fmt[6];
; 1319 : 
; 1320 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  0001c	8b 46 14	 mov	 eax, DWORD PTR [esi+20]

; 1543 :         if (_Flags & ios_base::showpos) {

  0001f	8b d0		 mov	 edx, eax
  00021	c6 45 f4 25	 mov	 BYTE PTR __Fmt$[ebp], 37 ; 00000025H
  00025	83 e2 20	 and	 edx, 32			; 00000020H
  00028	74 04		 je	 SHORT $LN4@do_put

; 1544 :             *_Ptr++ = '+';

  0002a	c6 45 f5 2b	 mov	 BYTE PTR __Fmt$[ebp+1], 43 ; 0000002bH
$LN4@do_put:

; 1545 :         }
; 1546 : 
; 1547 :         if (_Flags & ios_base::showbase) {

  0002e	8b 5d b0	 mov	 ebx, DWORD PTR _this$1$[ebp]
  00031	8d 4d f5	 lea	 ecx, DWORD PTR __Fmt$[ebp+1]
  00034	85 d2		 test	 edx, edx
  00036	8d 55 f6	 lea	 edx, DWORD PTR __Fmt$[ebp+2]
  00039	0f 45 ca	 cmovne	 ecx, edx
  0003c	a8 08		 test	 al, 8
  0003e	74 04		 je	 SHORT $LN5@do_put

; 1548 :             *_Ptr++ = '#';

  00040	c6 01 23	 mov	 BYTE PTR [ecx], 35	; 00000023H
  00043	41		 inc	 ecx
$LN5@do_put:

; 1549 :         }
; 1550 : 
; 1551 :         if (_Spec[0] != 'L') {
; 1552 :             *_Ptr++ = _Spec[0]; // qualifier
; 1553 :         } else { // change L to I64
; 1554 :             *_Ptr++ = 'I';
; 1555 :             *_Ptr++ = '6';
; 1556 :             *_Ptr++ = '4';
; 1557 :         }
; 1558 : 
; 1559 :         ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;

  00044	8b d0		 mov	 edx, eax
  00046	c6 01 6c	 mov	 BYTE PTR [ecx], 108	; 0000006cH
  00049	81 e2 00 0e 00
	00		 and	 edx, 3584		; 00000e00H

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  0004f	81 fa 00 04 00
	00		 cmp	 edx, 1024		; 00000400H
  00055	75 04		 jne	 SHORT $LN11@do_put
  00057	b0 6f		 mov	 al, 111			; 0000006fH
  00059	eb 15		 jmp	 SHORT $LN10@do_put
$LN11@do_put:
  0005b	81 fa 00 08 00
	00		 cmp	 edx, 2048		; 00000800H
  00061	74 04		 je	 SHORT $LN9@do_put
  00063	b0 64		 mov	 al, 100			; 00000064H
  00065	eb 09		 jmp	 SHORT $LN10@do_put
$LN9@do_put:
  00067	c0 e0 03	 shl	 al, 3
  0006a	f6 d0		 not	 al
  0006c	24 20		 and	 al, 32			; 00000020H
  0006e	0c 58		 or	 al, 88			; 00000058H
$LN10@do_put:

; 1317 :         char _Buf[2 * _Max_int_dig];
; 1318 :         char _Fmt[6];
; 1319 : 
; 1320 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00070	ff 75 1c	 push	 DWORD PTR __Val$[ebp]

; 1560 :         *_Ptr++                       = _Basefield == ios_base::oct  ? 'o'

  00073	88 41 01	 mov	 BYTE PTR [ecx+1], al

; 1317 :         char _Buf[2 * _Max_int_dig];
; 1318 :         char _Fmt[6];
; 1319 : 
; 1320 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00076	8d 45 f4	 lea	 eax, DWORD PTR __Fmt$[ebp]
  00079	50		 push	 eax
  0007a	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]

; 1564 :         *_Ptr                         = '\0';

  0007d	c6 41 02 00	 mov	 BYTE PTR [ecx+2], 0

; 1317 :         char _Buf[2 * _Max_int_dig];
; 1318 :         char _Fmt[6];
; 1319 : 
; 1320 :         return _Iput(_Dest, _Iosbase, _Fill, _Buf,

  00081	6a 40		 push	 64			; 00000040H
  00083	50		 push	 eax
  00084	e8 00 00 00 00	 call	 _sprintf_s
  00089	50		 push	 eax
  0008a	8d 45 b4	 lea	 eax, DWORD PTR __Buf$[ebp]
  0008d	50		 push	 eax
  0008e	ff 75 18	 push	 DWORD PTR __Fill$[ebp]
  00091	56		 push	 esi
  00092	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00095	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00098	57		 push	 edi
  00099	53		 push	 ebx
  0009a	e8 00 00 00 00	 call	 ?_Iput@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WPADI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Iput

; 1321 :             static_cast<size_t>(_CSTD sprintf_s(_Buf, sizeof(_Buf), _Ifmt(_Fmt, "ld", _Iosbase.flags()), _Val)));
; 1322 :     }

  0009f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000a2	83 c4 30	 add	 esp, 48			; 00000030H
  000a5	8b c7		 mov	 eax, edi
  000a7	33 cd		 xor	 ecx, ebp
  000a9	5f		 pop	 edi
  000aa	5e		 pop	 esi
  000ab	5b		 pop	 ebx
  000ac	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c2 18 00	 ret	 24			; 00000018H
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_WJ@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
_TEXT	SEGMENT
___$ReturnUdt$GSCopy$1$ = -84				; size = 4
$T2 = -80						; size = 8
$T3 = -80						; size = 8
$T4 = -80						; size = 8
_this$GSCopy$1$ = -72					; size = 4
__Fill$GSCopy$1$ = -68					; size = 4
$T5 = -64						; size = 24
$T6 = -64						; size = 24
__Str$7 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
__Dest$ = 12						; size = 8
__Iosbase$ = 20						; size = 4
__Fill$ = 24						; size = 2
__Val$ = 28						; size = 1
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put, COMDAT
; _this$ = ecx

; 1284 :         _OutIt _Dest, ios_base& _Iosbase, _Elem _Fill, bool _Val) const { // put formatted bool to _Dest

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 48	 sub	 esp, 72			; 00000048H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	89 4d b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], ecx
  0002d	8b 7d 14	 mov	 edi, DWORD PTR __Iosbase$[ebp]
  00030	0f b7 45 18	 movzx	 eax, WORD PTR __Fill$[ebp]
  00034	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00037	89 75 ac	 mov	 DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp], esi

; 1285 :         if (!(_Iosbase.flags() & ios_base::boolalpha)) {

  0003a	f7 47 14 00 40
	00 00		 test	 DWORD PTR [edi+20], 16384 ; 00004000H
  00041	89 45 bc	 mov	 DWORD PTR __Fill$GSCopy$1$[ebp], eax
  00044	75 1a		 jne	 SHORT $LN2@do_put

; 1286 :             return do_put(_Dest, _Iosbase, _Fill, static_cast<long>(_Val));

  00046	0f b6 45 1c	 movzx	 eax, BYTE PTR __Val$[ebp]
  0004a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0004c	50		 push	 eax
  0004d	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$1$[ebp]
  00050	57		 push	 edi
  00051	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00054	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00057	56		 push	 esi
  00058	ff 52 24	 call	 DWORD PTR [edx+36]
  0005b	e9 79 01 00 00	 jmp	 $LN82@do_put
$LN2@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  00060	8b 47 30	 mov	 eax, DWORD PTR [edi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00063	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00066	89 4d b4	 mov	 DWORD PTR $T2[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  00069	8b 01		 mov	 eax, DWORD PTR [ecx]
  0006b	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1288 :             const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  0006e	8d 45 b0	 lea	 eax, DWORD PTR $T2[ebp]
  00071	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 ??$use_facet@V?$numpunct@_W@std@@@std@@YAABV?$numpunct@_W@0@ABVlocale@0@@Z ; std::use_facet<std::numpunct<wchar_t> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  0007e	8b 4d b4	 mov	 ecx, DWORD PTR $T2[ebp+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1288 :             const auto& _Punct_fac = _STD use_facet<numpunct<_Elem>>(_Iosbase.getloc());

  00081	83 c4 04	 add	 esp, 4
  00084	8b f0		 mov	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  00086	85 c9		 test	 ecx, ecx
  00088	74 15		 je	 SHORT $LN26@do_put

; 355  :             delete _Ptr->_Decref();

  0008a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008c	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0008f	ff d2		 call	 edx
  00091	85 c0		 test	 eax, eax
  00093	74 0a		 je	 SHORT $LN26@do_put
  00095	8b 08		 mov	 ecx, DWORD PTR [eax]
  00097	6a 01		 push	 1
  00099	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009b	8b c8		 mov	 ecx, eax
  0009d	ff d2		 call	 edx
$LN26@do_put:
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 860  :         _My_data._Mysize = 0;

  000a2	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+16], 0

; 861  :         _My_data._Myres  = _Small_string_capacity;
; 862  :         _My_data._Activate_SSO_buffer();
; 863  : 
; 864  :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000a9	33 c0		 xor	 eax, eax
  000ab	c7 45 ec 07 00
	00 00		 mov	 DWORD PTR __Str$7[ebp+20], 7

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000b2	0f 11 45 d8	 movups	 XMMWORD PTR __Str$7[ebp], xmm0

; 865  :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  000b6	66 89 45 d8	 mov	 WORD PTR __Str$7[ebp], ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1290 :             if (_Val) {

  000ba	80 7d 1c 00	 cmp	 BYTE PTR __Val$[ebp], 0
  000be	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
  000c1	8b 06		 mov	 eax, DWORD PTR [esi]
  000c3	51		 push	 ecx
  000c4	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  000cb	8b ce		 mov	 ecx, esi
  000cd	74 05		 je	 SHORT $LN4@do_put

; 116  :         return do_truename();

  000cf	ff 50 1c	 call	 DWORD PTR [eax+28]

; 1291 :                 _Str.assign(_Punct_fac.truename());
; 1292 :             } else {

  000d2	eb 03		 jmp	 SHORT $LN206@do_put
$LN4@do_put:

; 112  :         return do_falsename();

  000d4	ff 50 18	 call	 DWORD PTR [eax+24]
$LN206@do_put:

; 1293 :                 _Str.assign(_Punct_fac.falsename());
; 1294 :             }
; 1295 : 
; 1296 :             size_t _Fillcount;
; 1297 :             if (_Iosbase.width() <= 0 || static_cast<size_t>(_Iosbase.width()) <= _Str.size()) {

  000d7	0f 10 45 c0	 movups	 xmm0, XMMWORD PTR $T6[ebp]
  000db	33 c0		 xor	 eax, eax
  000dd	8d 4d c0	 lea	 ecx, DWORD PTR $T6[ebp]
  000e0	66 89 45 c0	 mov	 WORD PTR $T6[ebp], ax
  000e4	0f 11 45 d8	 movups	 XMMWORD PTR __Str$7[ebp], xmm0
  000e8	f3 0f 7e 45 d0	 movq	 xmm0, QWORD PTR $T6[ebp+16]
  000ed	66 0f d6 45 e8	 movq	 QWORD PTR __Str$7[ebp+16], xmm0
  000f2	89 45 d0	 mov	 DWORD PTR $T6[ebp+16], eax
  000f5	c7 45 d4 07 00
	00 00		 mov	 DWORD PTR $T6[ebp+20], 7
  000fc	e8 00 00 00 00	 call	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
  00101	83 7f 24 00	 cmp	 DWORD PTR [edi+36], 0
  00105	8b 77 20	 mov	 esi, DWORD PTR [edi+32]
  00108	8b 45 e8	 mov	 eax, DWORD PTR __Str$7[ebp+16]
  0010b	7c 0e		 jl	 SHORT $LN8@do_put
  0010d	7f 04		 jg	 SHORT $LN202@do_put
  0010f	85 f6		 test	 esi, esi
  00111	74 08		 je	 SHORT $LN8@do_put
$LN202@do_put:
  00113	3b f0		 cmp	 esi, eax
  00115	76 04		 jbe	 SHORT $LN8@do_put

; 1299 :             } else {
; 1300 :                 _Fillcount = static_cast<size_t>(_Iosbase.width()) - _Str.size();

  00117	2b f0		 sub	 esi, eax
  00119	eb 02		 jmp	 SHORT $LN7@do_put
$LN8@do_put:

; 1298 :                 _Fillcount = 0;

  0011b	33 f6		 xor	 esi, esi
$LN7@do_put:

; 1301 :             }
; 1302 : 
; 1303 :             if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left) { // put leading fill

  0011d	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00120	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00125	83 f8 40	 cmp	 eax, 64			; 00000040H
  00128	74 28		 je	 SHORT $LN203@do_put

; 1304 :                 _Dest      = _Rep(_Dest, _Fill, _Fillcount);

  0012a	56		 push	 esi
  0012b	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$1$[ebp]
  0012e	8d 45 b0	 lea	 eax, DWORD PTR $T3[ebp]
  00131	ff 75 10	 push	 DWORD PTR __Dest$[ebp+4]
  00134	ff 75 0c	 push	 DWORD PTR __Dest$[ebp]
  00137	50		 push	 eax
  00138	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  0013b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
  00140	83 c4 18	 add	 esp, 24			; 00000018H

; 1305 :                 _Fillcount = 0;

  00143	33 f6		 xor	 esi, esi
  00145	8b 08		 mov	 ecx, DWORD PTR [eax]
  00147	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0014a	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  0014d	89 55 10	 mov	 DWORD PTR __Dest$[ebp+4], edx
  00150	eb 06		 jmp	 SHORT $LN9@do_put
$LN203@do_put:

; 1301 :             }
; 1302 : 
; 1303 :             if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left) { // put leading fill

  00152	8b 55 10	 mov	 edx, DWORD PTR __Dest$[ebp+4]
  00155	8b 4d 0c	 mov	 ecx, DWORD PTR __Dest$[ebp]
$LN9@do_put:

; 1307 :             _Dest = _Put(_Dest, _Str.c_str(), _Str.size()); // put field

  00158	ff 75 e8	 push	 DWORD PTR __Str$7[ebp+16]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0015b	83 7d ec 07	 cmp	 DWORD PTR __Str$7[ebp+20], 7

; 444  :         const value_type* _Result = _Bx._Buf;

  0015f	8d 45 d8	 lea	 eax, DWORD PTR __Str$7[ebp]

; 445  :         if (_Large_mode_engaged()) {

  00162	0f 47 45 d8	 cmova	 eax, DWORD PTR __Str$7[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1307 :             _Dest = _Put(_Dest, _Str.c_str(), _Str.size()); // put field

  00166	50		 push	 eax
  00167	52		 push	 edx
  00168	51		 push	 ecx
  00169	8d 45 b0	 lea	 eax, DWORD PTR $T4[ebp]
  0016c	50		 push	 eax
  0016d	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00170	e8 00 00 00 00	 call	 ?_Put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@PB_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Put

; 1309 :             return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  00175	56		 push	 esi
  00176	ff 75 bc	 push	 DWORD PTR __Fill$GSCopy$1$[ebp]
  00179	8b 75 ac	 mov	 esi, DWORD PTR ___$ReturnUdt$GSCopy$1$[ebp]
  0017c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0017e	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00181	50		 push	 eax
  00182	51		 push	 ecx
  00183	56		 push	 esi
  00184	ff 75 b8	 push	 DWORD PTR _this$GSCopy$1$[ebp]
  00187	89 4d 0c	 mov	 DWORD PTR __Dest$[ebp], ecx
  0018a	89 45 10	 mov	 DWORD PTR __Dest$[ebp+4], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  0018d	c7 47 20 00 00
	00 00		 mov	 DWORD PTR [edi+32], 0
  00194	c7 47 24 00 00
	00 00		 mov	 DWORD PTR [edi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1309 :             return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  0019b	e8 00 00 00 00	 call	 ?_Rep@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@ABA?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@_WI@Z ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::_Rep
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001a0	8b 45 ec	 mov	 eax, DWORD PTR __Str$7[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1309 :             return _Rep(_Dest, _Fill, _Fillcount); // put trailing fill

  001a3	83 c4 30	 add	 esp, 48			; 00000030H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001a6	83 f8 07	 cmp	 eax, 7

; 3083 :         if (_My_data._Large_mode_engaged()) {

  001a9	76 2e		 jbe	 SHORT $LN82@do_put
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001ab	8b 55 d8	 mov	 edx, DWORD PTR __Str$7[ebp]
  001ae	8d 0c 45 02 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+2]
  001b5	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001bd	72 10		 jb	 SHORT $LN87@do_put

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001bf	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001c2	83 c1 23	 add	 ecx, 35			; 00000023H
  001c5	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c7	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ca	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001cd	77 29		 ja	 SHORT $LN208@do_put
$LN87@do_put:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001cf	51		 push	 ecx
  001d0	52		 push	 edx
  001d1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d6	83 c4 08	 add	 esp, 8
$LN82@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1311 :     }

  001d9	8b c6		 mov	 eax, esi
  001db	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001de	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e5	59		 pop	 ecx
  001e6	5f		 pop	 edi
  001e7	5e		 pop	 esi
  001e8	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001eb	33 cd		 xor	 ecx, ebp
  001ed	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f2	8b e5		 mov	 esp, ebp
  001f4	5d		 pop	 ebp
  001f5	c2 18 00	 ret	 24			; 00000018H
$LN208@do_put:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001f8	6a 00		 push	 0
  001fa	6a 00		 push	 0
  001fc	6a 00		 push	 0
  001fe	6a 00		 push	 0
  00200	6a 00		 push	 0
  00202	e8 00 00 00 00	 call	 __invoke_watson
$LN205@do_put:
  00207	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
__unwindfunclet$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z$1:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR __Str$7[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a ac	 mov	 ecx, DWORD PTR [edx-84]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?do_put@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MBE?AV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@2@V32@AAVios_base@2@_W_N@Z ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::do_put
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
;	COMDAT ??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ
_TEXT	SEGMENT
??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ PROC ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >, COMDAT
; _this$ = ecx

; 1224 :     __CLR_OR_THIS_CALL ~num_put() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@MAE@XZ ENDP ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::~num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -76						; size = 52
__Lock$3 = -24						; size = 4
$T4 = -24						; size = 4
$T5 = -20						; size = 4
__Psave$1$ = -20					; size = 4
__Lock$6 = -16						; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$8 = 8					; size = 4
??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z PROC ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >, COMDAT

; 435  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	33 db		 xor	 ebx, ebx

; 436  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  0002a	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  0002d	53		 push	 ebx
  0002e	89 5d e8	 mov	 DWORD PTR $T4[ebp], ebx
  00031	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00036	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id

; 437  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
  00041	89 5d fc	 mov	 DWORD PTR __$EHRec$[ebp+8], ebx
  00044	89 45 ec	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00047	85 ff		 test	 edi, edi
  00049	75 2f		 jne	 SHORT $LN11@use_facet

; 92   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  0004b	57		 push	 edi
  0004c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0004f	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 93   :                 if (_Id == 0) {

  00054	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, edi ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
  0005a	75 10		 jne	 SHORT $LN12@use_facet

; 94   :                     _Id = static_cast<size_t>(++_Id_cnt);

  0005c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00061	40		 inc	 eax
  00062	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00067	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A, eax ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
$LN12@use_facet:

; 95   :                 }
; 96   :                 _END_LOCK()

  0006c	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$6[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  00074	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@2V0locale@2@A ; std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > >::id
$LN11@use_facet:

; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  0007a	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  0007d	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  00084	89 4d f0	 mov	 DWORD PTR $T7[ebp], ecx
  00087	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0008a	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  0008d	73 16		 jae	 SHORT $LN19@use_facet
  0008f	0f ae e8	 lfence
  00092	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00095	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00098	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  0009b	85 f6		 test	 esi, esi
  0009d	0f 85 b1 00 00
	00		 jne	 $LN68@use_facet
  000a3	eb 05		 jmp	 SHORT $LN72@use_facet
$LN19@use_facet:

; 374  :     }
; 375  : 
; 376  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000a5	33 f6		 xor	 esi, esi
  000a7	89 4d f0	 mov	 DWORD PTR $T7[ebp], ecx
$LN72@use_facet:

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  000aa	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000ae	74 16		 je	 SHORT $LN14@use_facet

; 379  :             return _Facptr; // found facet or not transparent
; 380  :         }
; 381  : 
; 382  :         // look in current locale
; 383  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000b0	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 384  :         if (_Id < _Ptr0->_Facetcount) {

  000b5	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000b8	73 14		 jae	 SHORT $LN73@use_facet

; 385  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000ba	0f ae e8	 lfence
  000bd	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c0	8b 75 f0	 mov	 esi, DWORD PTR $T7[ebp]
  000c3	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 438  : 
; 439  :     const size_t _Id         = _Facet::id._Get_index();
; 440  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 441  : 
; 442  :     if (!_Pf) {

  000c6	85 f6		 test	 esi, esi
  000c8	0f 85 86 00 00
	00		 jne	 $LN68@use_facet
$LN73@use_facet:

; 443  :         if (_Psave) {

  000ce	8b 45 ec	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000d1	85 c0		 test	 eax, eax
  000d3	74 04		 je	 SHORT $LN3@use_facet

; 444  :             _Pf = _Psave; // lazy facet already allocated

  000d5	8b f0		 mov	 esi, eax

; 445  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000d7	eb 7b		 jmp	 SHORT $LN68@use_facet
$LN3@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1215 :             *_Ppf = new num_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  000d9	6a 08		 push	 8
  000db	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e0	8b f0		 mov	 esi, eax
  000e2	83 c4 04	 add	 esp, 4
  000e5	89 75 ec	 mov	 DWORD PTR $T5[ebp], esi
  000e8	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000ec	85 f6		 test	 esi, esi
  000ee	74 38		 je	 SHORT $LN24@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f0	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  000f3	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000f6	85 c9		 test	 ecx, ecx
  000f8	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  000fa	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  000fd	85 c0		 test	 eax, eax
  000ff	75 0a		 jne	 SHORT $LN33@use_facet
  00101	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00104	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  00106	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1215 :             *_Ppf = new num_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  0010b	50		 push	 eax
  0010c	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  0010f	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
  00114	bb 01 00 00 00	 mov	 ebx, 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 143  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  00119	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1235 :     __CLR_OR_THIS_CALL num_put(const _Locinfo& _Lobj, size_t _Refs = 0) : locale::facet(_Refs) {

  00120	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@6B@

; 1215 :             *_Ppf = new num_put<_Elem, _OutIt>(_Locinfo(_Ploc->_C_str()));

  00126	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  00128	33 f6		 xor	 esi, esi
$LN25@use_facet:
  0012a	f6 c3 01	 test	 bl, 1
  0012d	74 08		 je	 SHORT $LN29@use_facet
  0012f	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  00132	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00137	89 75 08	 mov	 DWORD PTR __Psave_guard$8[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 458  :             _Facet_Register(_Pfmod);

  0013a	56		 push	 esi
  0013b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0013f	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 459  : #endif // ^^^ !defined(_M_CEE) ^^^
; 460  : 
; 461  :             _Pfmod->_Incref();

  00144	8b 16		 mov	 edx, DWORD PTR [esi]
  00146	83 c4 04	 add	 esp, 4
  00149	8b ce		 mov	 ecx, esi
  0014b	ff 52 04	 call	 DWORD PTR [edx+4]

; 462  :             _Facetptr<_Facet>::_Psave = _Psave;

  0014e	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >::_Psave
$LN68@use_facet:

; 463  :             _Pf                       = _Psave;
; 464  : 
; 465  :             (void) _Psave_guard.release();
; 466  :         }
; 467  :     }
; 468  : 
; 469  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00154	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00157	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0015c	8b c6		 mov	 eax, esi

; 470  :     _END_LOCK()
; 471  : } // end of use_facet body

  0015e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00161	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00168	59		 pop	 ecx
  00169	5f		 pop	 edi
  0016a	5e		 pop	 esi
  0016b	5b		 pop	 ebx
  0016c	8b e5		 mov	 esp, ebp
  0016e	5d		 pop	 ebp
  0016f	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$0:
  00000	8d 4d e8	 lea	 ecx, DWORD PTR __Lock$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$2:
  00008	6a 08		 push	 8
  0000a	8b 45 ec	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$8[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>, COMDAT
; _this$ = ecx

; 871  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	57		 push	 edi

; 872  :         auto& _My_data = _Mypair._Myval2;
; 873  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 874  : 
; 875  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 876  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 877  :         } else {
; 878  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 879  :         }
; 880  : 
; 881  :         if (_Count > max_size()) {

  00006	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  00009	8b d9		 mov	 ebx, ecx
  0000b	89 5d fc	 mov	 DWORD PTR _this$1$[ebp], ebx
  0000e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00014	77 77		 ja	 SHORT $LN30@Construct

; 883  :         }
; 884  : 
; 885  :         auto& _Al       = _Getal();
; 886  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 887  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 888  : 
; 889  :         if (_Count <= _Small_string_capacity) {

  00016	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  00019	77 23		 ja	 SHORT $LN3@Construct
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0001b	57		 push	 edi
  0001c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 890  :             _My_data._Mysize = _Count;

  0001f	89 7b 10	 mov	 DWORD PTR [ebx+16], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00022	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 891  :             _My_data._Myres  = _Small_string_capacity;

  00023	c7 43 14 0f 00
	00 00		 mov	 DWORD PTR [ebx+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0002a	e8 00 00 00 00	 call	 _memcpy
  0002f	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 898  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00032	c6 04 1f 00	 mov	 BYTE PTR [edi+ebx], 0
  00036	5f		 pop	 edi

; 923  :         } else { // _Strat == _Construct_strategy::_From_string
; 924  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 925  :         }
; 926  : 
; 927  :         _ASAN_STRING_CREATE(*this);
; 928  :         _Proxy._Release();
; 929  :     }

  00037	5b		 pop	 ebx
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c2 08 00	 ret	 8
$LN3@Construct:

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  0003e	8b df		 mov	 ebx, edi
  00040	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00043	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00049	76 07		 jbe	 SHORT $LN9@Construct

; 2980 :             return _Max;

  0004b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00050	eb 0a		 jmp	 SHORT $LN8@Construct
$LN9@Construct:

; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows
; 2984 :             return _Max;
; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00052	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00057	3b d8		 cmp	 ebx, eax
  00059	0f 42 d8	 cmovb	 ebx, eax
$LN8@Construct:

; 825  :         ++_Capacity; // Take null terminator into consideration

  0005c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0005f	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00060	50		 push	 eax
  00061	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 912  :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  00066	8b f0		 mov	 esi, eax

; 913  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00068	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006b	57		 push	 edi
  0006c	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
  0006f	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 913  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00070	89 30		 mov	 DWORD PTR [eax], esi

; 914  : 
; 915  :         _My_data._Mysize = _Count;

  00072	89 78 10	 mov	 DWORD PTR [eax+16], edi

; 916  :         _My_data._Myres  = _New_capacity;

  00075	89 58 14	 mov	 DWORD PTR [eax+20], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00078	e8 00 00 00 00	 call	 _memcpy
  0007d	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 922  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00080	c6 04 3e 00	 mov	 BYTE PTR [esi+edi], 0
  00084	5e		 pop	 esi
  00085	5f		 pop	 edi

; 923  :         } else { // _Strat == _Construct_strategy::_From_string
; 924  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);
; 925  :         }
; 926  : 
; 927  :         _ASAN_STRING_CREATE(*this);
; 928  :         _Proxy._Release();
; 929  :     }

  00086	5b		 pop	 ebx
  00087	8b e5		 mov	 esp, ebp
  00089	5d		 pop	 ebp
  0008a	c2 08 00	 ret	 8
$LN30@Construct:

; 882  :             _Xlen_string(); // result too long

  0008d	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN28@Construct:
  00092	cc		 int	 3
??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z
_TEXT	SEGMENT
_this$1$ = -4						; size = 4
__Arg$ = 8						; size = 4
__Count$ = 12						; size = 4
??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>, COMDAT
; _this$ = ecx

; 871  :     _CONSTEXPR20 void _Construct(const _Char_or_ptr _Arg, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx

; 872  :         auto& _My_data = _Mypair._Myval2;
; 873  :         _STL_INTERNAL_CHECK(!_My_data._Large_mode_engaged());
; 874  : 
; 875  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 876  :             _STL_INTERNAL_STATIC_ASSERT(is_same_v<_Char_or_ptr, _Elem>);
; 877  :         } else {
; 878  :             _STL_INTERNAL_STATIC_ASSERT(_Is_elem_cptr<_Char_or_ptr>::value);
; 879  :         }
; 880  : 
; 881  :         if (_Count > max_size()) {

  00005	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00008	56		 push	 esi
  00009	57		 push	 edi
  0000a	8b f9		 mov	 edi, ecx
  0000c	89 7d fc	 mov	 DWORD PTR _this$1$[ebp], edi
  0000f	81 fb fe ff ff
	7f		 cmp	 ebx, 2147483646		; 7ffffffeH
  00015	0f 87 95 00 00
	00		 ja	 $LN39@Construct

; 883  :         }
; 884  : 
; 885  :         auto& _Al       = _Getal();
; 886  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 887  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 888  : 
; 889  :         if (_Count <= _Small_string_capacity) {

  0001b	83 fb 07	 cmp	 ebx, 7
  0001e	77 29		 ja	 SHORT $LN3@Construct
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00020	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 890  :             _My_data._Mysize = _Count;

  00023	89 5f 10	 mov	 DWORD PTR [edi+16], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00026	56		 push	 esi
  00027	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 891  :             _My_data._Myres  = _Small_string_capacity;

  0002a	c7 47 14 07 00
	00 00		 mov	 DWORD PTR [edi+20], 7
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 _memcpy
  00037	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 929  :     }

  0003a	33 c0		 xor	 eax, eax
  0003c	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax
  00040	5f		 pop	 edi
  00041	5e		 pop	 esi
  00042	5b		 pop	 ebx
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c2 08 00	 ret	 8
$LN3@Construct:

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  00049	8b f3		 mov	 esi, ebx
  0004b	83 ce 07	 or	 esi, 7
  0004e	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00054	76 41		 jbe	 SHORT $LN9@Construct

; 2980 :             return _Max;

  00056	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  0005b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN23@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 122  :     return _Count * _Ty_size;

  00060	03 c0		 add	 eax, eax

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00062	50		 push	 eax

; 122  :     return _Count * _Ty_size;

  00063	0f ae e8	 lfence

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00066	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 912  :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  0006b	8b f8		 mov	 edi, eax

; 913  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0006d	8b 45 fc	 mov	 eax, DWORD PTR _this$1$[ebp]

; 916  :         _My_data._Myres  = _New_capacity;

  00070	89 70 14	 mov	 DWORD PTR [eax+20], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00073	8d 34 1b	 lea	 esi, DWORD PTR [ebx+ebx]
  00076	56		 push	 esi
  00077	ff 75 08	 push	 DWORD PTR __Arg$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 913  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0007a	89 38		 mov	 DWORD PTR [eax], edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007c	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 915  :         _My_data._Mysize = _Count;

  0007d	89 58 10	 mov	 DWORD PTR [eax+16], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00080	e8 00 00 00 00	 call	 _memcpy
  00085	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 929  :     }

  00088	33 c0		 xor	 eax, eax
  0008a	66 89 04 3e	 mov	 WORD PTR [esi+edi], ax
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c2 08 00	 ret	 8
$LN9@Construct:

; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00097	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
  0009c	3b f0		 cmp	 esi, eax
  0009e	0f 42 f0	 cmovb	 esi, eax

; 825  :         ++_Capacity; // Take null terminator into consideration

  000a1	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  000a4	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000a9	76 b5		 jbe	 SHORT $LN23@Construct

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  000ab	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN39@Construct:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 882  :             _Xlen_string(); // result too long

  000b0	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN36@Construct:
  000b5	cc		 int	 3
??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
;	COMDAT ??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
_TEXT	SEGMENT
$T2 = -60						; size = 20
__Ok$ = -40						; size = 8
$T3 = -32						; size = 8
tv756 = -28						; size = 4
$T4 = -28						; size = 4
tv751 = -24						; size = 4
$T5 = -24						; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Data$ = 12						; size = 4
__Size$ = 16						; size = 4
??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z PROC ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>, COMDAT

; 547  :     basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* const _Data, const _SizeT _Size) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 30	 sub	 esp, 48			; 00000030H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 548  :     // insert a character-type sequence into _Ostr as if through a basic_string copy
; 549  :     using _Ostr_t                    = basic_ostream<_Elem, _Traits>;
; 550  :     typename _Ostr_t::iostate _State = _Ostr_t::goodbit;
; 551  : 
; 552  :     _SizeT _Pad;
; 553  :     if (_Ostr.width() <= 0 || static_cast<_SizeT>(_Ostr.width()) <= _Size) {

  0002b	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  0002e	33 ff		 xor	 edi, edi
  00030	89 7d ec	 mov	 DWORD PTR __State$[ebp], edi
  00033	8b 03		 mov	 eax, DWORD PTR [ebx]
  00035	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00038	8b 74 18 20	 mov	 esi, DWORD PTR [eax+ebx+32]
  0003c	39 7c 18 24	 cmp	 DWORD PTR [eax+ebx+36], edi
  00040	7c 11		 jl	 SHORT $LN10@Insert_str
  00042	7f 04		 jg	 SHORT $LN101@Insert_str
  00044	85 f6		 test	 esi, esi
  00046	74 0b		 je	 SHORT $LN10@Insert_str
$LN101@Insert_str:
  00048	8b 45 10	 mov	 eax, DWORD PTR __Size$[ebp]
  0004b	3b f0		 cmp	 esi, eax
  0004d	76 04		 jbe	 SHORT $LN10@Insert_str

; 555  :     } else {
; 556  :         _Pad = static_cast<_SizeT>(_Ostr.width()) - _Size;

  0004f	2b f0		 sub	 esi, eax
  00051	eb 02		 jmp	 SHORT $LN9@Insert_str
$LN10@Insert_str:

; 554  :         _Pad = 0;

  00053	33 f6		 xor	 esi, esi
$LN9@Insert_str:

; 557  :     }
; 558  : 
; 559  :     const typename _Ostr_t::sentry _Ok(_Ostr);

  00055	53		 push	 ebx
  00056	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00059	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 560  : 
; 561  :     if (!_Ok) {

  0005e	80 7d dc 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00062	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00069	75 0a		 jne	 SHORT $LN11@Insert_str

; 562  :         _State |= _Ostr_t::badbit;

  0006b	bf 04 00 00 00	 mov	 edi, 4

; 563  :     } else { // state okay, insert characters

  00070	e9 2f 01 00 00	 jmp	 $LN23@Insert_str
$LN11@Insert_str:

; 564  :         _TRY_IO_BEGIN
; 565  :         if ((_Ostr.flags() & _Ostr_t::adjustfield) != _Ostr_t::left) {

  00075	8b 03		 mov	 eax, DWORD PTR [ebx]
  00077	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  0007b	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0007e	8b 44 18 14	 mov	 eax, DWORD PTR [eax+ebx+20]
  00082	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00087	83 f8 40	 cmp	 eax, 64			; 00000040H
  0008a	74 62		 je	 SHORT $LN98@Insert_str
  0008c	0f 1f 40 00	 npad	 4
$LL4@Insert_str:

; 566  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00090	85 f6		 test	 esi, esi
  00092	74 5a		 je	 SHORT $LN98@Insert_str

; 567  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00094	8b 03		 mov	 eax, DWORD PTR [ebx]
  00096	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00099	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  0009d	0f b7 54 18 40	 movzx	 edx, WORD PTR [eax+ebx+64]
  000a2	89 55 e4	 mov	 DWORD PTR $T4[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  000a5	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  000a8	83 38 00	 cmp	 DWORD PTR [eax], 0
  000ab	74 21		 je	 SHORT $LN72@Insert_str
  000ad	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  000b0	8b 00		 mov	 eax, DWORD PTR [eax]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000b2	85 c0		 test	 eax, eax
  000b4	7e 18		 jle	 SHORT $LN72@Insert_str

; 256  :         --*_IPcount;

  000b6	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  000b9	48		 dec	 eax
  000ba	89 02		 mov	 DWORD PTR [edx], eax

; 257  :         return (*_IPnext)++;

  000bc	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  000bf	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c1	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  000c4	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000c6	8b 45 e4	 mov	 eax, DWORD PTR $T4[ebp]
  000c9	66 89 02	 mov	 WORD PTR [edx], ax
  000cc	eb 06		 jmp	 SHORT $LN109@Insert_str
$LN72@Insert_str:
  000ce	8b 01		 mov	 eax, DWORD PTR [ecx]
  000d0	52		 push	 edx
  000d1	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN109@Insert_str:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  000d4	0f b7 c0	 movzx	 eax, ax
  000d7	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  000dc	66 3b c8	 cmp	 cx, ax

; 567  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000df	75 0a		 jne	 SHORT $LN2@Insert_str

; 568  :                     _State |= _Ostr_t::badbit; // insertion failed, quit

  000e1	bf 04 00 00 00	 mov	 edi, 4
  000e6	89 7d ec	 mov	 DWORD PTR __State$[ebp], edi

; 569  :                     break;

  000e9	eb 25		 jmp	 SHORT $LL7@Insert_str
$LN2@Insert_str:

; 566  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000eb	4e		 dec	 esi
  000ec	eb a2		 jmp	 SHORT $LL4@Insert_str
$LN98@Insert_str:

; 575  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  000ee	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  000f0	6a 00		 push	 0
  000f2	ff 75 10	 push	 DWORD PTR __Size$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 575  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  000f5	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  000f8	ff 75 0c	 push	 DWORD PTR __Data$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 575  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  000fb	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  000ff	8b 01		 mov	 eax, DWORD PTR [ecx]
  00101	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00104	ff d0		 call	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 575  :             && _Ostr.rdbuf()->sputn(_Data, static_cast<streamsize>(_Size)) != static_cast<streamsize>(_Size)) {

  00106	3b 45 10	 cmp	 eax, DWORD PTR __Size$[ebp]
  00109	75 59		 jne	 SHORT $LN102@Insert_str
  0010b	85 d2		 test	 edx, edx
  0010d	75 55		 jne	 SHORT $LN102@Insert_str
  0010f	90		 npad	 1
$LL7@Insert_str:

; 576  :             _State |= _Ostr_t::badbit;
; 577  :         } else {
; 578  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00110	85 f6		 test	 esi, esi
  00112	74 53		 je	 SHORT $LN6@Insert_str

; 579  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00114	8b 03		 mov	 eax, DWORD PTR [ebx]
  00116	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00119	8b 4c 18 38	 mov	 ecx, DWORD PTR [eax+ebx+56]
  0011d	0f b7 54 18 40	 movzx	 edx, WORD PTR [eax+ebx+64]
  00122	89 55 e8	 mov	 DWORD PTR $T5[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  00125	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00128	83 38 00	 cmp	 DWORD PTR [eax], 0
  0012b	74 21		 je	 SHORT $LN57@Insert_str
  0012d	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00130	8b 00		 mov	 eax, DWORD PTR [eax]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00132	85 c0		 test	 eax, eax
  00134	7e 18		 jle	 SHORT $LN57@Insert_str

; 256  :         --*_IPcount;

  00136	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00139	48		 dec	 eax
  0013a	89 02		 mov	 DWORD PTR [edx], eax

; 257  :         return (*_IPnext)++;

  0013c	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0013f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00141	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  00144	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00146	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  00149	66 89 02	 mov	 WORD PTR [edx], ax
  0014c	eb 06		 jmp	 SHORT $LN110@Insert_str
$LN57@Insert_str:
  0014e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00150	52		 push	 edx
  00151	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN110@Insert_str:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  00154	0f b7 c0	 movzx	 eax, ax
  00157	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  0015c	66 3b c8	 cmp	 cx, ax

; 579  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0015f	74 03		 je	 SHORT $LN102@Insert_str

; 576  :             _State |= _Ostr_t::badbit;
; 577  :         } else {
; 578  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00161	4e		 dec	 esi
  00162	eb ac		 jmp	 SHORT $LL7@Insert_str
$LN102@Insert_str:

; 580  :                     _State |= _Ostr_t::badbit; // insertion failed, quit
; 581  :                     break;
; 582  :                 }
; 583  :             }
; 584  :         }
; 585  : 
; 586  :         _Ostr.width(0);

  00164	83 cf 04	 or	 edi, 4
$LN6@Insert_str:
  00167	8b 03		 mov	 eax, DWORD PTR [ebx]
  00169	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  0016c	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  00174	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
  0017c	eb 1f		 jmp	 SHORT $LN111@Insert_str
__catch$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$0:

; 587  :         _CATCH_IO_(_Ostr_t, _Ostr)

  0017e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00181	6a 01		 push	 1
  00183	6a 04		 push	 4
  00185	8b 02		 mov	 eax, DWORD PTR [edx]
  00187	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0018a	03 ca		 add	 ecx, edx
  0018c	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  00191	b8 00 00 00 00	 mov	 eax, $LN24@Insert_str
  00196	c3		 ret	 0
$LN24@Insert_str:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
  00197	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  0019a	8b 7d ec	 mov	 edi, DWORD PTR __State$[ebp]
$LN111@Insert_str:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 590  :     _Ostr.setstate(_State);

  0019d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN23@Insert_str:
  001a4	8b 03		 mov	 eax, DWORD PTR [ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  001a6	33 f6		 xor	 esi, esi
  001a8	b9 04 00 00 00	 mov	 ecx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 590  :     _Ostr.setstate(_State);

  001ad	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  001b0	8b 44 1a 0c	 mov	 eax, DWORD PTR [edx+ebx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 590  :     _Ostr.setstate(_State);

  001b4	03 d3		 add	 edx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  001b6	0b c7		 or	 eax, edi

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  001b8	39 72 38	 cmp	 DWORD PTR [edx+56], esi
  001bb	0f 45 ce	 cmovne	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  001be	0b c8		 or	 ecx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  001c0	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001c3	83 e1 17	 and	 ecx, 23			; 00000017H
  001c6	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  001c9	23 c1		 and	 eax, ecx

; 158  :         if (_Filtered) {

  001cb	75 41		 jne	 SHORT $LN113@Insert_str
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  001cd	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  001d2	84 c0		 test	 al, al
  001d4	75 08		 jne	 SHORT $LN41@Insert_str

; 117  :                 this->_Myostr._Osfx();

  001d6	8b 4d d8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001d9	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN41@Insert_str:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  001de	8b 4d d8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  001e1	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  001e8	8b 01		 mov	 eax, DWORD PTR [ecx]
  001ea	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  001ed	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  001f1	85 c9		 test	 ecx, ecx
  001f3	74 05		 je	 SHORT $LN47@Insert_str

; 79   :                 _Rdbuf->_Unlock();

  001f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  001f7	ff 52 08	 call	 DWORD PTR [edx+8]
$LN47@Insert_str:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 591  :     return _Ostr;

  001fa	8b c3		 mov	 eax, ebx

; 592  : }

  001fc	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001ff	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00206	59		 pop	 ecx
  00207	5f		 pop	 edi
  00208	5e		 pop	 esi
  00209	5b		 pop	 ebx
  0020a	8b e5		 mov	 esp, ebp
  0020c	5d		 pop	 ebp
  0020d	c3		 ret	 0
$LN113@Insert_str:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  0020e	a8 04		 test	 al, 4
  00210	74 07		 je	 SHORT $LN32@Insert_str

; 165  :                 _Msg = "ios_base::badbit set";

  00212	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00217	eb 0f		 jmp	 SHORT $LN34@Insert_str
$LN32@Insert_str:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00219	a8 02		 test	 al, 2
  0021b	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00220	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00225	0f 44 f0	 cmove	 esi, eax
$LN34@Insert_str:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  00228	8d 45 e0	 lea	 eax, DWORD PTR $T3[ebp]
  0022b	6a 01		 push	 1
  0022d	50		 push	 eax
  0022e	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00233	83 c4 08	 add	 esp, 8
  00236	8d 4d c4	 lea	 ecx, DWORD PTR $T2[ebp]
  00239	50		 push	 eax
  0023a	56		 push	 esi
  0023b	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00240	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00245	8d 45 c4	 lea	 eax, DWORD PTR $T2[ebp]
  00248	50		 push	 eax
  00249	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN108@Insert_str:
  0024e	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z$2:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c0	 mov	 ecx, DWORD PTR [edx-64]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z ENDP ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -140						; size = 52
$T3 = -88						; size = 44
$T4 = -44						; size = 16
__Lock$5 = -28						; size = 4
$T6 = -24						; size = 4
__Psave$1$ = -24					; size = 4
$T7 = -20						; size = 4
__Lock$8 = -16						; size = 4
$T9 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$10 = 8					; size = 4
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<wchar_t> >, COMDAT

; 435  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  00017	56		 push	 esi
  00018	57		 push	 edi
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 436  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  0002a	6a 00		 push	 0
  0002c	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  0002f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T7[ebp], 0
  00036	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  0003b	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id

; 437  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  00041	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
  00046	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004d	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00050	85 ff		 test	 edi, edi
  00052	75 2f		 jne	 SHORT $LN11@use_facet

; 92   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00054	57		 push	 edi
  00055	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00058	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 93   :                 if (_Id == 0) {

  0005d	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, edi ; std::ctype<wchar_t>::id
  00063	75 10		 jne	 SHORT $LN12@use_facet

; 94   :                     _Id = static_cast<size_t>(++_Id_cnt);

  00065	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  0006a	40		 inc	 eax
  0006b	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  00070	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A, eax ; std::ctype<wchar_t>::id
$LN12@use_facet:

; 95   :                 }
; 96   :                 _END_LOCK()

  00075	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$8[ebp]
  00078	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007d	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@_W@std@@2V0locale@2@A ; std::ctype<wchar_t>::id
$LN11@use_facet:

; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00083	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00086	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  0008d	89 4d f0	 mov	 DWORD PTR $T9[ebp], ecx
  00090	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00093	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  00096	73 16		 jae	 SHORT $LN19@use_facet
  00098	0f ae e8	 lfence
  0009b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0009e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000a1	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  000a4	85 f6		 test	 esi, esi
  000a6	0f 85 f8 00 00
	00		 jne	 $LN79@use_facet
  000ac	eb 05		 jmp	 SHORT $LN83@use_facet
$LN19@use_facet:

; 374  :     }
; 375  : 
; 376  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000ae	33 f6		 xor	 esi, esi
  000b0	89 4d f0	 mov	 DWORD PTR $T9[ebp], ecx
$LN83@use_facet:

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  000b3	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000b7	74 16		 je	 SHORT $LN14@use_facet

; 379  :             return _Facptr; // found facet or not transparent
; 380  :         }
; 381  : 
; 382  :         // look in current locale
; 383  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000b9	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 384  :         if (_Id < _Ptr0->_Facetcount) {

  000be	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000c1	73 14		 jae	 SHORT $LN84@use_facet

; 385  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000c3	0f ae e8	 lfence
  000c6	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c9	8b 75 f0	 mov	 esi, DWORD PTR $T9[ebp]
  000cc	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 438  : 
; 439  :     const size_t _Id         = _Facet::id._Get_index();
; 440  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 441  : 
; 442  :     if (!_Pf) {

  000cf	85 f6		 test	 esi, esi
  000d1	0f 85 cd 00 00
	00		 jne	 $LN79@use_facet
$LN84@use_facet:

; 443  :         if (_Psave) {

  000d7	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000da	85 c0		 test	 eax, eax
  000dc	74 07		 je	 SHORT $LN3@use_facet

; 444  :             _Pf = _Psave; // lazy facet already allocated

  000de	8b f0		 mov	 esi, eax

; 445  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000e0	e9 bf 00 00 00	 jmp	 $LN79@use_facet
$LN3@use_facet:

; 2962 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  000e5	6a 44		 push	 68			; 00000044H
  000e7	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000ec	8b f0		 mov	 esi, eax
  000ee	83 c4 04	 add	 esp, 4
  000f1	89 75 e8	 mov	 DWORD PTR $T6[ebp], esi
  000f4	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f8	85 f6		 test	 esi, esi
  000fa	74 78		 je	 SHORT $LN24@use_facet

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000fc	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  000ff	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00102	85 c9		 test	 ecx, ecx
  00104	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  00106	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00109	85 c0		 test	 eax, eax
  0010b	75 0a		 jne	 SHORT $LN33@use_facet
  0010d	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  00110	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  00112	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:

; 2962 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00117	50		 push	 eax
  00118	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0011e	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 277  :         return ::_Getctype();

  00123	8d 45 d4	 lea	 eax, DWORD PTR $T4[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2962 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00126	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T7[ebp], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 277  :         return ::_Getctype();

  0012d	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 143  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  0012e	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2956 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

  00135	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 277  :         return ::_Getctype();

  0013b	e8 00 00 00 00	 call	 __Getctype
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2978 :         _Ctype = _Lobj._Getctype();

  00140	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 281  :         return ::_Getcvt();

  00143	8d 45 a8	 lea	 eax, DWORD PTR $T3[ebp]
  00146	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2978 :         _Ctype = _Lobj._Getctype();

  00147	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 281  :         return ::_Getcvt();

  0014b	e8 00 00 00 00	 call	 __Getcvt
  00150	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2979 :         _Cvt   = _Lobj._Getcvt();

  00153	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00156	0f 11 46 18	 movups	 XMMWORD PTR [esi+24], xmm0
  0015a	0f 10 40 10	 movups	 xmm0, XMMWORD PTR [eax+16]
  0015e	0f 11 46 28	 movups	 XMMWORD PTR [esi+40], xmm0
  00162	f3 0f 7e 40 20	 movq	 xmm0, QWORD PTR [eax+32]
  00167	66 0f d6 46 38	 movq	 QWORD PTR [esi+56], xmm0
  0016c	8b 40 28	 mov	 eax, DWORD PTR [eax+40]
  0016f	89 46 40	 mov	 DWORD PTR [esi+64], eax

; 2962 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00172	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  00174	33 f6		 xor	 esi, esi
$LN25@use_facet:
  00176	f6 45 ec 01	 test	 BYTE PTR $T7[ebp], 1
  0017a	74 0b		 je	 SHORT $LN29@use_facet
  0017c	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00182	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00187	89 75 08	 mov	 DWORD PTR __Psave_guard$10[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 458  :             _Facet_Register(_Pfmod);

  0018a	56		 push	 esi
  0018b	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0018f	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 459  : #endif // ^^^ !defined(_M_CEE) ^^^
; 460  : 
; 461  :             _Pfmod->_Incref();

  00194	8b 16		 mov	 edx, DWORD PTR [esi]
  00196	83 c4 04	 add	 esp, 4
  00199	8b ce		 mov	 ecx, esi
  0019b	ff 52 04	 call	 DWORD PTR [edx+4]

; 462  :             _Facetptr<_Facet>::_Psave = _Psave;

  0019e	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@_W@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<wchar_t> >::_Psave
$LN79@use_facet:

; 463  :             _Pf                       = _Psave;
; 464  : 
; 465  :             (void) _Psave_guard.release();
; 466  :         }
; 467  :     }
; 468  : 
; 469  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  001a4	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  001a7	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  001ac	8b c6		 mov	 eax, esi

; 470  :     _END_LOCK()
; 471  : } // end of use_facet body

  001ae	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001b1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001b8	59		 pop	 ecx
  001b9	5f		 pop	 edi
  001ba	5e		 pop	 esi
  001bb	8b e5		 mov	 esp, ebp
  001bd	5d		 pop	 ebp
  001be	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$5[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$2:
  00008	6a 44		 push	 68			; 00000044H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T6[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$10[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 8a 74 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-140]
  00033	33 c8		 xor	 ecx, eax
  00035	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z
  0003f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 107  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 108  : #if !_HAS_EXCEPTIONS
; 109  :             const bool _Zero_uncaught_exceptions = true;
; 110  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  0002a	84 c0		 test	 al, al
  0002c	75 07		 jne	 SHORT $LN2@sentry

; 117  :                 this->_Myostr._Osfx();

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN2@sentry:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN6@sentry

; 79   :                 _Rdbuf->_Unlock();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN6@sentry:

; 118  :             }
; 119  :         }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry, COMDAT
; _this$ = ecx

; 90   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 69   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi

; 70   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]

; 71   :             if (_Rdbuf) {

  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN8@sentry

; 72   :                 _Rdbuf->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@sentry:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 90   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004d	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00052	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 91   :             if (!_Ostr.good()) {

  00055	74 04		 je	 SHORT $LN2@sentry

; 92   :                 _Ok = false;

  00057	32 c0		 xor	 al, al

; 93   :                 return;

  00059	eb 21		 jmp	 SHORT $LN17@sentry
$LN2@sentry:

; 94   :             }
; 95   : 
; 96   :             const auto _Tied = _Ostr.tie();

  0005b	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]

; 97   :             if (!_Tied || _Tied == _STD addressof(_Ostr)) {

  0005e	85 c9		 test	 ecx, ecx
  00060	74 18		 je	 SHORT $LN4@sentry
  00062	3b ce		 cmp	 ecx, esi
  00064	74 14		 je	 SHORT $LN4@sentry

; 99   :                 return;
; 100  :             }
; 101  : 
; 102  :             _Tied->flush();

  00066	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00070	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00075	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 103  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00078	eb 02		 jmp	 SHORT $LN17@sentry
$LN4@sentry:

; 98   :                 _Ok = true;

  0007a	b0 01		 mov	 al, 1
$LN17@sentry:

; 104  :         }

  0007c	88 47 04	 mov	 BYTE PTR [edi+4], al
  0007f	8b c7		 mov	 eax, edi
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 76   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 79   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 80   :             }
; 81   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 107  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 108  : #if !_HAS_EXCEPTIONS
; 109  :             const bool _Zero_uncaught_exceptions = true;
; 110  : #elif _HAS_DEPRECATED_UNCAUGHT_EXCEPTION
; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00025	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  0002a	84 c0		 test	 al, al
  0002c	75 07		 jne	 SHORT $LN2@sentry

; 117  :                 this->_Myostr._Osfx();

  0002e	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00030	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN2@sentry:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00037	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0003e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00040	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00043	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  00047	85 c9		 test	 ecx, ecx
  00049	74 05		 je	 SHORT $LN6@sentry

; 79   :                 _Rdbuf->_Unlock();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 08	 call	 DWORD PTR [eax+8]
$LN6@sentry:

; 118  :             }
; 119  :         }

  00050	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00053	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005a	59		 pop	 ecx
  0005b	5e		 pop	 esi
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
  00060	cc		 int	 3
  00061	cc		 int	 3
  00062	cc		 int	 3
  00063	cc		 int	 3
  00064	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 90   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	57		 push	 edi
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	50		 push	 eax
  0001c	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001f	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00025	8b f9		 mov	 edi, ecx
  00027	89 7d f0	 mov	 DWORD PTR _this$[ebp], edi

; 69   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  0002a	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  0002d	89 37		 mov	 DWORD PTR [edi], esi

; 70   :             const auto _Rdbuf = _Myostr.rdbuf();

  0002f	8b 06		 mov	 eax, DWORD PTR [esi]
  00031	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00034	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]

; 71   :             if (_Rdbuf) {

  00038	85 c9		 test	 ecx, ecx
  0003a	74 05		 je	 SHORT $LN8@sentry

; 72   :                 _Rdbuf->_Lock();

  0003c	8b 01		 mov	 eax, DWORD PTR [ecx]
  0003e	ff 50 04	 call	 DWORD PTR [eax+4]
$LN8@sentry:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  00041	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 90   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004d	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00052	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 91   :             if (!_Ostr.good()) {

  00055	74 04		 je	 SHORT $LN2@sentry

; 92   :                 _Ok = false;

  00057	32 c0		 xor	 al, al

; 93   :                 return;

  00059	eb 21		 jmp	 SHORT $LN17@sentry
$LN2@sentry:

; 94   :             }
; 95   : 
; 96   :             const auto _Tied = _Ostr.tie();

  0005b	8b 49 3c	 mov	 ecx, DWORD PTR [ecx+60]

; 97   :             if (!_Tied || _Tied == _STD addressof(_Ostr)) {

  0005e	85 c9		 test	 ecx, ecx
  00060	74 18		 je	 SHORT $LN4@sentry
  00062	3b ce		 cmp	 ecx, esi
  00064	74 14		 je	 SHORT $LN4@sentry

; 99   :                 return;
; 100  :             }
; 101  : 
; 102  :             _Tied->flush();

  00066	e8 00 00 00 00	 call	 ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ; std::basic_ostream<char,std::char_traits<char> >::flush
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0006b	8b 06		 mov	 eax, DWORD PTR [esi]
  0006d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00070	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
  00075	0f 94 c0	 sete	 al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 103  :             _Ok = _Ostr.good(); // store test only after flushing tie

  00078	eb 02		 jmp	 SHORT $LN17@sentry
$LN4@sentry:

; 98   :                 _Ok = true;

  0007a	b0 01		 mov	 al, 1
$LN17@sentry:

; 104  :         }

  0007c	88 47 04	 mov	 BYTE PTR [edi+4], al
  0007f	8b c7		 mov	 eax, edi
  00081	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00084	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008b	59		 pop	 ecx
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a f0	 mov	 ecx, DWORD PTR [edx-16]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 76   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00016	33 c5		 xor	 eax, ebp
  00018	50		 push	 eax
  00019	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00022	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00024	8b 01		 mov	 eax, DWORD PTR [ecx]
  00026	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00029	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  0002d	85 c9		 test	 ecx, ecx
  0002f	74 05		 je	 SHORT $LN2@Sentry_bas

; 79   :                 _Rdbuf->_Unlock();

  00031	8b 01		 mov	 eax, DWORD PTR [ecx]
  00033	ff 50 08	 call	 DWORD PTR [eax+8]
$LN2@Sentry_bas:

; 80   :             }
; 81   :         }

  00036	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00039	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00040	59		 pop	 ecx
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
  00045	cc		 int	 3
  00046	cc		 int	 3
  00047	cc		 int	 3
  00048	cc		 int	 3
  00049	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\memory
;	COMDAT ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ PROC ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >, COMDAT
; _this$ = ecx

; 3426 :         if (_Mypair._Myval2) {

  00000	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00002	85 c9		 test	 ecx, ecx
  00004	74 06		 je	 SHORT $LN7@unique_ptr

; 3309 :         delete _Ptr;

  00006	8b 01		 mov	 eax, DWORD PTR [ecx]
  00008	6a 01		 push	 1
  0000a	ff 10		 call	 DWORD PTR [eax]
$LN7@unique_ptr:

; 3427 :             _Mypair._Get_first()(_Mypair._Myval2);
; 3428 :         }
; 3429 : 
; 3430 : #if _MSVC_STL_DESTRUCTOR_TOMBSTONES
; 3431 :         if constexpr (is_pointer_v<pointer>) {
; 3432 :             if (!_STD _Is_constant_evaluated()) {
; 3433 :                 const auto _Tombstone{reinterpret_cast<pointer>(_MSVC_STL_UINTPTR_TOMBSTONE_VALUE)};
; 3434 :                 _Mypair._Myval2 = _Tombstone;
; 3435 :             }
; 3436 :         }
; 3437 : #endif // _MSVC_STL_DESTRUCTOR_TOMBSTONES
; 3438 :     }

  0000c	c3		 ret	 0
??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ENDP ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
;	COMDAT ?UnloadDriver@@YA_NXZ
_TEXT	SEGMENT
_status$ = -32						; size = 28
__$ArrayPad$ = -4					; size = 4
?UnloadDriver@@YA_NXZ PROC				; UnloadDriver, COMDAT

; 258  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 20	 sub	 esp, 32			; 00000020H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 259  :     if (!g_hService)

  00010	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hService
  00015	85 c0		 test	 eax, eax
  00017	75 22		 jne	 SHORT $LN2@UnloadDriv

; 260  :     {
; 261  :         std::cout << "Service handle invalid\n";

  00019	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EFJAHLMN@Service?5handle?5invalid?6@
  0001e	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00023	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00028	83 c4 08	 add	 esp, 8

; 262  :         return false;

  0002b	32 c0		 xor	 al, al

; 296  :     }
; 297  : 
; 298  :     g_ServiceInstalled = false;
; 299  :     return true;
; 300  : }

  0002d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00030	33 cd		 xor	 ecx, ebp
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	8b e5		 mov	 esp, ebp
  00039	5d		 pop	 ebp
  0003a	c3		 ret	 0
$LN2@UnloadDriv:
  0003b	56		 push	 esi

; 263  :     }
; 264  : 
; 265  :     SERVICE_STATUS status;
; 266  :     if (!ControlService(g_hService, SERVICE_CONTROL_STOP, &status))

  0003c	8d 4d e0	 lea	 ecx, DWORD PTR _status$[ebp]
  0003f	51		 push	 ecx
  00040	6a 01		 push	 1
  00042	50		 push	 eax
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ControlService@12
  00049	85 c0		 test	 eax, eax
  0004b	75 17		 jne	 SHORT $LN3@UnloadDriv

; 267  :     {
; 268  :         DWORD err = GetLastError();

  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00053	8b f0		 mov	 esi, eax

; 269  :         if (err != ERROR_SERVICE_NOT_ACTIVE)

  00055	81 fe 26 04 00
	00		 cmp	 esi, 1062		; 00000426H
  0005b	74 19		 je	 SHORT $LN4@UnloadDriv

; 270  :         {
; 271  :             std::cout << "Failed to stop service: " << err << "\n";

  0005d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CJNJBFLI@Failed?5to?5stop?5service?3?5@

; 272  :             return false;

  00062	eb 2f		 jmp	 SHORT $LN15@UnloadDriv
$LN3@UnloadDriv:

; 273  :         }
; 274  :     }
; 275  :     else
; 276  :     {
; 277  :         std::cout << "Service stopped successfully\n";

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@KBAIFLAC@Service?5stopped?5successfully?6@
  00069	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  0006e	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00073	83 c4 08	 add	 esp, 8
$LN4@UnloadDriv:

; 278  :     }
; 279  : 
; 280  :     if (!DeleteService(g_hService))

  00076	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hService
  0007c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteService@4
  00082	85 c0		 test	 eax, eax
  00084	75 41		 jne	 SHORT $LN6@UnloadDriv

; 281  :     {
; 282  :         DWORD err = GetLastError();

  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0008c	8b f0		 mov	 esi, eax

; 283  :         std::cout << "Failed to delete service: " << err << "\n";

  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HMODDBCB@Failed?5to?5delete?5service?3?5@
$LN15@UnloadDriv:
  00093	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00098	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0009d	83 c4 08	 add	 esp, 8
  000a0	8b c8		 mov	 ecx, eax
  000a2	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000a7	56		 push	 esi
  000a8	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  000ad	50		 push	 eax
  000ae	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000b3	83 c4 08	 add	 esp, 8

; 284  :         return false;

  000b6	32 c0		 xor	 al, al
  000b8	5e		 pop	 esi

; 296  :     }
; 297  : 
; 298  :     g_ServiceInstalled = false;
; 299  :     return true;
; 300  : }

  000b9	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000bc	33 cd		 xor	 ecx, ebp
  000be	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000c3	8b e5		 mov	 esp, ebp
  000c5	5d		 pop	 ebp
  000c6	c3		 ret	 0
$LN6@UnloadDriv:

; 285  :     }
; 286  : 
; 287  :     std::cout << "Service deleted successfully\n";

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@DANBJCAN@Service?5deleted?5successfully?6@
  000cc	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  000d1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >

; 288  : 
; 289  :     CloseServiceHandle(g_hService);

  000d6	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseServiceHandle@4
  000dc	83 c4 08	 add	 esp, 8
  000df	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hService
  000e5	ff d6		 call	 esi

; 290  :     g_hService = nullptr;
; 291  : 
; 292  :     if (g_hSCManager)

  000e7	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hSCManager
  000ec	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_hService, 0
  000f6	85 c0		 test	 eax, eax
  000f8	74 0d		 je	 SHORT $LN7@UnloadDriv

; 293  :     {
; 294  :         CloseServiceHandle(g_hSCManager);

  000fa	50		 push	 eax
  000fb	ff d6		 call	 esi

; 295  :         g_hSCManager = nullptr;

  000fd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_hSCManager, 0
$LN7@UnloadDriv:

; 296  :     }
; 297  : 
; 298  :     g_ServiceInstalled = false;
; 299  :     return true;
; 300  : }

  00107	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0010a	b0 01		 mov	 al, 1
  0010c	33 cd		 xor	 ecx, ebp
  0010e	c6 05 00 00 00
	00 00		 mov	 BYTE PTR _g_ServiceInstalled, 0
  00115	5e		 pop	 esi
  00116	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0011b	8b e5		 mov	 esp, ebp
  0011d	5d		 pop	 ebp
  0011e	c3		 ret	 0
?UnloadDriver@@YA_NXZ ENDP				; UnloadDriver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
;	COMDAT ?LoadDriver@@YA_NXZ
_TEXT	SEGMENT
_bytesNeeded$ = -68					; size = 4
_ssp$ = -64						; size = 36
__$ArrayPad$ = -4					; size = 4
?LoadDriver@@YA_NXZ PROC				; LoadDriver, COMDAT

; 225  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 226  :     if (!g_hService)

  00023	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_hService
  00028	56		 push	 esi
  00029	85 c0		 test	 eax, eax
  0002b	75 26		 jne	 SHORT $LN2@LoadDriver

; 227  :     {
; 228  :         std::cout << "Service handle invalid\n";

  0002d	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EFJAHLMN@Service?5handle?5invalid?6@
  00032	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00037	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0003c	83 c4 08	 add	 esp, 8

; 229  :         return false;

  0003f	32 c0		 xor	 al, al

; 254  :     return true;
; 255  : }

  00041	5e		 pop	 esi
  00042	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00045	33 cd		 xor	 ecx, ebp
  00047	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	8b e3		 mov	 esp, ebx
  00051	5b		 pop	 ebx
  00052	c3		 ret	 0
$LN2@LoadDriver:

; 230  :     }
; 231  : 
; 232  :     SERVICE_STATUS_PROCESS ssp = { 0 };
; 233  :     DWORD bytesNeeded = 0;
; 234  :     if (QueryServiceStatusEx(g_hService, SC_STATUS_PROCESS_INFO, (LPBYTE)&ssp, sizeof(ssp), &bytesNeeded))

  00053	8d 4d bc	 lea	 ecx, DWORD PTR _bytesNeeded$[ebp]
  00056	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _ssp$[ebp+32], 0
  0005d	51		 push	 ecx
  0005e	6a 24		 push	 36			; 00000024H
  00060	8d 4d c0	 lea	 ecx, DWORD PTR _ssp$[ebp]
  00063	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _bytesNeeded$[ebp], 0
  0006a	51		 push	 ecx
  0006b	0f 57 c0	 xorps	 xmm0, xmm0
  0006e	6a 00		 push	 0
  00070	50		 push	 eax
  00071	0f 29 45 c0	 movaps	 XMMWORD PTR _ssp$[ebp], xmm0
  00075	0f 29 45 d0	 movaps	 XMMWORD PTR _ssp$[ebp+16], xmm0
  00079	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryServiceStatusEx@20
  0007f	85 c0		 test	 eax, eax
  00081	74 0d		 je	 SHORT $LN4@LoadDriver

; 235  :     {
; 236  :         if (ssp.dwCurrentState == SERVICE_RUNNING)

  00083	83 7d c4 04	 cmp	 DWORD PTR _ssp$[ebp+4], 4
  00087	75 07		 jne	 SHORT $LN4@LoadDriver

; 237  :         {
; 238  :             std::cout << "Service already running\n";

  00089	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GIHOLAM@Service?5already?5running?6@

; 239  :             return true;

  0008e	eb 65		 jmp	 SHORT $LN8@LoadDriver
$LN4@LoadDriver:

; 240  :         }
; 241  :     }
; 242  : 
; 243  :     if (!StartService(g_hService, 0, nullptr))

  00090	6a 00		 push	 0
  00092	6a 00		 push	 0
  00094	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hService
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StartServiceW@12
  000a0	85 c0		 test	 eax, eax
  000a2	75 4c		 jne	 SHORT $LN6@LoadDriver

; 244  :     {
; 245  :         DWORD err = GetLastError();

  000a4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  000aa	8b f0		 mov	 esi, eax

; 246  :         if (err != ERROR_SERVICE_ALREADY_RUNNING)

  000ac	81 fe 20 04 00
	00		 cmp	 esi, 1056		; 00000420H
  000b2	74 3c		 je	 SHORT $LN6@LoadDriver

; 247  :         {
; 248  :             std::cout << "Failed to start service: " << err << "\n";

  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@HODICPMK@Failed?5to?5start?5service?3?5@
  000b9	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  000be	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000c3	83 c4 08	 add	 esp, 8
  000c6	8b c8		 mov	 ecx, eax
  000c8	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  000cd	56		 push	 esi
  000ce	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  000d3	50		 push	 eax
  000d4	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000d9	83 c4 08	 add	 esp, 8

; 249  :             return false;

  000dc	32 c0		 xor	 al, al

; 254  :     return true;
; 255  : }

  000de	5e		 pop	 esi
  000df	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000e2	33 cd		 xor	 ecx, ebp
  000e4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	8b e3		 mov	 esp, ebx
  000ee	5b		 pop	 ebx
  000ef	c3		 ret	 0
$LN6@LoadDriver:

; 250  :         }
; 251  :     }
; 252  : 
; 253  :     std::cout << "Driver loaded successfully\n";

  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OKKGCNAB@Driver?5loaded?5successfully?6@
$LN8@LoadDriver:

; 254  :     return true;
; 255  : }

  000f5	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  000fa	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000ff	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00102	83 c4 08	 add	 esp, 8
  00105	33 cd		 xor	 ecx, ebp
  00107	b0 01		 mov	 al, 1
  00109	5e		 pop	 esi
  0010a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0010f	8b e5		 mov	 esp, ebp
  00111	5d		 pop	 ebp
  00112	8b e3		 mov	 esp, ebx
  00114	5b		 pop	 ebx
  00115	c3		 ret	 0
?LoadDriver@@YA_NXZ ENDP				; LoadDriver
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
;	COMDAT ?InstallService@@YA_NXZ
_TEXT	SEGMENT
_bytesNeeded$1 = -68					; size = 4
_ssp$2 = -64						; size = 36
__$ArrayPad$ = -4					; size = 4
?InstallService@@YA_NXZ PROC				; InstallService, COMDAT

; 117  : {

  00000	53		 push	 ebx
  00001	8b dc		 mov	 ebx, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	83 e4 f0	 and	 esp, -16		; fffffff0H
  00009	83 c4 04	 add	 esp, 4
  0000c	55		 push	 ebp
  0000d	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  00010	89 6c 24 04	 mov	 DWORD PTR [esp+4], ebp
  00014	8b ec		 mov	 ebp, esp
  00016	83 ec 4c	 sub	 esp, 76			; 0000004cH
  00019	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001e	33 c5		 xor	 eax, ebp
  00020	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00023	56		 push	 esi

; 118  :     g_hSCManager = OpenSCManager(nullptr, nullptr, SC_MANAGER_ALL_ACCESS);

  00024	68 3f 00 0f 00	 push	 983103			; 000f003fH
  00029	6a 00		 push	 0
  0002b	6a 00		 push	 0
  0002d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenSCManagerW@12
  00033	a3 00 00 00 00	 mov	 DWORD PTR _g_hSCManager, eax
  00038	85 c0		 test	 eax, eax

; 119  :     if (!g_hSCManager)

  0003a	75 44		 jne	 SHORT $LN2@InstallSer

; 120  :     {
; 121  :         std::cout << "OpenSCManager failed: " << GetLastError() << "\n";

  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@CHLAMOON@OpenSCManager?5failed?3?5@
  00041	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00046	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0004b	83 c4 08	 add	 esp, 8
  0004e	8b f0		 mov	 esi, eax
  00050	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00056	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0005b	50		 push	 eax
  0005c	8b ce		 mov	 ecx, esi
  0005e	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00069	83 c4 08	 add	 esp, 8

; 122  :         return false;

  0006c	32 c0		 xor	 al, al

; 222  : }

  0006e	5e		 pop	 esi
  0006f	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00072	33 cd		 xor	 ecx, ebp
  00074	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	8b e3		 mov	 esp, ebx
  0007e	5b		 pop	 ebx
  0007f	c3		 ret	 0
$LN2@InstallSer:

; 123  :     }
; 124  : 
; 125  :     g_hService = OpenService(g_hSCManager, DRIVER_SERVICE_NAME, SERVICE_ALL_ACCESS);

  00080	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@HOCONKHL@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@
  0008a	50		 push	 eax
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__OpenServiceW@12
  00091	a3 00 00 00 00	 mov	 DWORD PTR _g_hService, eax
  00096	85 c0		 test	 eax, eax

; 126  :     if (!g_hService)

  00098	0f 85 33 01 00
	00		 jne	 $LN3@InstallSer

; 127  :     {
; 128  :         // Service does not exist, create it :3
; 129  :         if (!CopyDriverToSystemDrivers())

  0009e	e8 00 00 00 00	 call	 ?CopyDriverToSystemDrivers@@YA_NXZ ; CopyDriverToSystemDrivers
  000a3	84 c0		 test	 al, al
  000a5	75 32		 jne	 SHORT $LN5@InstallSer

; 130  :         {
; 131  :             std::cout << "Failed to prepare driver\n";

  000a7	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@PBFPCIGJ@Failed?5to?5prepare?5driver?6@
  000ac	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  000b1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000b6	83 c4 08	 add	 esp, 8

; 132  :             CloseServiceHandle(g_hSCManager);

  000b9	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hSCManager
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4

; 133  :             return false;

  000c5	32 c0		 xor	 al, al

; 222  : }

  000c7	5e		 pop	 esi
  000c8	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000cb	33 cd		 xor	 ecx, ebp
  000cd	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d2	8b e5		 mov	 esp, ebp
  000d4	5d		 pop	 ebp
  000d5	8b e3		 mov	 esp, ebx
  000d7	5b		 pop	 ebx
  000d8	c3		 ret	 0
$LN5@InstallSer:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  000d9	83 3d 14 00 00
	00 07		 cmp	 DWORD PTR ?systemDriverPath@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A+20, 7

; 444  :         const value_type* _Result = _Bx._Buf;

  000e0	b8 00 00 00 00	 mov	 eax, OFFSET ?systemDriverPath@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A ; systemDriverPath
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 136  :         g_hService = CreateService(

  000e5	6a 00		 push	 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 445  :         if (_Large_mode_engaged()) {

  000e7	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?systemDriverPath@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 136  :         g_hService = CreateService(

  000ee	6a 00		 push	 0
  000f0	6a 00		 push	 0
  000f2	6a 00		 push	 0
  000f4	6a 00		 push	 0
  000f6	50		 push	 eax
  000f7	6a 00		 push	 0
  000f9	6a 03		 push	 3
  000fb	6a 01		 push	 1
  000fd	68 ff 01 0f 00	 push	 983551			; 000f01ffH
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@HOCONKHL@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_1EE@HOCONKHL@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@
  0010c	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hSCManager
  00112	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateServiceW@52
  00118	a3 00 00 00 00	 mov	 DWORD PTR _g_hService, eax
  0011d	85 c0		 test	 eax, eax

; 137  :             g_hSCManager,
; 138  :             DRIVER_SERVICE_NAME,
; 139  :             DRIVER_SERVICE_NAME,
; 140  :             SERVICE_ALL_ACCESS,
; 141  :             SERVICE_KERNEL_DRIVER,
; 142  :             SERVICE_DEMAND_START,
; 143  :             SERVICE_ERROR_IGNORE,
; 144  :             systemDriverPath.c_str(),
; 145  :             nullptr,
; 146  :             nullptr,
; 147  :             nullptr,
; 148  :             nullptr,
; 149  :             nullptr
; 150  :         );
; 151  : 
; 152  :         if (!g_hService)

  0011f	75 5a		 jne	 SHORT $LN6@InstallSer

; 153  :         {
; 154  :             std::cout << "CreateService failed: " << GetLastError() << "\n";

  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@FIKAJJGA@CreateService?5failed?3?5@
  00126	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  0012b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00130	83 c4 08	 add	 esp, 8
  00133	8b f0		 mov	 esi, eax
  00135	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00140	50		 push	 eax
  00141	8b ce		 mov	 ecx, esi
  00143	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00148	50		 push	 eax
  00149	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0014e	83 c4 08	 add	 esp, 8

; 155  :             CloseServiceHandle(g_hSCManager);

  00151	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hSCManager
  00157	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseServiceHandle@4

; 156  :             g_hSCManager = nullptr;

  0015d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_hSCManager, 0

; 157  :             return false;

  00167	32 c0		 xor	 al, al

; 222  : }

  00169	5e		 pop	 esi
  0016a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0016d	33 cd		 xor	 ecx, ebp
  0016f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00174	8b e5		 mov	 esp, ebp
  00176	5d		 pop	 ebp
  00177	8b e3		 mov	 esp, ebx
  00179	5b		 pop	 ebx
  0017a	c3		 ret	 0
$LN6@InstallSer:

; 158  :         }
; 159  : 
; 160  :         std::cout << "Service created successfully\n";

  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GGNPNIOP@Service?5created?5successfully?6@
  00180	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  00185	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0018a	83 c4 08	 add	 esp, 8

; 190  :             g_ServiceInstalled = true;
; 191  :             return true;
; 192  :     }
; 193  :     }
; 194  : 
; 195  :     // Start the service if newly created
; 196  :     // Yup yup good comment.
; 197  :     bool started = StartService(g_hService, 0, nullptr);

  0018d	6a 00		 push	 0
  0018f	6a 00		 push	 0
  00191	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hService
  00197	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StartServiceW@12
  0019d	85 c0		 test	 eax, eax

; 198  :     if (!started)

  0019f	75 25		 jne	 SHORT $LN11@InstallSer

; 199  :     {
; 200  :         DWORD err = GetLastError();

  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  001a7	8b f0		 mov	 esi, eax

; 201  :         if (err == ERROR_SERVICE_ALREADY_RUNNING)

  001a9	81 fe 20 04 00
	00		 cmp	 esi, 1056		; 00000420H
  001af	75 0b		 jne	 SHORT $LN13@InstallSer

; 202  :         {
; 203  :             std::cout << "Service already running\n";

  001b1	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BJ@GIHOLAM@Service?5already?5running?6@

; 218  :     }
; 219  : 
; 220  :     g_ServiceInstalled = true;

  001b6	50		 push	 eax

; 221  :     return true;

  001b7	e9 00 01 00 00	 jmp	 $LN29@InstallSer
$LN13@InstallSer:

; 204  :         }
; 205  :         else
; 206  :         {
; 207  :             std::cout << "StartService failed: " << err << "\n";

  001bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@OGKCKKFC@StartService?5failed?3?5@

; 208  :             CloseServiceHandle(g_hService);
; 209  :             CloseServiceHandle(g_hSCManager);
; 210  :             g_hService = nullptr;
; 211  :             g_hSCManager = nullptr;
; 212  :             return false;

  001c1	e9 90 00 00 00	 jmp	 $LN30@InstallSer
$LN11@InstallSer:

; 213  :         }
; 214  :     }
; 215  :     else
; 216  :     {
; 217  :         std::cout << "Service started successfully\n";

  001c6	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BO@MHOMMBJC@Service?5started?5successfully?6@

; 218  :     }
; 219  : 
; 220  :     g_ServiceInstalled = true;

  001cb	50		 push	 eax

; 221  :     return true;

  001cc	e9 eb 00 00 00	 jmp	 $LN29@InstallSer
$LN3@InstallSer:

; 161  :     }
; 162  :     else
; 163  :     {
; 164  :         std::cout << "Service already exists\n";

  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFIJGKKJ@Service?5already?5exists?6@
  001d6	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  001db	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001e0	83 c4 08	 add	 esp, 8

; 82   :     SERVICE_STATUS_PROCESS ssp = { 0 };

  001e3	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _ssp$2[ebp+32], 0

; 83   :     DWORD bytesNeeded = 0;
; 84   :     if (QueryServiceStatusEx(service, SC_STATUS_PROCESS_INFO,

  001ea	8d 45 bc	 lea	 eax, DWORD PTR _bytesNeeded$1[ebp]
  001ed	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _bytesNeeded$1[ebp], 0
  001f4	0f 57 c0	 xorps	 xmm0, xmm0

; 82   :     SERVICE_STATUS_PROCESS ssp = { 0 };

  001f7	0f 29 45 c0	 movaps	 XMMWORD PTR _ssp$2[ebp], xmm0

; 83   :     DWORD bytesNeeded = 0;
; 84   :     if (QueryServiceStatusEx(service, SC_STATUS_PROCESS_INFO,

  001fb	50		 push	 eax
  001fc	6a 24		 push	 36			; 00000024H
  001fe	8d 45 c0	 lea	 eax, DWORD PTR _ssp$2[ebp]
  00201	0f 29 45 d0	 movaps	 XMMWORD PTR _ssp$2[ebp+16], xmm0
  00205	50		 push	 eax
  00206	6a 00		 push	 0
  00208	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hService
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryServiceStatusEx@20
  00214	85 c0		 test	 eax, eax
  00216	74 15		 je	 SHORT $LN7@InstallSer

; 85   :         (LPBYTE)&ssp, sizeof(ssp), &bytesNeeded))
; 86   :     {
; 87   :         return (ssp.dwCurrentState == SERVICE_RUNNING);

  00218	83 7d c4 04	 cmp	 DWORD PTR _ssp$2[ebp+4], 4
  0021c	0f 94 c0	 sete	 al

; 165  : 
; 166  :         if (IsServiceRunning(g_hService))

  0021f	84 c0		 test	 al, al
  00221	74 0a		 je	 SHORT $LN7@InstallSer

; 167  :         {
; 168  :             std::cout << "Service already running\n";

  00223	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@GIHOLAM@Service?5already?5running?6@

; 169  :             g_ServiceInstalled = true;
; 170  :             return true;

  00228	e9 8f 00 00 00	 jmp	 $LN29@InstallSer
$LN7@InstallSer:

; 171  :         }
; 172  :         else
; 173  :         {
; 174  :             // Try to start service
; 175  :             // Programmer comment: Yeah you can see what the fuck it is :3
; 176  :             if (!StartService(g_hService, 0, nullptr))

  0022d	6a 00		 push	 0
  0022f	6a 00		 push	 0
  00231	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hService
  00237	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__StartServiceW@12
  0023d	85 c0		 test	 eax, eax
  0023f	75 76		 jne	 SHORT $LN10@InstallSer

; 177  :             {
; 178  :                 DWORD err = GetLastError();

  00241	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00247	8b f0		 mov	 esi, eax

; 179  :                 if (err != ERROR_SERVICE_ALREADY_RUNNING)

  00249	81 fe 20 04 00
	00		 cmp	 esi, 1056		; 00000420H
  0024f	74 66		 je	 SHORT $LN10@InstallSer

; 180  :                 {
; 181  :                     std::cout << "Failed to start existing service: " << err << "\n";

  00251	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CIOHMHPM@Failed?5to?5start?5existing?5servic@
$LN30@InstallSer:

; 222  : }

  00256	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  0025b	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00260	83 c4 08	 add	 esp, 8
  00263	8b c8		 mov	 ecx, eax
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  0026a	56		 push	 esi
  0026b	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00270	50		 push	 eax
  00271	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00276	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__CloseServiceHandle@4
  0027c	83 c4 08	 add	 esp, 8
  0027f	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hService
  00285	ff d6		 call	 esi
  00287	ff 35 00 00 00
	00		 push	 DWORD PTR _g_hSCManager
  0028d	ff d6		 call	 esi
  0028f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_hService, 0
  00299	32 c0		 xor	 al, al
  0029b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_hSCManager, 0
  002a5	5e		 pop	 esi
  002a6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002a9	33 cd		 xor	 ecx, ebp
  002ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002b0	8b e5		 mov	 esp, ebp
  002b2	5d		 pop	 ebp
  002b3	8b e3		 mov	 esp, ebx
  002b5	5b		 pop	 ebx
  002b6	c3		 ret	 0
$LN10@InstallSer:

; 182  :                     CloseServiceHandle(g_hService);
; 183  :                     CloseServiceHandle(g_hSCManager);
; 184  :                     g_hService = nullptr;
; 185  :                     g_hSCManager = nullptr;
; 186  :                     return false;
; 187  :                 }
; 188  :             }
; 189  :             std::cout << "Service started successfully\n";

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@MHOMMBJC@Service?5started?5successfully?6@
$LN29@InstallSer:

; 222  : }

  002bc	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  002c1	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  002c6	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  002c9	83 c4 08	 add	 esp, 8
  002cc	33 cd		 xor	 ecx, ebp
  002ce	c6 05 00 00 00
	00 01		 mov	 BYTE PTR _g_ServiceInstalled, 1
  002d5	b0 01		 mov	 al, 1
  002d7	5e		 pop	 esi
  002d8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  002dd	8b e5		 mov	 esp, ebp
  002df	5d		 pop	 ebp
  002e0	8b e3		 mov	 esp, ebx
  002e2	5b		 pop	 ebx
  002e3	c3		 ret	 0
?InstallService@@YA_NXZ ENDP				; InstallService
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
__Str$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 3445 :     basic_ostream<_Elem, _Traits>& _Ostr, const basic_string<_Elem, _Traits, _Alloc>& _Str) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3446 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00003	8b 45 0c	 mov	 eax, DWORD PTR __Str$[ebp]

; 453  :         return _Myres > _Small_string_capacity;

  00006	83 78 14 07	 cmp	 DWORD PTR [eax+20], 7

; 3446 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  0000a	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]

; 445  :         if (_Large_mode_engaged()) {

  0000d	76 02		 jbe	 SHORT $LN7@operator

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  0000f	8b 00		 mov	 eax, DWORD PTR [eax]
$LN7@operator:

; 3446 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  00011	51		 push	 ecx
  00012	50		 push	 eax
  00013	ff 75 08	 push	 DWORD PTR __Ostr$[ebp]
  00016	e8 00 00 00 00	 call	 ??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>
  0001b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3447 : }

  0001e	5d		 pop	 ebp
  0001f	c3		 ret	 0
??$?6_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@ABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
$T2 = -76						; size = 20
__Pad$ = -56						; size = 8
__Ok$ = -56						; size = 8
$T3 = -48						; size = 8
$T4 = -48						; size = 8
tv980 = -44						; size = 4
$T5 = -44						; size = 4
__Ctype_fac$1$ = -40					; size = 4
$T6 = -40						; size = 4
__Byte$ = -36						; size = 1
$T7 = -36						; size = 4
__Count$1$ = -32					; size = 4
tv942 = -28						; size = 4
tv984 = -28						; size = 4
$T8 = -28						; size = 4
__State$ = -24						; size = 4
__Count$2$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 688  : basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr, const char* _Val) { // insert NTBS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 40	 sub	 esp, 64			; 00000040H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 689  :     ios_base::iostate _State = ios_base::goodbit;
; 690  :     streamsize _Count        = static_cast<streamsize>(_CSTD strlen(_Val));

  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR __Val$[ebp]
  0002e	33 f6		 xor	 esi, esi
  00030	89 75 e8	 mov	 DWORD PTR __State$[ebp], esi
  00033	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
$LL151@operator:
  00036	8a 01		 mov	 al, BYTE PTR [ecx]
  00038	41		 inc	 ecx
  00039	84 c0		 test	 al, al
  0003b	75 f9		 jne	 SHORT $LL151@operator
  0003d	2b ca		 sub	 ecx, edx
  0003f	89 75 e0	 mov	 DWORD PTR __Count$1$[ebp], esi

; 691  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00042	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00045	89 4d ec	 mov	 DWORD PTR __Count$2$[ebp], ecx
  00048	8b 02		 mov	 eax, DWORD PTR [edx]
  0004a	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004d	8b 5c 10 24	 mov	 ebx, DWORD PTR [eax+edx+36]
  00051	8b 7c 10 20	 mov	 edi, DWORD PTR [eax+edx+32]
  00055	85 db		 test	 ebx, ebx
  00057	7c 18		 jl	 SHORT $LN133@operator
  00059	7f 04		 jg	 SHORT $LN152@operator
  0005b	85 ff		 test	 edi, edi
  0005d	74 12		 je	 SHORT $LN133@operator
$LN152@operator:
  0005f	33 c0		 xor	 eax, eax
  00061	3b d8		 cmp	 ebx, eax
  00063	7c 0c		 jl	 SHORT $LN133@operator
  00065	7f 04		 jg	 SHORT $LN153@operator
  00067	3b f9		 cmp	 edi, ecx
  00069	76 06		 jbe	 SHORT $LN133@operator
$LN153@operator:
  0006b	2b f9		 sub	 edi, ecx
  0006d	1b d8		 sbb	 ebx, eax
  0006f	eb 0e		 jmp	 SHORT $LN21@operator
$LN133@operator:
  00071	0f 57 c0	 xorps	 xmm0, xmm0
  00074	66 0f 13 45 c8	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  00079	8b 5d cc	 mov	 ebx, DWORD PTR __Pad$[ebp+4]
  0007c	8b 7d c8	 mov	 edi, DWORD PTR __Pad$[ebp]
$LN21@operator:

; 692  :     const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

  0007f	52		 push	 edx
  00080	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00083	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 693  : 
; 694  :     if (!_Ok) {

  00088	80 7d cc 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0008c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00093	75 0c		 jne	 SHORT $LN11@operator

; 695  :         _State |= ios_base::badbit;

  00095	be 04 00 00 00	 mov	 esi, 4

; 696  :     } else { // state okay, insert characters

  0009a	8b d6		 mov	 edx, esi
  0009c	e9 2a 02 00 00	 jmp	 $LN163@operator
$LN11@operator:

; 698  :         const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Ostr.getloc());

  000a1	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000a4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a6	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  000a9	8b 44 08 30	 mov	 eax, DWORD PTR [eax+ecx+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  000ad	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000b0	89 4d e4	 mov	 DWORD PTR $T8[ebp], ecx
  000b3	89 4d d4	 mov	 DWORD PTR $T3[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  000b6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000b8	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 698  :         const ctype<_Elem>& _Ctype_fac = _STD use_facet<ctype<_Elem>>(_Ostr.getloc());

  000bb	8d 45 d0	 lea	 eax, DWORD PTR $T3[ebp]
  000be	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  000c2	50		 push	 eax
  000c3	e8 00 00 00 00	 call	 ??$use_facet@V?$ctype@_W@std@@@std@@YAABV?$ctype@_W@0@ABVlocale@0@@Z ; std::use_facet<std::ctype<wchar_t> >
  000c8	8b 4d e4	 mov	 ecx, DWORD PTR $T8[ebp]
  000cb	83 c4 04	 add	 esp, 4
  000ce	89 45 d8	 mov	 DWORD PTR __Ctype_fac$1$[ebp], eax
  000d1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000d5	85 c9		 test	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  000d7	74 11		 je	 SHORT $LN116@operator

; 355  :             delete _Ptr->_Decref();

  000d9	8b 01		 mov	 eax, DWORD PTR [ecx]
  000db	ff 50 08	 call	 DWORD PTR [eax+8]
  000de	8b c8		 mov	 ecx, eax
  000e0	85 c9		 test	 ecx, ecx
  000e2	74 06		 je	 SHORT $LN116@operator
  000e4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e6	6a 01		 push	 1
  000e8	ff 10		 call	 DWORD PTR [eax]
$LN116@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 699  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000ea	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ed	8b 02		 mov	 eax, DWORD PTR [edx]
  000ef	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000f2	8b 44 10 14	 mov	 eax, DWORD PTR [eax+edx+20]
  000f6	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000fb	83 f8 40	 cmp	 eax, 64			; 00000040H
  000fe	74 62		 je	 SHORT $LN157@operator
$LL4@operator:

; 700  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00100	85 db		 test	 ebx, ebx
  00102	7c 5e		 jl	 SHORT $LN157@operator
  00104	7f 04		 jg	 SHORT $LN154@operator
  00106	85 ff		 test	 edi, edi
  00108	74 58		 je	 SHORT $LN157@operator
$LN154@operator:

; 701  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0010a	8b 02		 mov	 eax, DWORD PTR [edx]
  0010c	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0010f	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00113	0f b7 54 10 40	 movzx	 edx, WORD PTR [eax+edx+64]
  00118	89 55 dc	 mov	 DWORD PTR $T7[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  0011b	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  0011e	83 38 00	 cmp	 DWORD PTR [eax], 0
  00121	74 21		 je	 SHORT $LN144@operator
  00123	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00126	8b 00		 mov	 eax, DWORD PTR [eax]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00128	85 c0		 test	 eax, eax
  0012a	7e 18		 jle	 SHORT $LN144@operator

; 256  :         --*_IPcount;

  0012c	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0012f	48		 dec	 eax
  00130	89 02		 mov	 DWORD PTR [edx], eax

; 257  :         return (*_IPnext)++;

  00132	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00135	8b 11		 mov	 edx, DWORD PTR [ecx]
  00137	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0013a	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0013c	8b 45 dc	 mov	 eax, DWORD PTR $T7[ebp]
  0013f	66 89 02	 mov	 WORD PTR [edx], ax
  00142	eb 06		 jmp	 SHORT $LN164@operator
$LN144@operator:
  00144	8b 01		 mov	 eax, DWORD PTR [ecx]
  00146	52		 push	 edx
  00147	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN164@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 701  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0014a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  0014d	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00152	0f b7 c0	 movzx	 eax, ax
  00155	66 3b c8	 cmp	 cx, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 701  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00158	75 75		 jne	 SHORT $LN2@operator

; 702  :                     _State |= ios_base::badbit; // insertion failed, quit

  0015a	be 04 00 00 00	 mov	 esi, 4
  0015f	89 75 e8	 mov	 DWORD PTR __State$[ebp], esi
$LN157@operator:
  00162	8b 45 ec	 mov	 eax, DWORD PTR __Count$2$[ebp]
  00165	33 c9		 xor	 ecx, ecx
$LL7@operator:

; 708  :         for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val) {

  00167	85 f6		 test	 esi, esi
  00169	0f 85 00 01 00
	00		 jne	 $LN9@operator
  0016f	85 c9		 test	 ecx, ecx
  00171	0f 8c 9e 00 00
	00		 jl	 $LL10@operator
  00177	7f 08		 jg	 SHORT $LN155@operator
  00179	85 c0		 test	 eax, eax
  0017b	0f 84 94 00 00
	00		 je	 $LL10@operator
$LN155@operator:

; 709  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val)))) {

  00181	8b 02		 mov	 eax, DWORD PTR [edx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2931 :         return do_widen(_Byte);

  00183	8b 4d d8	 mov	 ecx, DWORD PTR __Ctype_fac$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 709  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val)))) {

  00186	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00189	8b 44 10 38	 mov	 eax, DWORD PTR [eax+edx+56]
  0018d	89 45 d4	 mov	 DWORD PTR $T5[ebp], eax
  00190	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00193	8a 00		 mov	 al, BYTE PTR [eax]
  00195	88 45 dc	 mov	 BYTE PTR __Byte$[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2931 :         return do_widen(_Byte);

  00198	8b 01		 mov	 eax, DWORD PTR [ecx]
  0019a	ff 75 dc	 push	 DWORD PTR __Byte$[ebp]
  0019d	ff 50 30	 call	 DWORD PTR [eax+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  001a0	8b 4d d4	 mov	 ecx, DWORD PTR $T5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2931 :         return do_widen(_Byte);

  001a3	0f b7 c0	 movzx	 eax, ax
  001a6	89 45 e4	 mov	 DWORD PTR tv942[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  001a9	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  001ac	83 38 00	 cmp	 DWORD PTR [eax], 0
  001af	74 29		 je	 SHORT $LN145@operator
  001b1	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  001b4	8b 02		 mov	 eax, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001b6	85 c0		 test	 eax, eax
  001b8	7e 20		 jle	 SHORT $LN145@operator

; 256  :         --*_IPcount;

  001ba	48		 dec	 eax
  001bb	89 02		 mov	 DWORD PTR [edx], eax

; 257  :         return (*_IPnext)++;

  001bd	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  001c0	8b 11		 mov	 edx, DWORD PTR [ecx]
  001c2	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  001c5	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001c7	8b 45 e4	 mov	 eax, DWORD PTR tv942[ebp]
  001ca	66 89 02	 mov	 WORD PTR [edx], ax
  001cd	eb 13		 jmp	 SHORT $LN165@operator
$LN2@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 700  :             for (; 0 < _Pad; --_Pad) { // pad on left

  001cf	83 c7 ff	 add	 edi, -1
  001d2	83 d3 ff	 adc	 ebx, -1
  001d5	e9 26 ff ff ff	 jmp	 $LL4@operator
$LN145@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  001da	8b 01		 mov	 eax, DWORD PTR [ecx]
  001dc	ff 75 e4	 push	 DWORD PTR tv942[ebp]
  001df	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN165@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 708  :         for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val) {

  001e2	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  001e5	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001ea	0f b7 c0	 movzx	 eax, ax
  001ed	66 3b c8	 cmp	 cx, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 708  :         for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val) {

  001f0	8b 4d e0	 mov	 ecx, DWORD PTR __Count$1$[ebp]

; 709  :             if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val)))) {

  001f3	b8 04 00 00 00	 mov	 eax, 4
  001f8	0f 44 f0	 cmove	 esi, eax
  001fb	8b 45 ec	 mov	 eax, DWORD PTR __Count$2$[ebp]
  001fe	83 c0 ff	 add	 eax, -1
  00201	89 75 e8	 mov	 DWORD PTR __State$[ebp], esi
  00204	89 45 ec	 mov	 DWORD PTR __Count$2$[ebp], eax
  00207	83 d1 ff	 adc	 ecx, -1
  0020a	ff 45 0c	 inc	 DWORD PTR __Val$[ebp]
  0020d	89 4d e0	 mov	 DWORD PTR __Count$1$[ebp], ecx
  00210	e9 52 ff ff ff	 jmp	 $LL7@operator
$LL10@operator:

; 715  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00215	85 db		 test	 ebx, ebx
  00217	7c 56		 jl	 SHORT $LN9@operator
  00219	7f 04		 jg	 SHORT $LN156@operator
  0021b	85 ff		 test	 edi, edi
  0021d	74 50		 je	 SHORT $LN9@operator
$LN156@operator:

; 716  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0021f	8b 02		 mov	 eax, DWORD PTR [edx]
  00221	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00224	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00228	0f b7 54 10 40	 movzx	 edx, WORD PTR [eax+edx+64]
  0022d	89 55 d8	 mov	 DWORD PTR $T6[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  00230	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00233	83 38 00	 cmp	 DWORD PTR [eax], 0
  00236	74 21		 je	 SHORT $LN146@operator
  00238	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  0023b	8b 00		 mov	 eax, DWORD PTR [eax]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0023d	85 c0		 test	 eax, eax
  0023f	7e 18		 jle	 SHORT $LN146@operator

; 256  :         --*_IPcount;

  00241	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00244	48		 dec	 eax
  00245	89 02		 mov	 DWORD PTR [edx], eax

; 257  :         return (*_IPnext)++;

  00247	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  0024a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024c	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0024f	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00251	8b 45 d8	 mov	 eax, DWORD PTR $T6[ebp]
  00254	66 89 02	 mov	 WORD PTR [edx], ax
  00257	eb 06		 jmp	 SHORT $LN166@operator
$LN146@operator:
  00259	8b 01		 mov	 eax, DWORD PTR [ecx]
  0025b	52		 push	 edx
  0025c	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN166@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  0025f	0f b7 c0	 movzx	 eax, ax
  00262	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00267	66 3b c8	 cmp	 cx, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 716  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0026a	75 29		 jne	 SHORT $LN8@operator

; 717  :                     _State |= ios_base::badbit; // insertion failed, quit

  0026c	83 ce 04	 or	 esi, 4
$LN9@operator:

; 718  :                     break;
; 719  :                 }
; 720  :             }
; 721  :         }
; 722  : 
; 723  :         _Ostr.width(0);

  0026f	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
  00272	ba 04 00 00 00	 mov	 edx, 4
  00277	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0027e	8b 03		 mov	 eax, DWORD PTR [ebx]
  00280	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  00283	c7 44 18 20 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+32], 0
  0028b	c7 44 18 24 00
	00 00 00	 mov	 DWORD PTR [eax+ebx+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
  00293	eb 39		 jmp	 SHORT $LN26@operator
$LN8@operator:

; 715  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00295	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00298	83 c7 ff	 add	 edi, -1
  0029b	83 d3 ff	 adc	 ebx, -1
  0029e	e9 72 ff ff ff	 jmp	 $LL10@operator
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$0:

; 724  :         _CATCH_IO_(ios_base, _Ostr)

  002a3	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  002a6	6a 01		 push	 1
  002a8	6a 04		 push	 4
  002aa	8b 02		 mov	 eax, DWORD PTR [edx]
  002ac	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  002af	03 ca		 add	 ecx, edx
  002b1	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  002b6	b8 00 00 00 00	 mov	 eax, $LN27@operator
  002bb	c3		 ret	 0
$LN27@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
  002bc	8b 75 e8	 mov	 esi, DWORD PTR __State$[ebp]
  002bf	ba 04 00 00 00	 mov	 edx, 4
  002c4	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN163@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 727  :     _Ostr.setstate(_State);

  002cb	8b 5d 08	 mov	 ebx, DWORD PTR __Ostr$[ebp]
$LN26@operator:
  002ce	8b 03		 mov	 eax, DWORD PTR [ebx]
  002d0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  002d3	8b 44 19 0c	 mov	 eax, DWORD PTR [ecx+ebx+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 727  :     _Ostr.setstate(_State);

  002d7	03 cb		 add	 ecx, ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  002d9	0b c6		 or	 eax, esi

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  002db	33 f6		 xor	 esi, esi
  002dd	39 71 38	 cmp	 DWORD PTR [ecx+56], esi
  002e0	0f 45 d6	 cmovne	 edx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  002e3	0b d0		 or	 edx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  002e5	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  002e8	83 e2 17	 and	 edx, 23			; 00000017H
  002eb	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  002ee	23 c2		 and	 eax, edx

; 158  :         if (_Filtered) {

  002f0	75 41		 jne	 SHORT $LN168@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  002f2	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  002f7	84 c0		 test	 al, al
  002f9	75 08		 jne	 SHORT $LN44@operator

; 117  :                 this->_Myostr._Osfx();

  002fb	8b 4d c8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  002fe	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN44@operator:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00303	8b 4d c8	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00306	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  0030d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0030f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00312	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  00316	85 c9		 test	 ecx, ecx
  00318	74 05		 je	 SHORT $LN50@operator

; 79   :                 _Rdbuf->_Unlock();

  0031a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0031c	ff 52 08	 call	 DWORD PTR [edx+8]
$LN50@operator:

; 728  :     return _Ostr;

  0031f	8b c3		 mov	 eax, ebx

; 729  : }

  00321	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00324	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0032b	59		 pop	 ecx
  0032c	5f		 pop	 edi
  0032d	5e		 pop	 esi
  0032e	5b		 pop	 ebx
  0032f	8b e5		 mov	 esp, ebp
  00331	5d		 pop	 ebp
  00332	c3		 ret	 0
$LN168@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  00333	a8 04		 test	 al, 4
  00335	74 07		 je	 SHORT $LN35@operator

; 165  :                 _Msg = "ios_base::badbit set";

  00337	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0033c	eb 0f		 jmp	 SHORT $LN37@operator
$LN35@operator:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  0033e	a8 02		 test	 al, 2
  00340	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00345	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0034a	0f 44 f0	 cmove	 esi, eax
$LN37@operator:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  0034d	8d 45 d0	 lea	 eax, DWORD PTR $T4[ebp]
  00350	6a 01		 push	 1
  00352	50		 push	 eax
  00353	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00358	83 c4 08	 add	 esp, 8
  0035b	8d 4d b4	 lea	 ecx, DWORD PTR $T2[ebp]
  0035e	50		 push	 eax
  0035f	56		 push	 esi
  00360	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00365	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0036a	8d 45 b4	 lea	 eax, DWORD PTR $T2[ebp]
  0036d	50		 push	 eax
  0036e	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN162@operator:
  00373	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d c8	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z$3:
  00008	8d 4d d0	 lea	 ecx, DWORD PTR $T3[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b0	 mov	 ecx, DWORD PTR [edx-80]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
_TEXT	SEGMENT
$T2 = -64						; size = 20
__Pad$ = -44						; size = 8
__Ok$ = -44						; size = 8
$T3 = -36						; size = 8
$T4 = -32						; size = 4
tv746 = -32						; size = 4
$T5 = -28						; size = 4
tv741 = -28						; size = 4
__Count$2$ = -24					; size = 4
__State$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z PROC ; std::operator<<<wchar_t,std::char_traits<wchar_t> >, COMDAT

; 851  : basic_ostream<_Elem, _Traits>& operator<<(basic_ostream<_Elem, _Traits>& _Ostr, const _Elem* _Val) { // insert NTCS

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 34	 sub	 esp, 52			; 00000034H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp

; 852  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 853  : 
; 854  :     ios_base::iostate _State = ios_base::goodbit;

  0002b	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d ec	 mov	 DWORD PTR __State$[ebp], ebx
  00033	8d 4a 02	 lea	 ecx, DWORD PTR [edx+2]
$LL100@operator:
  00036	66 8b 02	 mov	 ax, WORD PTR [edx]
  00039	83 c2 02	 add	 edx, 2
  0003c	66 85 c0	 test	 ax, ax
  0003f	75 f5		 jne	 SHORT $LL100@operator
  00041	2b d1		 sub	 edx, ecx

; 855  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));
; 856  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00043	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00046	d1 fa		 sar	 edx, 1
  00048	89 55 e8	 mov	 DWORD PTR __Count$2$[ebp], edx
  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00050	8b 7c 08 24	 mov	 edi, DWORD PTR [eax+ecx+36]
  00054	8b 74 08 20	 mov	 esi, DWORD PTR [eax+ecx+32]
  00058	85 ff		 test	 edi, edi
  0005a	7c 16		 jl	 SHORT $LN17@operator
  0005c	7f 0e		 jg	 SHORT $LN102@operator
  0005e	85 f6		 test	 esi, esi
  00060	74 10		 je	 SHORT $LN17@operator
  00062	85 ff		 test	 edi, edi
  00064	7c 0c		 jl	 SHORT $LN17@operator
  00066	7f 04		 jg	 SHORT $LN102@operator
  00068	3b f2		 cmp	 esi, edx
  0006a	76 06		 jbe	 SHORT $LN17@operator
$LN102@operator:
  0006c	2b f2		 sub	 esi, edx
  0006e	1b fb		 sbb	 edi, ebx
  00070	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00072	0f 57 c0	 xorps	 xmm0, xmm0
  00075	66 0f 13 45 d4	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  0007a	8b 7d d8	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  0007d	8b 75 d4	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:

; 857  :     const typename _Myos::sentry _Ok(_Ostr);

  00080	51		 push	 ecx
  00081	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00084	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 858  : 
; 859  :     if (!_Ok) {

  00089	80 7d d8 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  0008d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00094	75 0a		 jne	 SHORT $LN8@operator

; 860  :         _State |= ios_base::badbit;

  00096	bb 04 00 00 00	 mov	 ebx, 4

; 861  :     } else { // state okay, insert

  0009b	e9 59 01 00 00	 jmp	 $LN113@operator
$LN8@operator:

; 862  :         _TRY_IO_BEGIN
; 863  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  000a0	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000a3	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000a7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ac	8b 44 08 14	 mov	 eax, DWORD PTR [eax+ecx+20]
  000b0	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000b5	83 f8 40	 cmp	 eax, 64			; 00000040H
  000b8	74 74		 je	 SHORT $LN97@operator
  000ba	66 0f 1f 44 00
	00		 npad	 6
$LL4@operator:

; 864  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000c0	85 ff		 test	 edi, edi
  000c2	7c 6a		 jl	 SHORT $LN97@operator
  000c4	7f 04		 jg	 SHORT $LN103@operator
  000c6	85 f6		 test	 esi, esi
  000c8	74 64		 je	 SHORT $LN97@operator
$LN103@operator:

; 865  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000ca	8b 01		 mov	 eax, DWORD PTR [ecx]
  000cc	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000cf	8b 54 08 38	 mov	 edx, DWORD PTR [eax+ecx+56]
  000d3	0f b7 4c 08 40	 movzx	 ecx, WORD PTR [eax+ecx+64]
  000d8	89 4d e0	 mov	 DWORD PTR $T4[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  000db	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000de	83 38 00	 cmp	 DWORD PTR [eax], 0
  000e1	74 21		 je	 SHORT $LN96@operator
  000e3	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000e6	8b 00		 mov	 eax, DWORD PTR [eax]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000e8	85 c0		 test	 eax, eax
  000ea	7e 18		 jle	 SHORT $LN96@operator

; 256  :         --*_IPcount;

  000ec	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  000ef	48		 dec	 eax
  000f0	89 01		 mov	 DWORD PTR [ecx], eax

; 257  :         return (*_IPnext)++;

  000f2	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  000f5	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f7	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  000fa	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000fc	8b 45 e0	 mov	 eax, DWORD PTR $T4[ebp]
  000ff	66 89 02	 mov	 WORD PTR [edx], ax
  00102	eb 08		 jmp	 SHORT $LN114@operator
$LN96@operator:
  00104	8b 02		 mov	 eax, DWORD PTR [edx]
  00106	51		 push	 ecx
  00107	8b ca		 mov	 ecx, edx
  00109	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN114@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  0010c	0f b7 c0	 movzx	 eax, ax
  0010f	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  00114	66 3b c8	 cmp	 cx, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 865  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00117	75 0a		 jne	 SHORT $LN2@operator

; 866  :                     _State |= ios_base::badbit; // insertion failed, quit

  00119	bb 04 00 00 00	 mov	 ebx, 4

; 867  :                     break;

  0011e	e9 92 00 00 00	 jmp	 $LN6@operator
$LN2@operator:

; 864  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00123	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00126	83 c6 ff	 add	 esi, -1
  00129	83 d7 ff	 adc	 edi, -1
  0012c	eb 92		 jmp	 SHORT $LL4@operator
$LN97@operator:

; 872  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0012e	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  00130	6a 00		 push	 0
  00132	ff 75 e8	 push	 DWORD PTR __Count$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 872  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00135	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  00138	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 872  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0013b	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  0013f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00141	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00144	ff d0		 call	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 872  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00146	3b 45 e8	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  00149	75 67		 jne	 SHORT $LN104@operator
  0014b	85 d2		 test	 edx, edx
  0014d	75 63		 jne	 SHORT $LN104@operator
  0014f	90		 npad	 1
$LL7@operator:

; 873  :             _State |= ios_base::badbit;
; 874  :         }
; 875  : 
; 876  :         if (_State == ios_base::goodbit) {
; 877  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00150	85 ff		 test	 edi, edi
  00152	7c 61		 jl	 SHORT $LN6@operator
  00154	7f 04		 jg	 SHORT $LN105@operator
  00156	85 f6		 test	 esi, esi
  00158	74 5b		 je	 SHORT $LN6@operator
$LN105@operator:

; 878  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0015a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0015d	8b 02		 mov	 eax, DWORD PTR [edx]
  0015f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00162	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00166	0f b7 54 10 40	 movzx	 edx, WORD PTR [eax+edx+64]
  0016b	89 55 e4	 mov	 DWORD PTR $T5[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  0016e	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00171	83 38 00	 cmp	 DWORD PTR [eax], 0
  00174	74 21		 je	 SHORT $LN56@operator
  00176	8b 41 30	 mov	 eax, DWORD PTR [ecx+48]
  00179	8b 00		 mov	 eax, DWORD PTR [eax]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0017b	85 c0		 test	 eax, eax
  0017d	7e 18		 jle	 SHORT $LN56@operator

; 256  :         --*_IPcount;

  0017f	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  00182	48		 dec	 eax
  00183	89 02		 mov	 DWORD PTR [edx], eax

; 257  :         return (*_IPnext)++;

  00185	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00188	8b 11		 mov	 edx, DWORD PTR [ecx]
  0018a	8d 42 02	 lea	 eax, DWORD PTR [edx+2]
  0018d	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0018f	8b 45 e4	 mov	 eax, DWORD PTR $T5[ebp]
  00192	66 89 02	 mov	 WORD PTR [edx], ax
  00195	eb 06		 jmp	 SHORT $LN115@operator
$LN56@operator:
  00197	8b 01		 mov	 eax, DWORD PTR [ecx]
  00199	52		 push	 edx
  0019a	ff 50 0c	 call	 DWORD PTR [eax+12]
$LN115@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 367  :         return _Left == _Right;

  0019d	0f b7 c0	 movzx	 eax, ax
  001a0	b9 ff ff 00 00	 mov	 ecx, 65535		; 0000ffffH
  001a5	66 3b c8	 cmp	 cx, ax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 878  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001a8	74 08		 je	 SHORT $LN104@operator

; 873  :             _State |= ios_base::badbit;
; 874  :         }
; 875  : 
; 876  :         if (_State == ios_base::goodbit) {
; 877  :             for (; 0 < _Pad; --_Pad) { // pad on right

  001aa	83 c6 ff	 add	 esi, -1
  001ad	83 d7 ff	 adc	 edi, -1
  001b0	eb 9e		 jmp	 SHORT $LL7@operator
$LN104@operator:

; 879  :                     _State |= ios_base::badbit; // insertion failed, quit
; 880  :                     break;
; 881  :                 }
; 882  :             }
; 883  :         }
; 884  : 
; 885  :         _Ostr.width(0);

  001b2	83 cb 04	 or	 ebx, 4
$LN6@operator:
  001b5	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  001b8	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001bf	8b 06		 mov	 eax, DWORD PTR [esi]
  001c1	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  001c4	c7 44 30 20 00
	00 00 00	 mov	 DWORD PTR [eax+esi+32], 0
  001cc	c7 44 30 24 00
	00 00 00	 mov	 DWORD PTR [eax+esi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
  001d4	eb 26		 jmp	 SHORT $LN22@operator
__catch$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$0:

; 886  :         _CATCH_IO_(ios_base, _Ostr)

  001d6	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001d9	6a 01		 push	 1
  001db	6a 04		 push	 4
  001dd	8b 02		 mov	 eax, DWORD PTR [edx]
  001df	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e2	03 ca		 add	 ecx, edx
  001e4	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  001e9	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001ee	c3		 ret	 0
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
  001ef	8b 5d ec	 mov	 ebx, DWORD PTR __State$[ebp]
  001f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN113@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 889  :     _Ostr.setstate(_State);

  001f9	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
$LN22@operator:
  001fc	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  001fe	33 ff		 xor	 edi, edi
  00200	b9 04 00 00 00	 mov	 ecx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 889  :     _Ostr.setstate(_State);

  00205	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  00208	8b 44 32 0c	 mov	 eax, DWORD PTR [edx+esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 889  :     _Ostr.setstate(_State);

  0020c	03 d6		 add	 edx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  0020e	0b c3		 or	 eax, ebx

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  00210	39 7a 38	 cmp	 DWORD PTR [edx+56], edi
  00213	0f 45 cf	 cmovne	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  00216	0b c8		 or	 ecx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  00218	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0021b	83 e1 17	 and	 ecx, 23			; 00000017H
  0021e	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00221	23 c1		 and	 eax, ecx

; 158  :         if (_Filtered) {

  00223	75 41		 jne	 SHORT $LN117@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00225	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  0022a	84 c0		 test	 al, al
  0022c	75 08		 jne	 SHORT $LN40@operator

; 117  :                 this->_Myostr._Osfx();

  0022e	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00231	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN40@operator:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00236	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00239	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  00240	8b 01		 mov	 eax, DWORD PTR [ecx]
  00242	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00245	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  00249	85 c9		 test	 ecx, ecx
  0024b	74 05		 je	 SHORT $LN46@operator

; 79   :                 _Rdbuf->_Unlock();

  0024d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0024f	ff 52 08	 call	 DWORD PTR [edx+8]
$LN46@operator:

; 890  :     return _Ostr;

  00252	8b c6		 mov	 eax, esi

; 891  : }

  00254	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00257	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0025e	59		 pop	 ecx
  0025f	5f		 pop	 edi
  00260	5e		 pop	 esi
  00261	5b		 pop	 ebx
  00262	8b e5		 mov	 esp, ebp
  00264	5d		 pop	 ebp
  00265	c3		 ret	 0
$LN117@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  00266	a8 04		 test	 al, 4
  00268	74 07		 je	 SHORT $LN31@operator

; 165  :                 _Msg = "ios_base::badbit set";

  0026a	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0026f	eb 0f		 jmp	 SHORT $LN33@operator
$LN31@operator:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00271	a8 02		 test	 al, 2
  00273	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00278	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0027d	0f 44 f0	 cmove	 esi, eax
$LN33@operator:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  00280	8d 45 dc	 lea	 eax, DWORD PTR $T3[ebp]
  00283	6a 01		 push	 1
  00285	50		 push	 eax
  00286	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0028b	83 c4 08	 add	 esp, 8
  0028e	8d 4d c0	 lea	 ecx, DWORD PTR $T2[ebp]
  00291	50		 push	 eax
  00292	56		 push	 esi
  00293	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00298	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0029d	8d 45 c0	 lea	 eax, DWORD PTR $T2[ebp]
  002a0	50		 push	 eax
  002a1	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN110@operator:
  002a6	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a bc	 mov	 ecx, DWORD PTR [edx-68]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ENDP ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
$T2 = -56						; size = 20
__Ok$3 = -36						; size = 8
$T4 = -28						; size = 8
__State$5 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush, COMDAT
; _this$ = ecx

; 562  :     basic_ostream& __CLR_OR_THIS_CALL flush() { // flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 563  :         const auto _Rdbuf = _Myios::rdbuf();

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	8b 7c 30 38	 mov	 edi, DWORD PTR [eax+esi+56]

; 564  :         if (_Rdbuf) { // buffer exists, flush it

  00039	85 ff		 test	 edi, edi
  0003b	0f 84 b8 00 00
	00		 je	 $LN75@flush

; 565  :             const sentry _Ok(*this);

  00041	56		 push	 esi
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 566  : 
; 567  :             if (_Ok) {

  0004a	80 7d e0 00	 cmp	 BYTE PTR __Ok$3[ebp+4], 0
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00055	74 75		 je	 SHORT $LN58@flush
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 121  :         return sync();

  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 568  :                 ios_base::iostate _State = ios_base::goodbit;

  0005b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __State$5[ebp], 0

; 569  :                 _TRY_IO_BEGIN

  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 121  :         return sync();

  00066	ff 50 34	 call	 DWORD PTR [eax+52]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 571  :                     _State |= ios_base::badbit; // sync failed

  00069	33 c9		 xor	 ecx, ecx
  0006b	ba 04 00 00 00	 mov	 edx, 4
  00070	83 f8 ff	 cmp	 eax, -1
  00073	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
  00076	8b fa		 mov	 edi, edx
  00078	0f 45 f9	 cmovne	 edi, ecx
  0007b	eb 2b		 jmp	 SHORT $LN10@flush
__catch$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$0:

; 572  :                 }
; 573  :                 _CATCH_IO_END

  0007d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00080	6a 01		 push	 1
  00082	6a 04		 push	 4
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00089	03 ca		 add	 ecx, edx
  0008b	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  00090	b8 00 00 00 00	 mov	 eax, $LN11@flush
  00095	c3		 ret	 0
$LN11@flush:
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	ba 04 00 00 00	 mov	 edx, 4
  0009e	8b 7d e8	 mov	 edi, DWORD PTR __State$5[ebp]
  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN10@flush:

; 574  :                 _Myios::setstate(_State);

  000a8	8b 06		 mov	 eax, DWORD PTR [esi]
  000aa	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  000ad	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 574  :                 _Myios::setstate(_State);

  000b1	03 ce		 add	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  000b3	0b c7		 or	 eax, edi

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  000b5	33 ff		 xor	 edi, edi
  000b7	39 79 38	 cmp	 DWORD PTR [ecx+56], edi
  000ba	0f 45 d7	 cmovne	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  000bd	0b d0		 or	 edx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  000bf	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000c2	83 e2 17	 and	 edx, 23			; 00000017H
  000c5	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  000c8	23 c2		 and	 eax, edx

; 158  :         if (_Filtered) {

  000ca	75 41		 jne	 SHORT $LN83@flush
$LN58@flush:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  000cc	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  000d1	84 c0		 test	 al, al

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  000d3	75 08		 jne	 SHORT $LN69@flush

; 117  :                 this->_Myostr._Osfx();

  000d5	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000d8	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN69@flush:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  000dd	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000e0	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ec	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  000f0	85 c9		 test	 ecx, ecx
  000f2	74 05		 je	 SHORT $LN75@flush

; 79   :                 _Rdbuf->_Unlock();

  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	ff 50 08	 call	 DWORD PTR [eax+8]
$LN75@flush:

; 575  :             }
; 576  :         }
; 577  :         return *this;

  000f9	8b c6		 mov	 eax, esi

; 578  :     }

  000fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00105	59		 pop	 ecx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
$LN83@flush:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  0010d	a8 04		 test	 al, 4
  0010f	74 07		 je	 SHORT $LN60@flush

; 165  :                 _Msg = "ios_base::badbit set";

  00111	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00116	eb 0f		 jmp	 SHORT $LN62@flush
$LN60@flush:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00118	a8 02		 test	 al, 2
  0011a	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00124	0f 44 f0	 cmove	 esi, eax
$LN62@flush:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  00127	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  0012a	6a 01		 push	 1
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00132	83 c4 08	 add	 esp, 8
  00135	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00138	50		 push	 eax
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  0013f	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00144	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN81@flush:
  0014d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::flush
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
_TEXT	SEGMENT
$T2 = -68						; size = 20
__Ok$ = -48						; size = 8
__State$ = -40						; size = 4
$T3 = -36						; size = 8
$T4 = -36						; size = 8
$T5 = -36						; size = 8
$T6 = -32						; size = 4
_this$ = -28						; size = 4
$T7 = -24						; size = 8
__Nput_fac$1$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<, COMDAT
; _this$ = ecx

; 340  :     basic_ostream& __CLR_OR_THIS_CALL operator<<(unsigned long _Val) { // insert an unsigned long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 e4	 mov	 DWORD PTR _this$[ebp], esi

; 341  :         ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 342  :         const sentry _Ok(*this);

  00032	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00035	56		 push	 esi
  00036	89 7d d8	 mov	 DWORD PTR __State$[ebp], edi
  00039	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::sentry

; 343  : 
; 344  :         if (_Ok) { // state okay, use facet to insert

  0003e	80 7d d4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00042	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00045	0f 84 ae 00 00
	00		 je	 $LN58@operator

; 345  :             const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  00050	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	89 4d e0	 mov	 DWORD PTR $T6[ebp], ecx
  0005a	89 4d ec	 mov	 DWORD PTR $T7[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 345  :             const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00062	8d 45 e8	 lea	 eax, DWORD PTR $T7[ebp]
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@@std@@YAABV?$num_put@_WV?$ostreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<wchar_t,std::ostreambuf_iterator<wchar_t,std::char_traits<wchar_t> > > >
  0006f	8b 4d e0	 mov	 ecx, DWORD PTR $T6[ebp]
  00072	83 c4 04	 add	 esp, 4
  00075	89 45 ec	 mov	 DWORD PTR __Nput_fac$1$[ebp], eax
  00078	85 c9		 test	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  0007a	74 15		 je	 SHORT $LN23@operator

; 355  :             delete _Ptr->_Decref();

  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00081	ff d2		 call	 edx
  00083	85 c0		 test	 eax, eax
  00085	74 0a		 je	 SHORT $LN23@operator
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	6a 01		 push	 1
  0008b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008d	8b c8		 mov	 ecx, eax
  0008f	ff d2		 call	 edx
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 348  :             if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1254 :         return do_put(_Dest, _Iosbase, _Fill, _Val);

  00093	ff 75 08	 push	 DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 347  :             _TRY_IO_BEGIN

  00096	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 348  :             if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {

  0009a	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1254 :         return do_put(_Dest, _Iosbase, _Fill, _Val);

  0009d	8b 45 ec	 mov	 eax, DWORD PTR __Nput_fac$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 348  :             if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {

  000a0	03 d6		 add	 edx, esi
  000a2	0f b7 4a 40	 movzx	 ecx, WORD PTR [edx+64]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1254 :         return do_put(_Dest, _Iosbase, _Fill, _Val);

  000a6	8b 00		 mov	 eax, DWORD PTR [eax]
  000a8	51		 push	 ecx
  000a9	52		 push	 edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 550  :     bool _Failed = false; // true if any stores have failed

  000aa	c6 45 dc 00	 mov	 BYTE PTR $T3[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1254 :         return do_put(_Dest, _Iosbase, _Fill, _Val);

  000ae	8d 4d dc	 lea	 ecx, DWORD PTR $T4[ebp]
  000b1	ff 72 38	 push	 DWORD PTR [edx+56]
  000b4	ff 75 dc	 push	 DWORD PTR $T3[ebp]
  000b7	51		 push	 ecx
  000b8	8b 4d ec	 mov	 ecx, DWORD PTR __Nput_fac$1$[ebp]
  000bb	ff 50 20	 call	 DWORD PTR [eax+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 348  :             if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {

  000be	80 7d dc 00	 cmp	 BYTE PTR $T4[ebp], 0
  000c2	ba 04 00 00 00	 mov	 edx, 4
  000c7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000ce	0f 45 fa	 cmovne	 edi, edx
  000d1	eb 2b		 jmp	 SHORT $LN10@operator
__catch$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$0:

; 349  :                 _State |= ios_base::badbit;
; 350  :             }
; 351  :             _CATCH_IO_END

  000d3	8b 55 e4	 mov	 edx, DWORD PTR _this$[ebp]
  000d6	6a 01		 push	 1
  000d8	6a 04		 push	 4
  000da	8b 02		 mov	 eax, DWORD PTR [edx]
  000dc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000df	03 ca		 add	 ecx, edx
  000e1	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
  000e6	b8 00 00 00 00	 mov	 eax, $LN11@operator
  000eb	c3		 ret	 0
$LN11@operator:

; 343  : 
; 344  :         if (_Ok) { // state okay, use facet to insert

  000ec	8b 75 e4	 mov	 esi, DWORD PTR _this$[ebp]
  000ef	8b 7d d8	 mov	 edi, DWORD PTR __State$[ebp]
  000f2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN58@operator:

; 354  :         _Myios::setstate(_State);

  000f9	ba 04 00 00 00	 mov	 edx, 4
$LN10@operator:
  000fe	8b 06		 mov	 eax, DWORD PTR [esi]
  00100	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  00103	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 354  :         _Myios::setstate(_State);

  00107	03 ce		 add	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  00109	0b c7		 or	 eax, edi

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  0010b	33 ff		 xor	 edi, edi
  0010d	39 79 38	 cmp	 DWORD PTR [ecx+56], edi
  00110	0f 45 d7	 cmovne	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  00113	0b d0		 or	 edx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  00115	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00118	83 e2 17	 and	 edx, 23			; 00000017H
  0011b	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  0011e	23 c2		 and	 eax, edx

; 158  :         if (_Filtered) {

  00120	75 43		 jne	 SHORT $LN62@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00122	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  00127	84 c0		 test	 al, al
  00129	75 08		 jne	 SHORT $LN47@operator

; 117  :                 this->_Myostr._Osfx();

  0012b	8b 4d d0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  0012e	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
$LN47@operator:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00133	8b 4d d0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00136	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  0013d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0013f	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00142	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  00146	85 c9		 test	 ecx, ecx
  00148	74 05		 je	 SHORT $LN53@operator

; 79   :                 _Rdbuf->_Unlock();

  0014a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0014c	ff 50 08	 call	 DWORD PTR [eax+8]
$LN53@operator:

; 355  :         return *this;

  0014f	8b c6		 mov	 eax, esi

; 356  :     }

  00151	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00154	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015b	59		 pop	 ecx
  0015c	5f		 pop	 edi
  0015d	5e		 pop	 esi
  0015e	5b		 pop	 ebx
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c2 04 00	 ret	 4
$LN62@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  00165	a8 04		 test	 al, 4
  00167	74 07		 je	 SHORT $LN38@operator

; 165  :                 _Msg = "ios_base::badbit set";

  00169	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0016e	eb 0f		 jmp	 SHORT $LN40@operator
$LN38@operator:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00170	a8 02		 test	 al, 2
  00172	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00177	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0017c	0f 44 f0	 cmove	 esi, eax
$LN40@operator:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  0017f	8d 45 dc	 lea	 eax, DWORD PTR $T5[ebp]
  00182	6a 01		 push	 1
  00184	50		 push	 eax
  00185	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0018a	83 c4 08	 add	 esp, 8
  0018d	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00190	50		 push	 eax
  00191	56		 push	 esi
  00192	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00197	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0019c	8d 45 bc	 lea	 eax, DWORD PTR $T2[ebp]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@operator:
  001a5	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$2:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAE@XZ ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z$3:
  00008	8d 4d e8	 lea	 ecx, DWORD PTR $T7[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T2 = -44						; size = 20
$T3 = -24						; size = 8
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ PROC ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx, COMDAT
; _this$ = ecx

; 159  :     void __CLR_OR_THIS_CALL _Osfx() noexcept { // perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 160  :         _TRY_BEGIN

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 161  :         if (this->good() && this->flags() & ios_base::unitbuf) {

  0003e	75 38		 jne	 SHORT $LN21@Osfx
  00040	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00045	74 31		 je	 SHORT $LN21@Osfx

; 162  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00047	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 121  :         return sync();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 34	 call	 DWORD PTR [eax+52]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 162  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00050	83 f8 ff	 cmp	 eax, -1
  00053	75 23		 jne	 SHORT $LN21@Osfx

; 163  :                 _Myios::setstate(ios_base::badbit);

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  0005a	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  0005e	83 e0 13	 and	 eax, 19			; 00000013H
  00061	83 c8 04	 or	 eax, 4

; 156  :         _Mystate             = _State;

  00064	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 157  :         const auto _Filtered = _State & _Except;

  00068	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  0006c	23 c8		 and	 ecx, eax

; 158  :         if (_Filtered) {

  0006e	75 1a		 jne	 SHORT $LN34@Osfx
  00070	eb 06		 jmp	 SHORT $LN21@Osfx
__catch$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ$0:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 167  :         _CATCH_END

  00072	b8 00 00 00 00	 mov	 eax, $LN21@Osfx
  00077	c3		 ret	 0
$LN21@Osfx:

; 168  :     }

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN34@Osfx:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  0008a	f6 c1 04	 test	 cl, 4
  0008d	74 07		 je	 SHORT $LN23@Osfx

; 165  :                 _Msg = "ios_base::badbit set";

  0008f	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00094	eb 10		 jmp	 SHORT $LN25@Osfx
$LN23@Osfx:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00096	f6 c1 02	 test	 cl, 2
  00099	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000a3	0f 44 f0	 cmove	 esi, eax
$LN25@Osfx:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  000a6	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000a9	6a 01		 push	 1
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000b1	83 c4 08	 add	 esp, 8
  000b4	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  000be	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000c3	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN32@Osfx:
  000cc	cc		 int	 3
  000cd	cc		 int	 3
  000ce	cc		 int	 3
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::_Osfx
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
;	COMDAT ?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate, COMDAT
; _this$ = ecx

; 49   :     void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Reraise = false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  00003	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	b8 04 00 00 00	 mov	 eax, 4
  0000d	39 51 38	 cmp	 DWORD PTR [ecx+56], edx
  00010	0f 45 c2	 cmovne	 eax, edx
  00013	0b 41 0c	 or	 eax, DWORD PTR [ecx+12]
  00016	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 50   :         // merge _State into state, possibly reraise exception
; 51   :         clear(rdstate() | _State, _Reraise);
; 52   :     }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?setstate@?$basic_ios@_WU?$char_traits@_W@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<wchar_t,std::char_traits<wchar_t> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
$T2 = -68						; size = 20
__Pad$ = -48						; size = 8
__Ok$ = -48						; size = 8
$T3 = -40						; size = 8
$T4 = -36						; size = 4
tv743 = -32						; size = 4
__Count$2$ = -28					; size = 4
__State$ = -24						; size = 4
$T5 = -17						; size = 1
$T6 = -17						; size = 1
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 768  : basic_ostream<char, _Traits>& operator<<(basic_ostream<char, _Traits>& _Ostr, const char* _Val) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 38	 sub	 esp, 56			; 00000038H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0002b	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 773  :     ios_base::iostate _State = ios_base::goodbit;

  0002e	33 db		 xor	 ebx, ebx
  00030	89 5d e8	 mov	 DWORD PTR __State$[ebp], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00033	8d 4a 01	 lea	 ecx, DWORD PTR [edx+1]
$LL111@operator:
  00036	8a 02		 mov	 al, BYTE PTR [edx]
  00038	42		 inc	 edx
  00039	84 c0		 test	 al, al
  0003b	75 f9		 jne	 SHORT $LL111@operator
  0003d	2b d1		 sub	 edx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 775  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  0003f	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00042	89 55 e4	 mov	 DWORD PTR __Count$2$[ebp], edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 775  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00045	8b 01		 mov	 eax, DWORD PTR [ecx]
  00047	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004a	8b 7c 08 24	 mov	 edi, DWORD PTR [eax+ecx+36]
  0004e	8b 74 08 20	 mov	 esi, DWORD PTR [eax+ecx+32]
  00052	85 ff		 test	 edi, edi
  00054	7c 16		 jl	 SHORT $LN17@operator
  00056	7f 0e		 jg	 SHORT $LN113@operator
  00058	85 f6		 test	 esi, esi
  0005a	74 10		 je	 SHORT $LN17@operator
  0005c	85 ff		 test	 edi, edi
  0005e	7c 0c		 jl	 SHORT $LN17@operator
  00060	7f 04		 jg	 SHORT $LN113@operator
  00062	3b f2		 cmp	 esi, edx
  00064	76 06		 jbe	 SHORT $LN17@operator
$LN113@operator:
  00066	2b f2		 sub	 esi, edx
  00068	1b fb		 sbb	 edi, ebx
  0006a	eb 0e		 jmp	 SHORT $LN18@operator
$LN17@operator:
  0006c	0f 57 c0	 xorps	 xmm0, xmm0
  0006f	66 0f 13 45 d0	 movlpd	 QWORD PTR __Pad$[ebp], xmm0
  00074	8b 7d d4	 mov	 edi, DWORD PTR __Pad$[ebp+4]
  00077	8b 75 d0	 mov	 esi, DWORD PTR __Pad$[ebp]
$LN18@operator:

; 776  :     const typename _Myos::sentry _Ok(_Ostr);

  0007a	51		 push	 ecx
  0007b	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0007e	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 777  : 
; 778  :     if (!_Ok) {

  00083	80 7d d4 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00087	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0008e	75 0a		 jne	 SHORT $LN8@operator

; 779  :         _State |= ios_base::badbit;

  00090	bb 04 00 00 00	 mov	 ebx, 4

; 780  :     } else { // state okay, insert

  00095	e9 4e 01 00 00	 jmp	 $LN123@operator
$LN8@operator:

; 781  :         _TRY_IO_BEGIN
; 782  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  0009a	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0009d	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  000a1	8b 01		 mov	 eax, DWORD PTR [ecx]
  000a3	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000a6	8b 44 08 14	 mov	 eax, DWORD PTR [eax+ecx+20]
  000aa	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  000af	83 f8 40	 cmp	 eax, 64			; 00000040H
  000b2	74 6e		 je	 SHORT $LN108@operator
$LL4@operator:

; 783  :             for (; 0 < _Pad; --_Pad) { // pad on left

  000b4	85 ff		 test	 edi, edi
  000b6	7c 6a		 jl	 SHORT $LN108@operator
  000b8	7f 04		 jg	 SHORT $LN114@operator
  000ba	85 f6		 test	 esi, esi
  000bc	74 64		 je	 SHORT $LN108@operator
$LN114@operator:

; 784  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  000be	8b 01		 mov	 eax, DWORD PTR [ecx]
  000c0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000c3	8b 54 08 38	 mov	 edx, DWORD PTR [eax+ecx+56]
  000c7	8a 4c 08 40	 mov	 cl, BYTE PTR [eax+ecx+64]
  000cb	89 55 dc	 mov	 DWORD PTR $T4[ebp], edx
  000ce	88 4d ef	 mov	 BYTE PTR $T5[ebp], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  000d1	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  000d4	83 38 00	 cmp	 DWORD PTR [eax], 0
  000d7	74 23		 je	 SHORT $LN107@operator
  000d9	8b 42 30	 mov	 eax, DWORD PTR [edx+48]
  000dc	8b 00		 mov	 eax, DWORD PTR [eax]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000de	85 c0		 test	 eax, eax
  000e0	7e 1a		 jle	 SHORT $LN107@operator

; 256  :         --*_IPcount;

  000e2	8b 4a 30	 mov	 ecx, DWORD PTR [edx+48]
  000e5	48		 dec	 eax
  000e6	89 01		 mov	 DWORD PTR [ecx], eax

; 257  :         return (*_IPnext)++;

  000e8	8b 4a 20	 mov	 ecx, DWORD PTR [edx+32]
  000eb	8b 11		 mov	 edx, DWORD PTR [ecx]
  000ed	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  000f0	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000f2	8a 45 ef	 mov	 al, BYTE PTR $T5[ebp]
  000f5	88 02		 mov	 BYTE PTR [edx], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 518  :         return static_cast<unsigned char>(_Ch);

  000f7	0f b6 c0	 movzx	 eax, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  000fa	eb 0e		 jmp	 SHORT $LN78@operator
$LN107@operator:
  000fc	8b 02		 mov	 eax, DWORD PTR [edx]
  000fe	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 518  :         return static_cast<unsigned char>(_Ch);

  00101	0f b6 c1	 movzx	 eax, cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00104	8b 4d dc	 mov	 ecx, DWORD PTR $T4[ebp]
  00107	50		 push	 eax
  00108	ff d2		 call	 edx
$LN78@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 522  :         return _Left == _Right;

  0010a	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 784  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0010d	75 08		 jne	 SHORT $LN2@operator

; 785  :                     _State |= ios_base::badbit; // insertion failed, quit

  0010f	8d 58 05	 lea	 ebx, DWORD PTR [eax+5]

; 786  :                     break;

  00112	e9 8d 00 00 00	 jmp	 $LN6@operator
$LN2@operator:

; 783  :             for (; 0 < _Pad; --_Pad) { // pad on left

  00117	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0011a	83 c6 ff	 add	 esi, -1
  0011d	83 d7 ff	 adc	 edi, -1
  00120	eb 92		 jmp	 SHORT $LL4@operator
$LN108@operator:

; 791  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00122	8b 01		 mov	 eax, DWORD PTR [ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  00124	6a 00		 push	 0
  00126	ff 75 e4	 push	 DWORD PTR __Count$2$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 791  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  00129	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  0012c	ff 75 0c	 push	 DWORD PTR __Val$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 791  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0012f	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 171  :         return xsputn(_Ptr, _Count);

  00133	8b 01		 mov	 eax, DWORD PTR [ecx]
  00135	8b 40 24	 mov	 eax, DWORD PTR [eax+36]
  00138	ff d0		 call	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 791  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0013a	3b 45 e4	 cmp	 eax, DWORD PTR __Count$2$[ebp]
  0013d	75 62		 jne	 SHORT $LN115@operator
  0013f	85 d2		 test	 edx, edx
  00141	75 5e		 jne	 SHORT $LN115@operator
$LL7@operator:

; 792  :             _State |= ios_base::badbit;
; 793  :         }
; 794  : 
; 795  :         if (_State == ios_base::goodbit) {
; 796  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00143	85 ff		 test	 edi, edi
  00145	7c 5d		 jl	 SHORT $LN6@operator
  00147	7f 04		 jg	 SHORT $LN116@operator
  00149	85 f6		 test	 esi, esi
  0014b	74 57		 je	 SHORT $LN6@operator
$LN116@operator:

; 797  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  0014d	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00150	8b 02		 mov	 eax, DWORD PTR [edx]
  00152	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00155	8b 4c 10 38	 mov	 ecx, DWORD PTR [eax+edx+56]
  00159	8a 44 10 40	 mov	 al, BYTE PTR [eax+edx+64]
  0015d	88 45 ef	 mov	 BYTE PTR $T6[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 261  :         return *_IPnext ? *_IPcount : 0;

  00160	8b 41 20	 mov	 eax, DWORD PTR [ecx+32]
  00163	83 38 00	 cmp	 DWORD PTR [eax], 0
  00166	74 20		 je	 SHORT $LN56@operator
  00168	8b 51 30	 mov	 edx, DWORD PTR [ecx+48]
  0016b	8b 02		 mov	 eax, DWORD PTR [edx]

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0016d	85 c0		 test	 eax, eax
  0016f	7e 17		 jle	 SHORT $LN56@operator

; 256  :         --*_IPcount;

  00171	48		 dec	 eax
  00172	89 02		 mov	 DWORD PTR [edx], eax

; 257  :         return (*_IPnext)++;

  00174	8b 49 20	 mov	 ecx, DWORD PTR [ecx+32]
  00177	8b 11		 mov	 edx, DWORD PTR [ecx]
  00179	8d 42 01	 lea	 eax, DWORD PTR [edx+1]
  0017c	89 01		 mov	 DWORD PTR [ecx], eax

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  0017e	8a 45 ef	 mov	 al, BYTE PTR $T6[ebp]
  00181	88 02		 mov	 BYTE PTR [edx], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 518  :         return static_cast<unsigned char>(_Ch);

  00183	0f b6 c0	 movzx	 eax, al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00186	eb 0c		 jmp	 SHORT $LN57@operator
$LN56@operator:
  00188	8b 01		 mov	 eax, DWORD PTR [ecx]
  0018a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 518  :         return static_cast<unsigned char>(_Ch);

  0018d	0f b6 45 ef	 movzx	 eax, BYTE PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 166  :         return 0 < _Pnavail() ? _Traits::to_int_type(*_Pninc() = _Ch) : overflow(_Traits::to_int_type(_Ch));

  00191	50		 push	 eax
  00192	ff d2		 call	 edx
$LN57@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 522  :         return _Left == _Right;

  00194	83 f8 ff	 cmp	 eax, -1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 797  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00197	74 08		 je	 SHORT $LN115@operator

; 792  :             _State |= ios_base::badbit;
; 793  :         }
; 794  : 
; 795  :         if (_State == ios_base::goodbit) {
; 796  :             for (; 0 < _Pad; --_Pad) { // pad on right

  00199	83 c6 ff	 add	 esi, -1
  0019c	83 d7 ff	 adc	 edi, -1
  0019f	eb a2		 jmp	 SHORT $LL7@operator
$LN115@operator:

; 798  :                     _State |= ios_base::badbit; // insertion failed, quit
; 799  :                     break;
; 800  :                 }
; 801  :             }
; 802  :         }
; 803  : 
; 804  :         _Ostr.width(0);

  001a1	83 cb 04	 or	 ebx, 4
$LN6@operator:
  001a4	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
  001a7	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  001ae	8b 06		 mov	 eax, DWORD PTR [esi]
  001b0	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 284  :         _Wide                      = _Newwidth;

  001b3	c7 44 30 20 00
	00 00 00	 mov	 DWORD PTR [eax+esi+32], 0
  001bb	c7 44 30 24 00
	00 00 00	 mov	 DWORD PTR [eax+esi+36], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
  001c3	eb 26		 jmp	 SHORT $LN22@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 805  :         _CATCH_IO_(ios_base, _Ostr)

  001c5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001c8	6a 01		 push	 1
  001ca	6a 04		 push	 4
  001cc	8b 02		 mov	 eax, DWORD PTR [edx]
  001ce	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001d1	03 ca		 add	 ecx, edx
  001d3	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  001d8	b8 00 00 00 00	 mov	 eax, $LN23@operator
  001dd	c3		 ret	 0
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
  001de	8b 5d e8	 mov	 ebx, DWORD PTR __State$[ebp]
  001e1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN123@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 808  :     _Ostr.setstate(_State);

  001e8	8b 75 08	 mov	 esi, DWORD PTR __Ostr$[ebp]
$LN22@operator:
  001eb	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  001ed	33 ff		 xor	 edi, edi
  001ef	b9 04 00 00 00	 mov	 ecx, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 808  :     _Ostr.setstate(_State);

  001f4	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  001f7	8b 44 32 0c	 mov	 eax, DWORD PTR [edx+esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 808  :     _Ostr.setstate(_State);

  001fb	03 d6		 add	 edx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  001fd	0b c3		 or	 eax, ebx

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  001ff	39 7a 38	 cmp	 DWORD PTR [edx+56], edi
  00202	0f 45 cf	 cmovne	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  00205	0b c8		 or	 ecx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  00207	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0020a	83 e1 17	 and	 ecx, 23			; 00000017H
  0020d	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00210	23 c1		 and	 eax, ecx

; 158  :         if (_Filtered) {

  00212	75 41		 jne	 SHORT $LN125@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00214	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  00219	84 c0		 test	 al, al
  0021b	75 08		 jne	 SHORT $LN40@operator

; 117  :                 this->_Myostr._Osfx();

  0021d	8b 4d d0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00220	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN40@operator:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00225	8b 4d d0	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00228	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  0022f	8b 01		 mov	 eax, DWORD PTR [ecx]
  00231	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00234	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  00238	85 c9		 test	 ecx, ecx
  0023a	74 05		 je	 SHORT $LN46@operator

; 79   :                 _Rdbuf->_Unlock();

  0023c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0023e	ff 52 08	 call	 DWORD PTR [edx+8]
$LN46@operator:

; 809  :     return _Ostr;

  00241	8b c6		 mov	 eax, esi

; 810  : }

  00243	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00246	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0024d	59		 pop	 ecx
  0024e	5f		 pop	 edi
  0024f	5e		 pop	 esi
  00250	5b		 pop	 ebx
  00251	8b e5		 mov	 esp, ebp
  00253	5d		 pop	 ebp
  00254	c3		 ret	 0
$LN125@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  00255	a8 04		 test	 al, 4
  00257	74 07		 je	 SHORT $LN31@operator

; 165  :                 _Msg = "ios_base::badbit set";

  00259	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  0025e	eb 0f		 jmp	 SHORT $LN33@operator
$LN31@operator:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00260	a8 02		 test	 al, 2
  00262	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00267	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  0026c	0f 44 f0	 cmove	 esi, eax
$LN33@operator:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  0026f	8d 45 d8	 lea	 eax, DWORD PTR $T3[ebp]
  00272	6a 01		 push	 1
  00274	50		 push	 eax
  00275	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0027a	83 c4 08	 add	 esp, 8
  0027d	8d 4d bc	 lea	 ecx, DWORD PTR $T2[ebp]
  00280	50		 push	 eax
  00281	56		 push	 esi
  00282	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00287	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  0028c	8d 45 bc	 lea	 eax, DWORD PTR $T2[ebp]
  0028f	50		 push	 eax
  00290	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN120@operator:
  00295	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d d0	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a b8	 mov	 ecx, DWORD PTR [edx-72]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
_TEXT	SEGMENT
$T2 = -56						; size = 20
__Ok$3 = -36						; size = 8
$T4 = -28						; size = 8
__State$5 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::flush, COMDAT
; _this$ = ecx

; 562  :     basic_ostream& __CLR_OR_THIS_CALL flush() { // flush output stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 563  :         const auto _Rdbuf = _Myios::rdbuf();

  00030	8b 06		 mov	 eax, DWORD PTR [esi]
  00032	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00035	8b 7c 30 38	 mov	 edi, DWORD PTR [eax+esi+56]

; 564  :         if (_Rdbuf) { // buffer exists, flush it

  00039	85 ff		 test	 edi, edi
  0003b	0f 84 b8 00 00
	00		 je	 $LN75@flush

; 565  :             const sentry _Ok(*this);

  00041	56		 push	 esi
  00042	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  00045	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 566  : 
; 567  :             if (_Ok) {

  0004a	80 7d e0 00	 cmp	 BYTE PTR __Ok$3[ebp+4], 0
  0004e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00055	74 75		 je	 SHORT $LN58@flush
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 121  :         return sync();

  00057	8b 07		 mov	 eax, DWORD PTR [edi]
  00059	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 568  :                 ios_base::iostate _State = ios_base::goodbit;

  0005b	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR __State$5[ebp], 0

; 569  :                 _TRY_IO_BEGIN

  00062	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 121  :         return sync();

  00066	ff 50 34	 call	 DWORD PTR [eax+52]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 571  :                     _State |= ios_base::badbit; // sync failed

  00069	33 c9		 xor	 ecx, ecx
  0006b	ba 04 00 00 00	 mov	 edx, 4
  00070	83 f8 ff	 cmp	 eax, -1
  00073	89 4d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], ecx
  00076	8b fa		 mov	 edi, edx
  00078	0f 45 f9	 cmovne	 edi, ecx
  0007b	eb 2b		 jmp	 SHORT $LN10@flush
__catch$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$0:

; 572  :                 }
; 573  :                 _CATCH_IO_END

  0007d	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  00080	6a 01		 push	 1
  00082	6a 04		 push	 4
  00084	8b 02		 mov	 eax, DWORD PTR [edx]
  00086	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00089	03 ca		 add	 ecx, edx
  0008b	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  00090	b8 00 00 00 00	 mov	 eax, $LN11@flush
  00095	c3		 ret	 0
$LN11@flush:
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	ba 04 00 00 00	 mov	 edx, 4
  0009e	8b 7d e8	 mov	 edi, DWORD PTR __State$5[ebp]
  000a1	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN10@flush:

; 574  :                 _Myios::setstate(_State);

  000a8	8b 06		 mov	 eax, DWORD PTR [esi]
  000aa	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  000ad	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 574  :                 _Myios::setstate(_State);

  000b1	03 ce		 add	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  000b3	0b c7		 or	 eax, edi

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  000b5	33 ff		 xor	 edi, edi
  000b7	39 79 38	 cmp	 DWORD PTR [ecx+56], edi
  000ba	0f 45 d7	 cmovne	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  000bd	0b d0		 or	 edx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  000bf	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  000c2	83 e2 17	 and	 edx, 23			; 00000017H
  000c5	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  000c8	23 c2		 and	 eax, edx

; 158  :         if (_Filtered) {

  000ca	75 41		 jne	 SHORT $LN83@flush
$LN58@flush:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  000cc	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  000d1	84 c0		 test	 al, al

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  000d3	75 08		 jne	 SHORT $LN69@flush

; 117  :                 this->_Myostr._Osfx();

  000d5	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000d8	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN69@flush:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  000dd	8b 4d dc	 mov	 ecx, DWORD PTR __Ok$3[ebp]
  000e0	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 3
  000e7	8b 01		 mov	 eax, DWORD PTR [ecx]
  000e9	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  000ec	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  000f0	85 c9		 test	 ecx, ecx
  000f2	74 05		 je	 SHORT $LN75@flush

; 79   :                 _Rdbuf->_Unlock();

  000f4	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f6	ff 50 08	 call	 DWORD PTR [eax+8]
$LN75@flush:

; 575  :             }
; 576  :         }
; 577  :         return *this;

  000f9	8b c6		 mov	 eax, esi

; 578  :     }

  000fb	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fe	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00105	59		 pop	 ecx
  00106	5f		 pop	 edi
  00107	5e		 pop	 esi
  00108	5b		 pop	 ebx
  00109	8b e5		 mov	 esp, ebp
  0010b	5d		 pop	 ebp
  0010c	c3		 ret	 0
$LN83@flush:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  0010d	a8 04		 test	 al, 4
  0010f	74 07		 je	 SHORT $LN60@flush

; 165  :                 _Msg = "ios_base::badbit set";

  00111	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00116	eb 0f		 jmp	 SHORT $LN62@flush
$LN60@flush:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00118	a8 02		 test	 al, 2
  0011a	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0011f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00124	0f 44 f0	 cmove	 esi, eax
$LN62@flush:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  00127	8d 45 e4	 lea	 eax, DWORD PTR $T4[ebp]
  0012a	6a 01		 push	 1
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00132	83 c4 08	 add	 esp, 8
  00135	8d 4d c8	 lea	 ecx, DWORD PTR $T2[ebp]
  00138	50		 push	 eax
  00139	56		 push	 esi
  0013a	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  0013f	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00144	8d 45 c8	 lea	 eax, DWORD PTR $T2[ebp]
  00147	50		 push	 eax
  00148	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN81@flush:
  0014d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ$2:
  00000	8d 4d dc	 lea	 ecx, DWORD PTR __Ok$3[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a c4	 mov	 ecx, DWORD PTR [edx-60]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00025	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::flush
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
_TEXT	SEGMENT
$T2 = -72						; size = 20
$T3 = -52						; size = 8
$T4 = -52						; size = 8
$T5 = -52						; size = 8
__Ok$ = -44						; size = 8
__State$ = -36						; size = 4
$T6 = -32						; size = 8
__Nput_fac$1$ = -28					; size = 4
$T7 = -24						; size = 1
$T8 = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Val$ = 8						; size = 4
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::operator<<, COMDAT
; _this$ = ecx

; 340  :     basic_ostream& __CLR_OR_THIS_CALL operator<<(unsigned long _Val) { // insert an unsigned long

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 3c	 sub	 esp, 60			; 0000003cH
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
  0002d	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi

; 341  :         ios_base::iostate _State = ios_base::goodbit;

  00030	33 ff		 xor	 edi, edi

; 342  :         const sentry _Ok(*this);

  00032	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00035	56		 push	 esi
  00036	89 7d dc	 mov	 DWORD PTR __State$[ebp], edi
  00039	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry

; 343  : 
; 344  :         if (_Ok) { // state okay, use facet to insert

  0003e	80 7d d8 00	 cmp	 BYTE PTR __Ok$[ebp+4], 0
  00042	89 7d fc	 mov	 DWORD PTR __$EHRec$[ebp+12], edi
  00045	0f 84 b2 00 00
	00		 je	 $LN58@operator

; 345  :             const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  0004b	8b 06		 mov	 eax, DWORD PTR [esi]
  0004d	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 289  :         return *_Ploc;

  00050	8b 44 30 30	 mov	 eax, DWORD PTR [eax+esi+48]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 268  :     locale(const locale& _Right) noexcept : _Ptr(_Right._Ptr) {

  00054	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00057	89 4d e8	 mov	 DWORD PTR $T8[ebp], ecx
  0005a	89 4d e4	 mov	 DWORD PTR $T6[ebp+4], ecx

; 269  :         _Ptr->_Incref();

  0005d	8b 01		 mov	 eax, DWORD PTR [ecx]
  0005f	ff 50 04	 call	 DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 345  :             const _Nput& _Nput_fac = _STD use_facet<_Nput>(this->getloc());

  00062	8d 45 e0	 lea	 eax, DWORD PTR $T6[ebp]
  00065	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??$use_facet@V?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@@std@@YAABV?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@0@ABVlocale@0@@Z ; std::use_facet<std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > > >
  0006f	8b 4d e8	 mov	 ecx, DWORD PTR $T8[ebp]
  00072	83 c4 04	 add	 esp, 4
  00075	89 45 e4	 mov	 DWORD PTR __Nput_fac$1$[ebp], eax
  00078	85 c9		 test	 ecx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 354  :         if (_Ptr) {

  0007a	74 15		 je	 SHORT $LN23@operator

; 355  :             delete _Ptr->_Decref();

  0007c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0007e	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00081	ff d2		 call	 edx
  00083	85 c0		 test	 eax, eax
  00085	74 0a		 je	 SHORT $LN23@operator
  00087	8b 08		 mov	 ecx, DWORD PTR [eax]
  00089	6a 01		 push	 1
  0008b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008d	8b c8		 mov	 ecx, eax
  0008f	ff d2		 call	 edx
$LN23@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 348  :             if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {

  00091	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1254 :         return do_put(_Dest, _Iosbase, _Fill, _Val);

  00093	ff 75 08	 push	 DWORD PTR __Val$[ebp]
  00096	8b 55 e4	 mov	 edx, DWORD PTR __Nput_fac$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 347  :             _TRY_IO_BEGIN

  00099	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2

; 348  :             if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {

  0009d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000a0	8a 44 31 40	 mov	 al, BYTE PTR [ecx+esi+64]
  000a4	03 ce		 add	 ecx, esi
  000a6	88 45 e8	 mov	 BYTE PTR $T7[ebp], al
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1254 :         return do_put(_Dest, _Iosbase, _Fill, _Val);

  000a9	ff 75 e8	 push	 DWORD PTR $T7[ebp]
  000ac	8b 02		 mov	 eax, DWORD PTR [edx]
  000ae	51		 push	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\iterator

; 550  :     bool _Failed = false; // true if any stores have failed

  000af	c6 45 cc 00	 mov	 BYTE PTR $T3[ebp], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocnum

; 1254 :         return do_put(_Dest, _Iosbase, _Fill, _Val);

  000b3	ff 71 38	 push	 DWORD PTR [ecx+56]
  000b6	8d 4d cc	 lea	 ecx, DWORD PTR $T4[ebp]
  000b9	ff 75 cc	 push	 DWORD PTR $T3[ebp]
  000bc	51		 push	 ecx
  000bd	8b ca		 mov	 ecx, edx
  000bf	ff 50 20	 call	 DWORD PTR [eax+32]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 348  :             if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this, _Myios::fill(), _Val).failed()) {

  000c2	80 7d cc 00	 cmp	 BYTE PTR $T4[ebp], 0
  000c6	ba 04 00 00 00	 mov	 edx, 4
  000cb	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000d2	0f 45 fa	 cmovne	 edi, edx
  000d5	eb 2b		 jmp	 SHORT $LN10@operator
__catch$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$0:

; 349  :                 _State |= ios_base::badbit;
; 350  :             }
; 351  :             _CATCH_IO_END

  000d7	8b 55 ec	 mov	 edx, DWORD PTR _this$[ebp]
  000da	6a 01		 push	 1
  000dc	6a 04		 push	 4
  000de	8b 02		 mov	 eax, DWORD PTR [edx]
  000e0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000e3	03 ca		 add	 ecx, edx
  000e5	e8 00 00 00 00	 call	 ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ; std::basic_ios<char,std::char_traits<char> >::setstate
  000ea	b8 00 00 00 00	 mov	 eax, $LN11@operator
  000ef	c3		 ret	 0
$LN11@operator:

; 343  : 
; 344  :         if (_Ok) { // state okay, use facet to insert

  000f0	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000f3	8b 7d dc	 mov	 edi, DWORD PTR __State$[ebp]
  000f6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN58@operator:

; 354  :         _Myios::setstate(_State);

  000fd	ba 04 00 00 00	 mov	 edx, 4
$LN10@operator:
  00102	8b 06		 mov	 eax, DWORD PTR [esi]
  00104	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  00107	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 354  :         _Myios::setstate(_State);

  0010b	03 ce		 add	 ecx, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios

; 51   :         clear(rdstate() | _State, _Reraise);

  0010d	0b c7		 or	 eax, edi

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  0010f	33 ff		 xor	 edi, edi
  00111	39 79 38	 cmp	 DWORD PTR [ecx+56], edi
  00114	0f 45 d7	 cmovne	 edx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  00117	0b d0		 or	 edx, eax

; 156  :         _Mystate             = _State;
; 157  :         const auto _Filtered = _State & _Except;

  00119	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  0011c	83 e2 17	 and	 edx, 23			; 00000017H
  0011f	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
  00122	23 c2		 and	 eax, edx

; 158  :         if (_Filtered) {

  00124	75 43		 jne	 SHORT $LN62@operator
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 111  :             const bool _Zero_uncaught_exceptions = !_STD uncaught_exception(); // TRANSITION, ArchivedOS-12000909

  00126	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception

; 112  : #else // ^^^ _HAS_DEPRECATED_UNCAUGHT_EXCEPTION / !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION vvv
; 113  :             const bool _Zero_uncaught_exceptions = _STD uncaught_exceptions() == 0;
; 114  : #endif // ^^^ !_HAS_DEPRECATED_UNCAUGHT_EXCEPTION ^^^
; 115  : 
; 116  :             if (_Zero_uncaught_exceptions) {

  0012b	84 c0		 test	 al, al
  0012d	75 08		 jne	 SHORT $LN47@operator

; 117  :                 this->_Myostr._Osfx();

  0012f	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  00132	e8 00 00 00 00	 call	 ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
$LN47@operator:

; 77   :             const auto _Rdbuf = _Myostr.rdbuf();

  00137	8b 4d d4	 mov	 ecx, DWORD PTR __Ok$[ebp]
  0013a	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 4
  00141	8b 01		 mov	 eax, DWORD PTR [ecx]
  00143	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00146	8b 4c 08 38	 mov	 ecx, DWORD PTR [eax+ecx+56]

; 78   :             if (_Rdbuf) {

  0014a	85 c9		 test	 ecx, ecx
  0014c	74 05		 je	 SHORT $LN53@operator

; 79   :                 _Rdbuf->_Unlock();

  0014e	8b 01		 mov	 eax, DWORD PTR [ecx]
  00150	ff 50 08	 call	 DWORD PTR [eax+8]
$LN53@operator:

; 355  :         return *this;

  00153	8b c6		 mov	 eax, esi

; 356  :     }

  00155	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  00158	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0015f	59		 pop	 ecx
  00160	5f		 pop	 edi
  00161	5e		 pop	 esi
  00162	5b		 pop	 ebx
  00163	8b e5		 mov	 esp, ebp
  00165	5d		 pop	 ebp
  00166	c2 04 00	 ret	 4
$LN62@operator:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  00169	a8 04		 test	 al, 4
  0016b	74 07		 je	 SHORT $LN38@operator

; 165  :                 _Msg = "ios_base::badbit set";

  0016d	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00172	eb 0f		 jmp	 SHORT $LN40@operator
$LN38@operator:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00174	a8 02		 test	 al, 2
  00176	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0017b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00180	0f 44 f0	 cmove	 esi, eax
$LN40@operator:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  00183	8d 45 cc	 lea	 eax, DWORD PTR $T5[ebp]
  00186	6a 01		 push	 1
  00188	50		 push	 eax
  00189	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  0018e	83 c4 08	 add	 esp, 8
  00191	8d 4d b8	 lea	 ecx, DWORD PTR $T2[ebp]
  00194	50		 push	 eax
  00195	56		 push	 esi
  00196	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  0019b	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  001a0	8d 45 b8	 lea	 eax, DWORD PTR $T2[ebp]
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN60@operator:
  001a9	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$2:
  00000	8d 4d d4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__unwindfunclet$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z$3:
  00008	8d 4d e0	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1locale@std@@QAE@XZ	; std::locale::~locale
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a b4	 mov	 ecx, DWORD PTR [edx-76]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z
  0002d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::operator<<
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp
;	COMDAT ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
$T2 = -44						; size = 20
$T3 = -24						; size = 8
__$EHRec$ = -16						; size = 16
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Osfx, COMDAT
; _this$ = ecx

; 159  :     void __CLR_OR_THIS_CALL _Osfx() noexcept { // perform any wrapup

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 20	 sub	 esp, 32			; 00000020H
  00014	53		 push	 ebx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	50		 push	 eax
  0001f	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  00022	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00028	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002b	8b f1		 mov	 esi, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  0002d	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 160  :         _TRY_BEGIN

  0002f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 206  :         return rdstate() == ios_base::goodbit;

  00036	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00039	83 7c 30 0c 00	 cmp	 DWORD PTR [eax+esi+12], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 161  :         if (this->good() && this->flags() & ios_base::unitbuf) {

  0003e	75 38		 jne	 SHORT $LN21@Osfx
  00040	f6 44 30 14 02	 test	 BYTE PTR [eax+esi+20], 2
  00045	74 31		 je	 SHORT $LN21@Osfx

; 162  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00047	8b 4c 30 38	 mov	 ecx, DWORD PTR [eax+esi+56]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\streambuf

; 121  :         return sync();

  0004b	8b 01		 mov	 eax, DWORD PTR [ecx]
  0004d	ff 50 34	 call	 DWORD PTR [eax+52]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 162  :             if (_Myios::rdbuf()->pubsync() == -1) { // flush stream as needed

  00050	83 f8 ff	 cmp	 eax, -1
  00053	75 23		 jne	 SHORT $LN21@Osfx

; 163  :                 _Myios::setstate(ios_base::badbit);

  00055	8b 06		 mov	 eax, DWORD PTR [esi]
  00057	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 155  :         _State &= _Statmask;

  0005a	8b 44 31 0c	 mov	 eax, DWORD PTR [ecx+esi+12]
  0005e	83 e0 13	 and	 eax, 19			; 00000013H
  00061	83 c8 04	 or	 eax, 4

; 156  :         _Mystate             = _State;

  00064	89 44 31 0c	 mov	 DWORD PTR [ecx+esi+12], eax

; 157  :         const auto _Filtered = _State & _Except;

  00068	8b 4c 31 10	 mov	 ecx, DWORD PTR [ecx+esi+16]
  0006c	23 c8		 and	 ecx, eax

; 158  :         if (_Filtered) {

  0006e	75 1a		 jne	 SHORT $LN34@Osfx
  00070	eb 06		 jmp	 SHORT $LN21@Osfx
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_ostream.hpp

; 167  :         _CATCH_END

  00072	b8 00 00 00 00	 mov	 eax, $LN21@Osfx
  00077	c3		 ret	 0
$LN21@Osfx:

; 168  :     }

  00078	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0007b	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00082	59		 pop	 ecx
  00083	5f		 pop	 edi
  00084	5e		 pop	 esi
  00085	5b		 pop	 ebx
  00086	8b e5		 mov	 esp, ebp
  00088	5d		 pop	 ebp
  00089	c3		 ret	 0
$LN34@Osfx:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 164  :             if (_Filtered & ios_base::badbit) {

  0008a	f6 c1 04	 test	 cl, 4
  0008d	74 07		 je	 SHORT $LN23@Osfx

; 165  :                 _Msg = "ios_base::badbit set";

  0008f	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00094	eb 10		 jmp	 SHORT $LN25@Osfx
$LN23@Osfx:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  00096	f6 c1 02	 test	 cl, 2
  00099	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  0009e	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  000a3	0f 44 f0	 cmove	 esi, eax
$LN25@Osfx:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  000a6	8d 45 e8	 lea	 eax, DWORD PTR $T3[ebp]
  000a9	6a 01		 push	 1
  000ab	50		 push	 eax
  000ac	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  000b1	83 c4 08	 add	 esp, 8
  000b4	8d 4d d4	 lea	 ecx, DWORD PTR $T2[ebp]
  000b7	50		 push	 eax
  000b8	56		 push	 esi
  000b9	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  000be	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  000c3	8d 45 d4	 lea	 eax, DWORD PTR $T2[ebp]
  000c6	50		 push	 eax
  000c7	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN32@Osfx:
  000cc	cc		 int	 3
  000cd	cc		 int	 3
  000ce	cc		 int	 3
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Osfx
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\ios
;	COMDAT ?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
_TEXT	SEGMENT
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z PROC ; std::basic_ios<char,std::char_traits<char> >::setstate, COMDAT
; _this$ = ecx

; 49   :     void __CLR_OR_THIS_CALL setstate(iostate _State, bool _Reraise = false) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 40   :         ios_base::clear(_State | (_Mystrbuf ? ios_base::goodbit : ios_base::badbit), _Reraise);

  00003	ff 75 0c	 push	 DWORD PTR __Reraise$[ebp]
  00006	33 d2		 xor	 edx, edx
  00008	b8 04 00 00 00	 mov	 eax, 4
  0000d	39 51 38	 cmp	 DWORD PTR [ecx+56], edx
  00010	0f 45 c2	 cmovne	 eax, edx
  00013	0b 41 0c	 or	 eax, DWORD PTR [ecx+12]
  00016	0b 45 08	 or	 eax, DWORD PTR __State$[ebp]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?clear@ios_base@std@@QAEXH_N@Z ; std::ios_base::clear

; 50   :         // merge _State into state, possibly reraise exception
; 51   :         clear(rdstate() | _State, _Reraise);
; 52   :     }

  0001f	5d		 pop	 ebp
  00020	c2 08 00	 ret	 8
?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z ENDP ; std::basic_ios<char,std::char_traits<char> >::setstate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
;	COMDAT ?CopyDriverToSystemDrivers@@YA_NXZ
_TEXT	SEGMENT
$T2 = -609						; size = 1
$T3 = -608						; size = 24
$T4 = -584						; size = 24
_targetPath$ = -560					; size = 24
_systemDir$ = -536					; size = 520
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?CopyDriverToSystemDrivers@@YA_NXZ PROC			; CopyDriverToSystemDrivers, COMDAT

; 93   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?CopyDriverToSystemDrivers@@YA_NXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 5c 02 00
	00		 sub	 esp, 604		; 0000025cH
  00017	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001c	33 c5		 xor	 eax, ebp
  0001e	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00021	56		 push	 esi
  00022	50		 push	 eax
  00023	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00026	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 94   :     wchar_t systemDir[MAX_PATH];
; 95   :     if (!GetSystemDirectoryW(systemDir, MAX_PATH))

  0002c	68 04 01 00 00	 push	 260			; 00000104H
  00031	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _systemDir$[ebp]
  00037	50		 push	 eax
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetSystemDirectoryW@8
  0003e	85 c0		 test	 eax, eax
  00040	75 37		 jne	 SHORT $LN2@CopyDriver

; 96   :     {
; 97   :         std::cout << "GetSystemDirectory failed: " << GetLastError() << "\n";

  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JGPPEJKE@GetSystemDirectory?5failed?3?5@
  00047	68 00 00 00 00	 push	 OFFSET ?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A ; std::cout
  0004c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00051	83 c4 08	 add	 esp, 8
  00054	8b f0		 mov	 esi, eax
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  00061	50		 push	 eax
  00062	8b ce		 mov	 ecx, esi
  00064	e8 00 00 00 00	 call	 ??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<char,std::char_traits<char> >::operator<<
  00069	50		 push	 eax
  0006a	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0006f	83 c4 08	 add	 esp, 8

; 98   :         return false;

  00072	32 c0		 xor	 al, al
  00074	e9 cc 02 00 00	 jmp	 $LN1@CopyDriver
$LN2@CopyDriver:
  00079	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 517  :     size_type _Mysize = 0; // current length of string (size)

  0007c	c7 85 b0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00086	8d 8d e8 fd ff
	ff		 lea	 ecx, DWORD PTR _systemDir$[ebp]
  0008c	c7 85 b4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 0

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00096	0f 11 85 a0 fd
	ff ff		 movups	 XMMWORD PTR $T3[ebp], xmm0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0009d	8d 51 02	 lea	 edx, DWORD PTR [ecx+2]
$LL251@CopyDriver:
  000a0	66 8b 01	 mov	 ax, WORD PTR [ecx]
  000a3	83 c1 02	 add	 ecx, 2
  000a6	66 85 c0	 test	 ax, ax
  000a9	75 f5		 jne	 SHORT $LL251@CopyDriver
  000ab	2b ca		 sub	 ecx, edx

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000ad	8d 85 e8 fd ff
	ff		 lea	 eax, DWORD PTR _systemDir$[ebp]

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000b3	d1 f9		 sar	 ecx, 1

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000b5	51		 push	 ecx
  000b6	50		 push	 eax
  000b7	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000bd	e8 00 00 00 00	 call	 ??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>

; 1534 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000c2	6a 09		 push	 9
  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_1BE@HOKNBJFH@?$AA?2?$AAd?$AAr?$AAi?$AAv?$AAe?$AAr?$AAs?$AA?2@
  000c9	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 101  :     std::wstring targetPath = std::wstring(systemDir) + L"\\drivers\\" + DRIVER_FILE_NAME;

  000cf	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1534 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000d6	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 517  :     size_type _Mysize = 0; // current length of string (size)

  000db	c7 85 c8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+16], 0
  000e5	0f 57 c0	 xorps	 xmm0, xmm0

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  000e8	0f 11 85 b8 fd
	ff ff		 movups	 XMMWORD PTR $T4[ebp], xmm0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  000ef	c7 85 cc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+20], 0

; 1291 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  000f9	33 c9		 xor	 ecx, ecx
  000fb	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  000fe	0f 11 85 b8 fd
	ff ff		 movups	 XMMWORD PTR $T4[ebp], xmm0
  00105	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0010a	66 0f d6 85 c8
	fd ff ff	 movq	 QWORD PTR $T4[ebp+16], xmm0
  00112	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  00119	c7 40 14 07 00
	00 00		 mov	 DWORD PTR [eax+20], 7
  00120	66 89 08	 mov	 WORD PTR [eax], cx

; 453  :         return _Myres > _Small_string_capacity;

  00123	83 3d 14 00 00
	00 07		 cmp	 DWORD PTR ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B+20, 7

; 1483 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0012a	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00130	ff 35 10 00 00
	00		 push	 DWORD PTR ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B+16

; 444  :         const value_type* _Result = _Bx._Buf;

  00136	b8 00 00 00 00	 mov	 eax, OFFSET ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 101  :     std::wstring targetPath = std::wstring(systemDir) + L"\\drivers\\" + DRIVER_FILE_NAME;

  0013b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 445  :         if (_Large_mode_engaged()) {

  0013f	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B

; 1483 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 517  :     size_type _Mysize = 0; // current length of string (size)

  0014c	c7 85 e0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _targetPath$[ebp+16], 0
  00156	0f 57 c0	 xorps	 xmm0, xmm0

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00159	0f 11 85 d0 fd
	ff ff		 movups	 XMMWORD PTR _targetPath$[ebp], xmm0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00160	c7 85 e4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _targetPath$[ebp+20], 0

; 1291 :                 _Traits::assign(_Right_data._Bx._Buf[0], _Elem());

  0016a	33 c9		 xor	 ecx, ecx
  0016c	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  0016f	0f 11 85 d0 fd
	ff ff		 movups	 XMMWORD PTR _targetPath$[ebp], xmm0
  00176	f3 0f 7e 40 10	 movq	 xmm0, QWORD PTR [eax+16]
  0017b	66 0f d6 85 e0
	fd ff ff	 movq	 QWORD PTR _targetPath$[ebp+16], xmm0
  00183	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
  0018a	c7 40 14 07 00
	00 00		 mov	 DWORD PTR [eax+20], 7
  00191	66 89 08	 mov	 WORD PTR [eax], cx

; 453  :         return _Myres > _Small_string_capacity;

  00194	8b 8d cc fd ff
	ff		 mov	 ecx, DWORD PTR $T4[ebp+20]
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 101  :     std::wstring targetPath = std::wstring(systemDir) + L"\\drivers\\" + DRIVER_FILE_NAME;

  0019a	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0019e	83 f9 07	 cmp	 ecx, 7

; 3083 :         if (_My_data._Large_mode_engaged()) {

  001a1	76 35		 jbe	 SHORT $LN130@CopyDriver
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a3	8b 95 b8 fd ff
	ff		 mov	 edx, DWORD PTR $T4[ebp]
  001a9	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]
  001b0	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001b2	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001b8	72 14		 jb	 SHORT $LN135@CopyDriver

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001ba	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001bd	83 c1 23	 add	 ecx, 35			; 00000023H
  001c0	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001c2	83 c0 fc	 add	 eax, -4			; fffffffcH
  001c5	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001c8	0f 87 91 01 00
	00		 ja	 $LN166@CopyDriver
$LN135@CopyDriver:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001ce	51		 push	 ecx
  001cf	52		 push	 edx
  001d0	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001d5	83 c4 08	 add	 esp, 8
$LN130@CopyDriver:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  001d8	33 c0		 xor	 eax, eax
  001da	c7 85 c8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp+16], 0
  001e4	c7 85 cc fd ff
	ff 07 00 00 00	 mov	 DWORD PTR $T4[ebp+20], 7
  001ee	66 89 85 b8 fd
	ff ff		 mov	 WORD PTR $T4[ebp], ax

; 453  :         return _Myres > _Small_string_capacity;

  001f5	8b 8d b4 fd ff
	ff		 mov	 ecx, DWORD PTR $T3[ebp+20]
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 101  :     std::wstring targetPath = std::wstring(systemDir) + L"\\drivers\\" + DRIVER_FILE_NAME;

  001fb	c6 45 fc 04	 mov	 BYTE PTR __$EHRec$[ebp+8], 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  001ff	83 f9 07	 cmp	 ecx, 7

; 3083 :         if (_My_data._Large_mode_engaged()) {

  00202	76 35		 jbe	 SHORT $LN162@CopyDriver
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00204	8b 95 a0 fd ff
	ff		 mov	 edx, DWORD PTR $T3[ebp]
  0020a	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]
  00211	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00213	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00219	72 14		 jb	 SHORT $LN167@CopyDriver

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0021b	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0021e	83 c1 23	 add	 ecx, 35			; 00000023H
  00221	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00223	83 c0 fc	 add	 eax, -4			; fffffffcH
  00226	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00229	0f 87 30 01 00
	00		 ja	 $LN166@CopyDriver
$LN167@CopyDriver:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0022f	51		 push	 ecx
  00230	52		 push	 edx
  00231	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00236	83 c4 08	 add	 esp, 8
$LN162@CopyDriver:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00239	33 c0		 xor	 eax, eax
  0023b	c7 85 b0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp+16], 0

; 453  :         return _Myres > _Small_string_capacity;

  00245	83 bd e4 fd ff
	ff 07		 cmp	 DWORD PTR _targetPath$[ebp+20], 7

; 444  :         const value_type* _Result = _Bx._Buf;

  0024c	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _targetPath$[ebp]

; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00252	66 89 85 a0 fd
	ff ff		 mov	 WORD PTR $T3[ebp], ax

; 444  :         const value_type* _Result = _Bx._Buf;

  00259	b8 00 00 00 00	 mov	 eax, OFFSET ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B

; 445  :         if (_Large_mode_engaged()) {

  0025e	0f 47 8d d0 fd
	ff ff		 cmova	 ecx, DWORD PTR _targetPath$[ebp]

; 453  :         return _Myres > _Small_string_capacity;

  00265	83 3d 14 00 00
	00 07		 cmp	 DWORD PTR ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B+20, 7
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 102  :     if (!CopyFileW(DRIVER_FILE_NAME.c_str(), targetPath.c_str(), FALSE))

  0026c	6a 00		 push	 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 445  :         if (_Large_mode_engaged()) {

  0026e	0f 47 05 00 00
	00 00		 cmova	 eax, DWORD PTR ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 102  :     if (!CopyFileW(DRIVER_FILE_NAME.c_str(), targetPath.c_str(), FALSE))

  00275	51		 push	 ecx
  00276	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3091 :         _My_data._Myres  = _Small_string_capacity;

  00277	c7 85 b4 fd ff
	ff 07 00 00 00	 mov	 DWORD PTR $T3[ebp+20], 7
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 102  :     if (!CopyFileW(DRIVER_FILE_NAME.c_str(), targetPath.c_str(), FALSE))

  00281	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CopyFileW@12
  00287	85 c0		 test	 eax, eax
  00289	75 30		 jne	 SHORT $LN4@CopyDriver

; 103  :     {
; 104  :         DWORD err = GetLastError();

  0028b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetLastError@0
  00291	8b f0		 mov	 esi, eax

; 105  :         if (err != ERROR_FILE_EXISTS)

  00293	83 fe 50	 cmp	 esi, 80			; 00000050H
  00296	74 23		 je	 SHORT $LN4@CopyDriver

; 106  :         {
; 107  :             std::wcout << L"Failed to copy driver to System32\\drivers: " << err << "\n";

  00298	68 00 00 00 00	 push	 OFFSET ??_C@_1FI@JKJCHNGA@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAc?$AAo?$AAp?$AAy?$AA?5@
  0029d	68 00 00 00 00	 push	 OFFSET ?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A ; std::wcout
  002a2	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  002a7	83 c4 08	 add	 esp, 8
  002aa	c6 85 9f fd ff
	ff 00		 mov	 BYTE PTR $T2[ebp], 0
  002b1	8b c8		 mov	 ecx, eax
  002b3	56		 push	 esi
  002b4	e8 00 00 00 00	 call	 ??6?$basic_ostream@_WU?$char_traits@_W@std@@@std@@QAEAAV01@K@Z ; std::basic_ostream<wchar_t,std::char_traits<wchar_t> >::operator<<
  002b9	eb 3a		 jmp	 SHORT $LN9@CopyDriver
$LN4@CopyDriver:

; 108  :             return false;
; 109  :         }
; 110  :     }
; 111  : 
; 112  :     std::wcout << L"Driver copied to: " << targetPath << "\n";

  002bb	68 00 00 00 00	 push	 OFFSET ??_C@_1CG@KLNDMGEC@?$AAD?$AAr?$AAi?$AAv?$AAe?$AAr?$AA?5?$AAc?$AAo?$AAp?$AAi?$AAe?$AAd?$AA?5?$AAt@
  002c0	68 00 00 00 00	 push	 OFFSET ?wcout@std@@3V?$basic_ostream@_WU?$char_traits@_W@std@@@1@A ; std::wcout
  002c5	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PB_W@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  002ca	83 bd e4 fd ff
	ff 07		 cmp	 DWORD PTR _targetPath$[ebp+20], 7

; 444  :         const value_type* _Result = _Bx._Buf;

  002d1	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _targetPath$[ebp]

; 3446 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  002d7	ff b5 e0 fd ff
	ff		 push	 DWORD PTR _targetPath$[ebp+16]

; 445  :         if (_Large_mode_engaged()) {

  002dd	0f 47 8d d0 fd
	ff ff		 cmova	 ecx, DWORD PTR _targetPath$[ebp]

; 3446 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  002e4	51		 push	 ecx
  002e5	50		 push	 eax
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 113  :     return true;

  002e6	c6 85 9f fd ff
	ff 01		 mov	 BYTE PTR $T2[ebp], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3446 :     return _Insert_string(_Ostr, _Str.data(), _Str.size());

  002ed	e8 00 00 00 00	 call	 ??$_Insert_string@_WU?$char_traits@_W@std@@I@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@QB_WI@Z ; std::_Insert_string<wchar_t,std::char_traits<wchar_t>,unsigned int>
  002f2	83 c4 14	 add	 esp, 20			; 00000014H
$LN9@CopyDriver:

; 453  :         return _Myres > _Small_string_capacity;

  002f5	68 00 00 00 00	 push	 OFFSET ??_C@_01EEMJAFIK@?6@
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ??$?6_WU?$char_traits@_W@std@@@std@@YAAAV?$basic_ostream@_WU?$char_traits@_W@std@@@0@AAV10@PBD@Z ; std::operator<<<wchar_t,std::char_traits<wchar_t> >
  00300	8b 8d e4 fd ff
	ff		 mov	 ecx, DWORD PTR _targetPath$[ebp+20]
  00306	83 c4 08	 add	 esp, 8
  00309	83 f9 07	 cmp	 ecx, 7

; 3083 :         if (_My_data._Large_mode_engaged()) {

  0030c	76 31		 jbe	 SHORT $LN240@CopyDriver
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0030e	8b 95 d0 fd ff
	ff		 mov	 edx, DWORD PTR _targetPath$[ebp]
  00314	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]
  0031b	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0031d	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00323	72 10		 jb	 SHORT $LN245@CopyDriver

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00325	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00328	83 c1 23	 add	 ecx, 35			; 00000023H
  0032b	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0032d	83 c0 fc	 add	 eax, -4			; fffffffcH
  00330	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00333	77 39		 ja	 SHORT $LN255@CopyDriver
$LN245@CopyDriver:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00335	51		 push	 ecx
  00336	52		 push	 edx
  00337	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0033c	83 c4 08	 add	 esp, 8
$LN240@CopyDriver:
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 113  :     return true;

  0033f	8a 85 9f fd ff
	ff		 mov	 al, BYTE PTR $T2[ebp]
$LN1@CopyDriver:

; 114  : }

  00345	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00348	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0034f	59		 pop	 ecx
  00350	5e		 pop	 esi
  00351	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00354	33 cd		 xor	 ecx, ebp
  00356	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0035b	8b e5		 mov	 esp, ebp
  0035d	5d		 pop	 ebp
  0035e	c3		 ret	 0
$LN166@CopyDriver:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0035f	6a 00		 push	 0
  00361	6a 00		 push	 0
  00363	6a 00		 push	 0
  00365	6a 00		 push	 0
  00367	6a 00		 push	 0
  00369	e8 00 00 00 00	 call	 __invoke_watson
$LN255@CopyDriver:
  0036e	6a 00		 push	 0
  00370	6a 00		 push	 0
  00372	6a 00		 push	 0
  00374	6a 00		 push	 0
  00376	6a 00		 push	 0
  00378	e8 00 00 00 00	 call	 __invoke_watson
$LN253@CopyDriver:
  0037d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?CopyDriverToSystemDrivers@@YA_NXZ$0:
  00000	8d 8d a0 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?CopyDriverToSystemDrivers@@YA_NXZ$1:
  0000b	8d 8d b8 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00011	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?CopyDriverToSystemDrivers@@YA_NXZ$2:
  00016	8d 8d d0 fd ff
	ff		 lea	 ecx, DWORD PTR _targetPath$[ebp]
  0001c	e9 00 00 00 00	 jmp	 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$?CopyDriverToSystemDrivers@@YA_NXZ:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 9c fd ff
	ff		 mov	 ecx, DWORD PTR [edx-612]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0003f	33 c8		 xor	 ecx, eax
  00041	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00046	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?CopyDriverToSystemDrivers@@YA_NXZ
  0004b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?CopyDriverToSystemDrivers@@YA_NXZ ENDP			; CopyDriverToSystemDrivers
; Function compile flags: /Ogtp
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
;	COMDAT ?IsServiceRunning@@YA_NPAUSC_HANDLE__@@@Z
_TEXT	SEGMENT
_bytesNeeded$ = -44					; size = 4
_ssp$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_service$ = 8						; size = 4
?IsServiceRunning@@YA_NPAUSC_HANDLE__@@@Z PROC		; IsServiceRunning, COMDAT

; 81   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 2c	 sub	 esp, 44			; 0000002cH
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	8b 45 08	 mov	 eax, DWORD PTR _service$[ebp]

; 82   :     SERVICE_STATUS_PROCESS ssp = { 0 };
; 83   :     DWORD bytesNeeded = 0;
; 84   :     if (QueryServiceStatusEx(service, SC_STATUS_PROCESS_INFO,

  00013	8d 4d d4	 lea	 ecx, DWORD PTR _bytesNeeded$[ebp]
  00016	51		 push	 ecx
  00017	6a 24		 push	 36			; 00000024H
  00019	8d 4d d8	 lea	 ecx, DWORD PTR _ssp$[ebp]
  0001c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ssp$[ebp+32], 0
  00023	51		 push	 ecx
  00024	0f 57 c0	 xorps	 xmm0, xmm0
  00027	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _bytesNeeded$[ebp], 0
  0002e	6a 00		 push	 0
  00030	50		 push	 eax
  00031	0f 11 45 d8	 movups	 XMMWORD PTR _ssp$[ebp], xmm0
  00035	0f 11 45 e8	 movups	 XMMWORD PTR _ssp$[ebp+16], xmm0
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryServiceStatusEx@20
  0003f	85 c0		 test	 eax, eax
  00041	74 15		 je	 SHORT $LN2@IsServiceR

; 85   :         (LPBYTE)&ssp, sizeof(ssp), &bytesNeeded))
; 86   :     {
; 87   :         return (ssp.dwCurrentState == SERVICE_RUNNING);

  00043	83 7d dc 04	 cmp	 DWORD PTR _ssp$[ebp+4], 4
  00047	0f 94 c0	 sete	 al

; 88   :     }
; 89   :     return false;
; 90   : }

  0004a	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0004d	33 cd		 xor	 ecx, ebp
  0004f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
$LN2@IsServiceR:
  00058	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0005b	32 c0		 xor	 al, al
  0005d	33 cd		 xor	 ecx, ebp
  0005f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c3		 ret	 0
?IsServiceRunning@@YA_NPAUSC_HANDLE__@@@Z ENDP		; IsServiceRunning
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??__FsystemDriverPath@@YAXXZ
text$yd	SEGMENT
??__FsystemDriverPath@@YAXXZ PROC			; `dynamic atexit destructor for 'systemDriverPath'', COMDAT

; 1383 :         _Tidy_deallocate();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?systemDriverPath@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A ; systemDriverPath
  00005	e9 00 00 00 00	 jmp	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
??__FsystemDriverPath@@YAXXZ ENDP			; `dynamic atexit destructor for 'systemDriverPath''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
;	COMDAT ??__EsystemDriverPath@@YAXXZ
text$di	SEGMENT
??__EsystemDriverPath@@YAXXZ PROC			; `dynamic initializer for 'systemDriverPath'', COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00000	6a 42		 push	 66			; 00000042H
  00002	68 00 00 00 00	 push	 OFFSET ??_C@_1IG@FMBIKIH@?$AA?2?$AAS?$AAy?$AAs?$AAt?$AAe?$AAm?$AAR?$AAo?$AAo?$AAt?$AA?2?$AAS?$AAy?$AAs@
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET ?systemDriverPath@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@A ; systemDriverPath
  0000c	e8 00 00 00 00	 call	 ??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 71   : std::wstring systemDriverPath = L"\\SystemRoot\\System32\\drivers\\EzAntiAntiCheatDriver-x86-Release.sys";

  00011	68 00 00 00 00	 push	 OFFSET ??__FsystemDriverPath@@YAXXZ ; `dynamic atexit destructor for 'systemDriverPath''
  00016	e8 00 00 00 00	 call	 _atexit
  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
??__EsystemDriverPath@@YAXXZ ENDP			; `dynamic initializer for 'systemDriverPath''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??__FDRIVER_FILE_NAME@@YAXXZ
text$yd	SEGMENT
??__FDRIVER_FILE_NAME@@YAXXZ PROC			; `dynamic atexit destructor for 'DRIVER_FILE_NAME'', COMDAT

; 1383 :         _Tidy_deallocate();

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B
  00005	e9 00 00 00 00	 jmp	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
??__FDRIVER_FILE_NAME@@YAXXZ ENDP			; `dynamic atexit destructor for 'DRIVER_FILE_NAME''
text$yd	ENDS
; Function compile flags: /Ogtp
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp
;	COMDAT ??__EDRIVER_FILE_NAME@@YAXXZ
text$di	SEGMENT
??__EDRIVER_FILE_NAME@@YAXXZ PROC			; `dynamic initializer for 'DRIVER_FILE_NAME'', COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00000	6a 25		 push	 37			; 00000025H
  00002	68 00 00 00 00	 push	 OFFSET ??_C@_1EM@KDCBBNEO@?$AAE?$AAz?$AAA?$AAn?$AAt?$AAi?$AAA?$AAn?$AAt?$AAi?$AAC?$AAh?$AAe?$AAa?$AAt@
  00007	b9 00 00 00 00	 mov	 ecx, OFFSET ?DRIVER_FILE_NAME@@3V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@B
  0000c	e8 00 00 00 00	 call	 ??$_Construct@$00PB_W@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXQB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Construct<1,wchar_t const *>
; File C:\EzAntiAntiCheat\EzAntiAntiCheat\source\DriverLoader.cpp

; 47   : const std::wstring DRIVER_FILE_NAME = L"EzAntiAntiCheatDriver-x86-Release.sys";

  00011	68 00 00 00 00	 push	 OFFSET ??__FDRIVER_FILE_NAME@@YAXXZ ; `dynamic atexit destructor for 'DRIVER_FILE_NAME''
  00016	e8 00 00 00 00	 call	 _atexit
  0001b	59		 pop	 ecx
  0001c	c3		 ret	 0
??__EDRIVER_FILE_NAME@@YAXXZ ENDP			; `dynamic initializer for 'DRIVER_FILE_NAME''
text$di	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
;	COMDAT ?clear@ios_base@std@@QAEXH_N@Z
_TEXT	SEGMENT
$T1 = -28						; size = 20
$T2 = -8						; size = 8
__State$ = 8						; size = 4
__Reraise$ = 12						; size = 1
?clear@ios_base@std@@QAEXH_N@Z PROC			; std::ios_base::clear, COMDAT
; _this$ = ecx

; 154  :     void __CLR_OR_THIS_CALL clear(iostate _State, bool _Reraise) { // set state, possibly reraise exception

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 155  :         _State &= _Statmask;

  00003	8b 45 08	 mov	 eax, DWORD PTR __State$[ebp]
  00006	83 ec 1c	 sub	 esp, 28			; 0000001cH
  00009	83 e0 17	 and	 eax, 23			; 00000017H

; 156  :         _Mystate             = _State;

  0000c	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 157  :         const auto _Filtered = _State & _Except;

  0000f	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00012	56		 push	 esi
  00013	23 c8		 and	 ecx, eax

; 158  :         if (_Filtered) {

  00015	74 08		 je	 SHORT $LN2@clear

; 159  :             if (_Reraise) {

  00017	80 7d 0c 00	 cmp	 BYTE PTR __Reraise$[ebp], 0
  0001b	74 12		 je	 SHORT $LN3@clear
  0001d	eb 07		 jmp	 SHORT $LN14@clear
$LN2@clear:

; 173  :         }
; 174  :     }

  0001f	5e		 pop	 esi
  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c2 08 00	 ret	 8
$LN14@clear:

; 160  :                 _RERAISE;

  00026	6a 00		 push	 0
  00028	6a 00		 push	 0
  0002a	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@clear:

; 161  :             }
; 162  : 
; 163  :             const char* _Msg;
; 164  :             if (_Filtered & ios_base::badbit) {

  0002f	f6 c1 04	 test	 cl, 4
  00032	74 07		 je	 SHORT $LN4@clear

; 165  :                 _Msg = "ios_base::badbit set";

  00034	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BF@PHHKMMFD@ios_base?3?3badbit?5set@
  00039	eb 10		 jmp	 SHORT $LN6@clear
$LN4@clear:

; 166  :             } else if (_Filtered & ios_base::failbit) {

  0003b	f6 c1 02	 test	 cl, 2
  0003e	be 00 00 00 00	 mov	 esi, OFFSET ??_C@_0BG@FMKFHCIL@ios_base?3?3failbit?5set@
  00043	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BF@OOHOMBOF@ios_base?3?3eofbit?5set@
  00048	0f 44 f0	 cmove	 esi, eax
$LN6@clear:

; 167  :                 _Msg = "ios_base::failbit set";
; 168  :             } else {
; 169  :                 _Msg = "ios_base::eofbit set";
; 170  :             }
; 171  : 
; 172  :             _THROW(failure(_Msg));

  0004b	8d 45 f8	 lea	 eax, DWORD PTR $T2[ebp]
  0004e	6a 01		 push	 1
  00050	50		 push	 eax
  00051	e8 00 00 00 00	 call	 ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ; std::make_error_code
  00056	83 c4 08	 add	 esp, 8
  00059	8d 4d e4	 lea	 ecx, DWORD PTR $T1[ebp]
  0005c	50		 push	 eax
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ; std::ios_base::failure::failure
  00063	68 00 00 00 00	 push	 OFFSET __TI5?AVfailure@ios_base@std@@
  00068	8d 45 e4	 lea	 eax, DWORD PTR $T1[ebp]
  0006b	50		 push	 eax
  0006c	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN12@clear:
  00071	cc		 int	 3
?clear@ios_base@std@@QAEXH_N@Z ENDP			; std::ios_base::clear
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??_Gfailure@ios_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfailure@ios_base@std@@UAEPAXI@Z PROC		; std::ios_base::failure::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN28@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN28@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gfailure@ios_base@std@@UAEPAXI@Z ENDP		; std::ios_base::failure::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0failure@ios_base@std@@QAE@ABV012@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0failure@ios_base@std@@QAE@ABV012@@Z PROC		; std::ios_base::failure::failure, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 72   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7failure@ios_base@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0failure@ios_base@std@@QAE@ABV012@@Z ENDP		; std::ios_base::failure::failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??1failure@ios_base@std@@UAE@XZ
_TEXT	SEGMENT
??1failure@ios_base@std@@UAE@XZ PROC			; std::ios_base::failure::~failure, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1failure@ios_base@std@@UAE@XZ ENDP			; std::ios_base::failure::~failure
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase
;	COMDAT ??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
_TEXT	SEGMENT
tv319 = -48						; size = 4
_this$ = -44						; size = 4
_this$GSCopy$ = -44					; size = 4
__Errcode$2$ = -44					; size = 4
$T2 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
__Errcode$ = 12						; size = 4
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z PROC	; std::ios_base::failure::failure, COMDAT
; _this$ = ecx

; 116  :         explicit failure(const char* _Message, const error_code& _Errcode = _STD make_error_code(io_errc::stream))

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 24	 sub	 esp, 36			; 00000024H
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 d4	 mov	 DWORD PTR _this$[ebp], esi
  0002f	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00032	0f 57 c0	 xorps	 xmm0, xmm0
  00035	8b 55 08	 mov	 edx, DWORD PTR __Message$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00038	8b ca		 mov	 ecx, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 116  :         explicit failure(const char* _Message, const error_code& _Errcode = _STD make_error_code(io_errc::stream))

  0003a	89 75 d4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003d	0f 11 45 d8	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 117  :             : system_error(_Errcode, _Message) {} // construct with message

  00041	8b 38		 mov	 edi, DWORD PTR [eax]
  00043	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00046	89 45 d4	 mov	 DWORD PTR __Errcode$2$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00049	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 517  :     size_type _Mysize = 0; // current length of string (size)

  0004c	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00053	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  0005a	89 45 d0	 mov	 DWORD PTR tv319[ebp], eax
  0005d	0f 1f 00	 npad	 3
$LL59@failure:
  00060	8a 01		 mov	 al, BYTE PTR [ecx]
  00062	41		 inc	 ecx
  00063	84 c0		 test	 al, al
  00065	75 f9		 jne	 SHORT $LL59@failure
  00067	2b 4d d0	 sub	 ecx, DWORD PTR tv319[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  0006a	51		 push	 ecx
  0006b	52		 push	 edx
  0006c	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  0006f	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 490  :     system_error(error_code _Errcode, const char* _Message) : _Mybase(_Errcode, _Message) {}

  00074	8d 45 d8	 lea	 eax, DWORD PTR $T2[ebp]
  00077	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0007e	50		 push	 eax
  0007f	ff 75 d4	 push	 DWORD PTR __Errcode$2$[ebp]
  00082	8b ce		 mov	 ecx, esi
  00084	57		 push	 edi
  00085	e8 00 00 00 00	 call	 ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::_System_error::_System_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0008a	8b 4d ec	 mov	 ecx, DWORD PTR $T2[ebp+20]
  0008d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  00090	76 28		 jbe	 SHORT $LN46@failure
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00092	8b 55 d8	 mov	 edx, DWORD PTR $T2[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00095	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00096	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00098	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0009e	72 10		 jb	 SHORT $LN51@failure

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000a0	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  000a3	83 c1 23	 add	 ecx, 35			; 00000023H
  000a6	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000a8	83 c0 fc	 add	 eax, -4			; fffffffcH
  000ab	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  000ae	77 2f		 ja	 SHORT $LN63@failure
$LN51@failure:

; 289  :         ::operator delete(_Ptr, _Bytes);

  000b0	51		 push	 ecx
  000b1	52		 push	 edx
  000b2	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  000b7	83 c4 08	 add	 esp, 8
$LN46@failure:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xiosbase

; 117  :             : system_error(_Errcode, _Message) {} // construct with message

  000ba	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7failure@ios_base@std@@6B@
  000c0	8b c6		 mov	 eax, esi
  000c2	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c5	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000cc	59		 pop	 ecx
  000cd	5f		 pop	 edi
  000ce	5e		 pop	 esi
  000cf	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d2	33 cd		 xor	 ecx, ebp
  000d4	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c2 08 00	 ret	 8
$LN63@failure:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000df	6a 00		 push	 0
  000e1	6a 00		 push	 0
  000e3	6a 00		 push	 0
  000e5	6a 00		 push	 0
  000e7	6a 00		 push	 0
  000e9	e8 00 00 00 00	 call	 __invoke_watson
$LN61@failure:
  000ee	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z$1:
  00000	8d 4d d8	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 4a d0	 mov	 ecx, DWORD PTR [edx-48]
  00019	33 c8		 xor	 ecx, eax
  0001b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00020	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00023	33 c8		 xor	 ecx, eax
  00025	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002a	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z
  0002f	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0failure@ios_base@std@@QAE@PBDABVerror_code@2@@Z ENDP	; std::ios_base::failure::failure
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??_G?$ctype@_W@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@_W@std@@MAEPAXI@Z PROC			; std::ctype<wchar_t>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2969 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2970 :         if (_Ctype._Delfl) {

  00006	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  00010	74 0b		 je	 SHORT $LN6@scalar

; 2971 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00012	ff 76 0c	 push	 DWORD PTR [esi+12]
  00015	e8 00 00 00 00	 call	 _free
  0001a	83 c4 04	 add	 esp, 4
$LN6@scalar:

; 2972 :         }
; 2973 : 
; 2974 :         _CSTD free(_Ctype._LocaleName);

  0001d	ff 76 14	 push	 DWORD PTR [esi+20]
  00020	e8 00 00 00 00	 call	 _free
  00025	83 c4 04	 add	 esp, 4

; 2975 :     }

  00028	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002e	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00032	74 0b		 je	 SHORT $LN11@scalar
  00034	6a 44		 push	 68			; 00000044H
  00036	56		 push	 esi
  00037	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0003c	83 c4 08	 add	 esp, 8
$LN11@scalar:
  0003f	8b c6		 mov	 eax, esi
  00041	5e		 pop	 esi
  00042	5d		 pop	 ebp
  00043	c2 04 00	 ret	 4
??_G?$ctype@_W@std@@MAEPAXI@Z ENDP			; std::ctype<wchar_t>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z
_TEXT	SEGMENT
__Mbst$1 = -24						; size = 8
tv147 = -16						; size = 4
__Buf$2 = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dflt$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z PROC	; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 3072 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00010	53		 push	 ebx

; 3073 :         _Adl_verify_range(_First, _Last);
; 3074 :         for (; _First != _Last; ++_First, ++_Dest) {

  00011	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  00014	56		 push	 esi
  00015	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00018	57		 push	 edi
  00019	8b 7d 14	 mov	 edi, DWORD PTR __Dest$[ebp]
  0001c	3b f3		 cmp	 esi, ebx
  0001e	74 41		 je	 SHORT $LN14@do_narrow
  00020	83 c1 18	 add	 ecx, 24			; 00000018H
  00023	89 4d f0	 mov	 DWORD PTR tv147[ebp], ecx
$LL4@do_narrow:

; 3075 :             *_Dest = _Donarrow(*_First, _Dflt);

  00026	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00029	0f 57 c0	 xorps	 xmm0, xmm0

; 3064 :         return _Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1 ? _Dflt : _Buf[0];

  0002c	51		 push	 ecx
  0002d	8d 4d e8	 lea	 ecx, DWORD PTR __Mbst$1[ebp]
  00030	66 0f 13 45 e8	 movlpd	 QWORD PTR __Mbst$1[ebp], xmm0
  00035	51		 push	 ecx
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __Buf$2[ebp]
  0003a	50		 push	 eax
  0003b	e8 00 00 00 00	 call	 __Wcrtomb
  00040	0f b6 4d 10	 movzx	 ecx, BYTE PTR __Dflt$[ebp]

; 3073 :         _Adl_verify_range(_First, _Last);
; 3074 :         for (; _First != _Last; ++_First, ++_Dest) {

  00044	8d 7f 01	 lea	 edi, DWORD PTR [edi+1]

; 3064 :         return _Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1 ? _Dflt : _Buf[0];

  00047	0f b6 55 f4	 movzx	 edx, BYTE PTR __Buf$2[ebp]
  0004b	83 c4 10	 add	 esp, 16			; 00000010H
  0004e	83 f8 01	 cmp	 eax, 1
  00051	0f 45 d1	 cmovne	 edx, ecx

; 3073 :         _Adl_verify_range(_First, _Last);
; 3074 :         for (; _First != _Last; ++_First, ++_Dest) {

  00054	8b 4d f0	 mov	 ecx, DWORD PTR tv147[ebp]
  00057	83 c6 02	 add	 esi, 2

; 3075 :             *_Dest = _Donarrow(*_First, _Dflt);

  0005a	88 57 ff	 mov	 BYTE PTR [edi-1], dl
  0005d	3b f3		 cmp	 esi, ebx
  0005f	75 c5		 jne	 SHORT $LL4@do_narrow
$LN14@do_narrow:

; 3076 :         }
; 3077 : 
; 3078 :         return _First;
; 3079 :     }

  00061	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00064	8b c6		 mov	 eax, esi
  00066	5f		 pop	 edi
  00067	5e		 pop	 esi
  00068	33 cd		 xor	 ecx, ebp
  0006a	5b		 pop	 ebx
  0006b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00070	8b e5		 mov	 esp, ebp
  00072	5d		 pop	 ebp
  00073	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@_W@std@@MBEPB_WPB_W0DPAD@Z ENDP	; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_narrow@?$ctype@_W@std@@MBED_WD@Z
_TEXT	SEGMENT
__Mbst$1 = -20						; size = 8
__Buf$2 = -12						; size = 5
__$ArrayPad$ = -4					; size = 4
__Ch$ = 8						; size = 2
__Dflt$ = 12						; size = 1
?do_narrow@?$ctype@_W@std@@MBED_WD@Z PROC		; std::ctype<wchar_t>::do_narrow, COMDAT
; _this$ = ecx

; 3067 :     virtual char __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char _Dflt) const { // narrow element to char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c5		 xor	 eax, ebp
  0000d	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax

; 3064 :         return _Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1 ? _Dflt : _Buf[0];

  00010	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00013	0f 57 c0	 xorps	 xmm0, xmm0
  00016	50		 push	 eax
  00017	8d 45 ec	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  0001a	66 0f 13 45 ec	 movlpd	 QWORD PTR __Mbst$1[ebp], xmm0
  0001f	50		 push	 eax
  00020	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  00023	8d 45 f4	 lea	 eax, DWORD PTR __Buf$2[ebp]
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 __Wcrtomb
  0002c	0f b6 4d 0c	 movzx	 ecx, BYTE PTR __Dflt$[ebp]
  00030	83 c4 10	 add	 esp, 16			; 00000010H
  00033	0f b6 55 f4	 movzx	 edx, BYTE PTR __Buf$2[ebp]
  00037	83 f8 01	 cmp	 eax, 1
  0003a	0f 45 d1	 cmovne	 edx, ecx

; 3068 :         return _Donarrow(_Ch, _Dflt);
; 3069 :     }

  0003d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00040	33 cd		 xor	 ecx, ebp
  00042	8a c2		 mov	 al, dl
  00044	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
?do_narrow@?$ctype@_W@std@@MBED_WD@Z ENDP		; std::ctype<wchar_t>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z
_TEXT	SEGMENT
__Mbst$1 = -12						; size = 8
tv140 = -4						; size = 4
__First$ = 8						; size = 4
__Byte$ = 8						; size = 1
__Last$ = 12						; size = 4
__Wc$2 = 12						; size = 2
__Dest$ = 16						; size = 4
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z PROC		; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 3052 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 3053 :         _Adl_verify_range(_First, _Last);
; 3054 :         for (; _First != _Last; ++_First, ++_Dest) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Last$[ebp]
  0000a	56		 push	 esi
  0000b	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  0000e	3b f3		 cmp	 esi, ebx
  00010	74 50		 je	 SHORT $LN12@do_widen
  00012	83 c1 18	 add	 ecx, 24			; 00000018H
  00015	57		 push	 edi
  00016	8b 7d 10	 mov	 edi, DWORD PTR __Dest$[ebp]
  00019	89 4d fc	 mov	 DWORD PTR tv140[ebp], ecx
  0001c	0f 1f 40 00	 npad	 4
$LL4@do_widen:

; 3055 :             *_Dest = _Dowiden(*_First);

  00020	8a 06		 mov	 al, BYTE PTR [esi]
  00022	0f 57 c0	 xorps	 xmm0, xmm0
  00025	88 45 08	 mov	 BYTE PTR __Byte$[ebp], al

; 3044 :         return _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0 ? static_cast<wchar_t>(WEOF) : _Wc;

  00028	8d 45 f4	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  0002b	51		 push	 ecx
  0002c	50		 push	 eax
  0002d	6a 01		 push	 1
  0002f	8d 45 08	 lea	 eax, DWORD PTR __Byte$[ebp]
  00032	66 0f 13 45 f4	 movlpd	 QWORD PTR __Mbst$1[ebp], xmm0
  00037	50		 push	 eax
  00038	8d 45 0c	 lea	 eax, DWORD PTR __Wc$2[ebp]
  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 __Mbrtowc
  00041	0f b7 4d 0c	 movzx	 ecx, WORD PTR __Wc$2[ebp]

; 3053 :         _Adl_verify_range(_First, _Last);
; 3054 :         for (; _First != _Last; ++_First, ++_Dest) {

  00045	8d 7f 02	 lea	 edi, DWORD PTR [edi+2]

; 3044 :         return _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0 ? static_cast<wchar_t>(WEOF) : _Wc;

  00048	83 c4 14	 add	 esp, 20			; 00000014H
  0004b	85 c0		 test	 eax, eax
  0004d	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  00052	0f 48 c8	 cmovs	 ecx, eax

; 3053 :         _Adl_verify_range(_First, _Last);
; 3054 :         for (; _First != _Last; ++_First, ++_Dest) {

  00055	46		 inc	 esi

; 3055 :             *_Dest = _Dowiden(*_First);

  00056	66 89 4f fe	 mov	 WORD PTR [edi-2], cx
  0005a	8b 4d fc	 mov	 ecx, DWORD PTR tv140[ebp]
  0005d	3b f3		 cmp	 esi, ebx
  0005f	75 bf		 jne	 SHORT $LL4@do_widen

; 3053 :         _Adl_verify_range(_First, _Last);
; 3054 :         for (; _First != _Last; ++_First, ++_Dest) {

  00061	5f		 pop	 edi
$LN12@do_widen:

; 3056 :         }
; 3057 : 
; 3058 :         return _First;
; 3059 :     }

  00062	8b c6		 mov	 eax, esi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@_W@std@@MBEPBDPBD0PA_W@Z ENDP		; std::ctype<wchar_t>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_widen@?$ctype@_W@std@@MBE_WD@Z
_TEXT	SEGMENT
__Mbst$1 = -12						; size = 8
__Wc$2 = -4						; size = 2
__Byte$ = 8						; size = 1
__Byte$ = 8						; size = 1
?do_widen@?$ctype@_W@std@@MBE_WD@Z PROC			; std::ctype<wchar_t>::do_widen, COMDAT
; _this$ = ecx

; 3047 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 3048 :         return _Dowiden(_Byte);

  00006	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]
  00009	0f 57 c0	 xorps	 xmm0, xmm0
  0000c	88 45 08	 mov	 BYTE PTR __Byte$[ebp], al

; 3044 :         return _Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0 ? static_cast<wchar_t>(WEOF) : _Wc;

  0000f	8d 41 18	 lea	 eax, DWORD PTR [ecx+24]
  00012	50		 push	 eax
  00013	8d 45 f4	 lea	 eax, DWORD PTR __Mbst$1[ebp]
  00016	66 0f 13 45 f4	 movlpd	 QWORD PTR __Mbst$1[ebp], xmm0
  0001b	50		 push	 eax
  0001c	6a 01		 push	 1
  0001e	8d 45 08	 lea	 eax, DWORD PTR __Byte$[ebp]
  00021	50		 push	 eax
  00022	8d 45 fc	 lea	 eax, DWORD PTR __Wc$2[ebp]
  00025	50		 push	 eax
  00026	e8 00 00 00 00	 call	 __Mbrtowc
  0002b	0f b7 4d fc	 movzx	 ecx, WORD PTR __Wc$2[ebp]
  0002f	83 c4 14	 add	 esp, 20			; 00000014H
  00032	85 c0		 test	 eax, eax
  00034	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00039	0f 48 ca	 cmovs	 ecx, edx

; 3048 :         return _Dowiden(_Byte);

  0003c	66 8b c1	 mov	 ax, cx

; 3049 :     }

  0003f	8b e5		 mov	 esp, ebp
  00041	5d		 pop	 ebp
  00042	c2 04 00	 ret	 4
?do_widen@?$ctype@_W@std@@MBE_WD@Z ENDP			; std::ctype<wchar_t>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 3032 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3033 :         _Adl_verify_range(_First, _Last);
; 3034 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 1c		 je	 SHORT $LN10@do_toupper
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_toupper:

; 3035 :             *_First = _Towupper(*_First, &_Ctype);

  00013	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Towupper
  0001d	66 89 06	 mov	 WORD PTR [esi], ax
  00020	83 c4 08	 add	 esp, 8
  00023	83 c6 02	 add	 esi, 2
  00026	3b f7		 cmp	 esi, edi
  00028	75 e9		 jne	 SHORT $LL4@do_toupper

; 3033 :         _Adl_verify_range(_First, _Last);
; 3034 :         for (; _First != _Last; ++_First) {

  0002a	5b		 pop	 ebx
$LN10@do_toupper:
  0002b	5f		 pop	 edi

; 3036 :         }
; 3037 : 
; 3038 :         return _First;
; 3039 :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?do_toupper@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_toupper@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_toupper, COMDAT
; _this$ = ecx

; 3027 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3028 :         return _Towupper(_Ch, &_Ctype);

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Towupper
  0000f	83 c4 08	 add	 esp, 8

; 3029 :     }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?do_toupper@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z PROC	; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 3018 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 3019 :         _Adl_verify_range(_First, _Last);
; 3020 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 1c		 je	 SHORT $LN10@do_tolower
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_tolower:

; 3021 :             *_First = _Towlower(*_First, &_Ctype);

  00013	0f b7 06	 movzx	 eax, WORD PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Towlower
  0001d	66 89 06	 mov	 WORD PTR [esi], ax
  00020	83 c4 08	 add	 esp, 8
  00023	83 c6 02	 add	 esi, 2
  00026	3b f7		 cmp	 esi, edi
  00028	75 e9		 jne	 SHORT $LL4@do_tolower

; 3019 :         _Adl_verify_range(_First, _Last);
; 3020 :         for (; _First != _Last; ++_First) {

  0002a	5b		 pop	 ebx
$LN10@do_tolower:
  0002b	5f		 pop	 edi

; 3022 :         }
; 3023 : 
; 3024 :         return _First;
; 3025 :     }

  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
?do_tolower@?$ctype@_W@std@@MBEPB_WPA_WPB_W@Z ENDP	; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_tolower@?$ctype@_W@std@@MBE_W_W@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 2
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z PROC		; std::ctype<wchar_t>::do_tolower, COMDAT
; _this$ = ecx

; 3013 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 3014 :         return _Towlower(_Ch, &_Ctype);

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 08	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Towlower
  0000f	83 c4 08	 add	 esp, 8

; 3015 :     }

  00012	5d		 pop	 ebp
  00013	c2 04 00	 ret	 4
?do_tolower@?$ctype@_W@std@@MBE_W_W@Z ENDP		; std::ctype<wchar_t>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_not, COMDAT
; _this$ = ecx

; 3004 :         const _Elem* _Last) const { // find first in [_First, _Last) not fitting mask classification

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 3005 :         _Adl_verify_range(_First, _Last);
; 3006 :         while (_First != _Last && is(_Maskval, *_First)) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 1b		 je	 SHORT $LN11@do_scan_no
$LL2@do_scan_no:
  00012	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2894 :         return do_is(_Maskval, _Ch);

  00015	8b 03		 mov	 eax, DWORD PTR [ebx]
  00017	51		 push	 ecx
  00018	ff 75 08	 push	 DWORD PTR __Maskval$[ebp]
  0001b	8b cb		 mov	 ecx, ebx
  0001d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00020	ff d0		 call	 eax

; 3005 :         _Adl_verify_range(_First, _Last);
; 3006 :         while (_First != _Last && is(_Maskval, *_First)) {

  00022	84 c0		 test	 al, al
  00024	74 07		 je	 SHORT $LN11@do_scan_no

; 3007 :             ++_First;

  00026	83 c6 02	 add	 esi, 2
  00029	3b f7		 cmp	 esi, edi
  0002b	75 e5		 jne	 SHORT $LL2@do_scan_no
$LN11@do_scan_no:
  0002d	5f		 pop	 edi

; 3008 :         }
; 3009 : 
; 3010 :         return _First;
; 3011 :     }

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_not@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_not
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z PROC	; std::ctype<wchar_t>::do_scan_is, COMDAT
; _this$ = ecx

; 2994 :         const _Elem* _Last) const { // find first in [_First, _Last) that fits mask classification

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx
  00004	56		 push	 esi

; 2995 :         _Adl_verify_range(_First, _Last);
; 2996 :         while (_First != _Last && !is(_Maskval, *_First)) {

  00005	8b 75 0c	 mov	 esi, DWORD PTR __First$[ebp]
  00008	8b d9		 mov	 ebx, ecx
  0000a	57		 push	 edi
  0000b	8b 7d 10	 mov	 edi, DWORD PTR __Last$[ebp]
  0000e	3b f7		 cmp	 esi, edi
  00010	74 1b		 je	 SHORT $LN11@do_scan_is
$LL2@do_scan_is:
  00012	0f b7 0e	 movzx	 ecx, WORD PTR [esi]

; 2894 :         return do_is(_Maskval, _Ch);

  00015	8b 03		 mov	 eax, DWORD PTR [ebx]
  00017	51		 push	 ecx
  00018	ff 75 08	 push	 DWORD PTR __Maskval$[ebp]
  0001b	8b cb		 mov	 ecx, ebx
  0001d	8b 40 10	 mov	 eax, DWORD PTR [eax+16]
  00020	ff d0		 call	 eax

; 2995 :         _Adl_verify_range(_First, _Last);
; 2996 :         while (_First != _Last && !is(_Maskval, *_First)) {

  00022	84 c0		 test	 al, al
  00024	75 07		 jne	 SHORT $LN11@do_scan_is

; 2997 :             ++_First;

  00026	83 c6 02	 add	 esi, 2
  00029	3b f7		 cmp	 esi, edi
  0002b	75 e5		 jne	 SHORT $LL2@do_scan_is
$LN11@do_scan_is:
  0002d	5f		 pop	 edi

; 2998 :         }
; 2999 : 
; 3000 :         return _First;
; 3001 :     }

  0002e	8b c6		 mov	 eax, esi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx
  00032	5d		 pop	 ebp
  00033	c2 0c 00	 ret	 12			; 0000000cH
?do_scan_is@?$ctype@_W@std@@MBEPB_WFPB_W0@Z ENDP	; std::ctype<wchar_t>::do_scan_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z PROC		; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2988 :         mask* _Dest) const { // get mask sequence for elements in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2989 :         _Adl_verify_range(_First, _Last);
; 2990 :         return _CSTD _Getwctypes(_First, _Last, _Dest, &_Ctype);

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  0000a	ff 75 0c	 push	 DWORD PTR __Last$[ebp]
  0000d	ff 75 08	 push	 DWORD PTR __First$[ebp]
  00010	e8 00 00 00 00	 call	 __Getwctypes
  00015	83 c4 10	 add	 esp, 16			; 00000010H

; 2991 :     }

  00018	5d		 pop	 ebp
  00019	c2 0c 00	 ret	 12			; 0000000cH
?do_is@?$ctype@_W@std@@MBEPB_WPB_W0PAF@Z ENDP		; std::ctype<wchar_t>::do_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_is@?$ctype@_W@std@@MBE_NF_W@Z
_TEXT	SEGMENT
__Maskval$ = 8						; size = 2
__Ch$ = 12						; size = 2
?do_is@?$ctype@_W@std@@MBE_NF_W@Z PROC			; std::ctype<wchar_t>::do_is, COMDAT
; _this$ = ecx

; 2983 :         mask _Maskval, _Elem _Ch) const { // test if element fits any mask classifications

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2984 :         return (_CSTD _Getwctype(_Ch, &_Ctype) & _Maskval) != 0;

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	ff 75 0c	 push	 DWORD PTR __Ch$[ebp]
  0000a	e8 00 00 00 00	 call	 __Getwctype
  0000f	83 c4 08	 add	 esp, 8
  00012	66 85 45 08	 test	 WORD PTR __Maskval$[ebp], ax
  00016	0f 95 c0	 setne	 al

; 2985 :     }

  00019	5d		 pop	 ebp
  0001a	c2 08 00	 ret	 8
?do_is@?$ctype@_W@std@@MBE_NF_W@Z ENDP			; std::ctype<wchar_t>::do_is
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??1?$ctype@_W@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@_W@std@@MAE@XZ PROC				; std::ctype<wchar_t>::~ctype<wchar_t>, COMDAT
; _this$ = ecx

; 2969 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2970 :         if (_Ctype._Delfl) {

  00003	83 7e 10 00	 cmp	 DWORD PTR [esi+16], 0
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@_W@std@@6B@
  0000d	74 0b		 je	 SHORT $LN2@ctype

; 2971 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  0000f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00012	e8 00 00 00 00	 call	 _free
  00017	83 c4 04	 add	 esp, 4
$LN2@ctype:

; 2972 :         }
; 2973 : 
; 2974 :         _CSTD free(_Ctype._LocaleName);

  0001a	ff 76 14	 push	 DWORD PTR [esi+20]
  0001d	e8 00 00 00 00	 call	 _free
  00022	83 c4 04	 add	 esp, 4

; 2975 :     }

  00025	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0002b	5e		 pop	 esi
  0002c	c3		 ret	 0
??1?$ctype@_W@std@@MAE@XZ ENDP				; std::ctype<wchar_t>::~ctype<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
_TEXT	SEGMENT
$T2 = -96						; size = 52
$T3 = -44						; size = 16
__Lock$4 = -28						; size = 4
$T5 = -24						; size = 4
__Psave$1$ = -24					; size = 4
$T6 = -20						; size = 4
__Lock$7 = -16						; size = 4
$T8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Loc$ = 8						; size = 4
__Psave_guard$9 = 8					; size = 4
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z PROC ; std::use_facet<std::ctype<char> >, COMDAT

; 435  : const _Facet& __CRTDECL use_facet(const locale& _Loc) { // get facet reference from locale

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 54	 sub	 esp, 84			; 00000054H
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0001b	33 c5		 xor	 eax, ebp
  0001d	50		 push	 eax
  0001e	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00021	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax

; 436  :     _BEGIN_LOCK(_LOCK_LOCALE) // the thread lock, make get atomic

  00027	6a 00		 push	 0
  00029	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  0002c	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR $T6[ebp], 0
  00033	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  00038	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id

; 437  :     const locale::facet* _Psave = _Facetptr<_Facet>::_Psave; // static pointer to lazy facet

  0003e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B ; std::_Facetptr<std::ctype<char> >::_Psave
  00043	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0004a	89 45 e8	 mov	 DWORD PTR __Psave$1$[ebp], eax

; 91   :             if (_Id == 0) { // still zero, allocate stamp

  0004d	85 ff		 test	 edi, edi
  0004f	75 2f		 jne	 SHORT $LN11@use_facet

; 92   :                 _BEGIN_LOCK(_LOCK_LOCALE)

  00051	57		 push	 edi
  00052	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00055	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit

; 93   :                 if (_Id == 0) {

  0005a	39 3d 00 00 00
	00		 cmp	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, edi ; std::ctype<char>::id
  00060	75 10		 jne	 SHORT $LN12@use_facet

; 94   :                     _Id = static_cast<size_t>(++_Id_cnt);

  00062	a1 00 00 00 00	 mov	 eax, DWORD PTR ?_Id_cnt@id@locale@std@@0HA ; std::locale::id::_Id_cnt
  00067	40		 inc	 eax
  00068	a3 00 00 00 00	 mov	 DWORD PTR ?_Id_cnt@id@locale@std@@0HA, eax ; std::locale::id::_Id_cnt
  0006d	a3 00 00 00 00	 mov	 DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A, eax ; std::ctype<char>::id
$LN12@use_facet:

; 95   :                 }
; 96   :                 _END_LOCK()

  00072	8d 4d f0	 lea	 ecx, DWORD PTR __Lock$7[ebp]
  00075	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0007a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?id@?$ctype@D@std@@2V0locale@2@A ; std::ctype<char>::id
$LN11@use_facet:

; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  00080	8b 45 08	 mov	 eax, DWORD PTR __Loc$[ebp]
  00083	8d 0c bd 00 00
	00 00		 lea	 ecx, DWORD PTR [edi*4]
  0008a	89 4d f0	 mov	 DWORD PTR $T8[ebp], ecx
  0008d	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00090	3b 7a 0c	 cmp	 edi, DWORD PTR [edx+12]
  00093	73 16		 jae	 SHORT $LN19@use_facet
  00095	0f ae e8	 lfence
  00098	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0009b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0009e	8b 34 01	 mov	 esi, DWORD PTR [ecx+eax]

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  000a1	85 f6		 test	 esi, esi
  000a3	0f 85 ca 00 00
	00		 jne	 $LN77@use_facet
  000a9	eb 05		 jmp	 SHORT $LN81@use_facet
$LN19@use_facet:

; 374  :     }
; 375  : 
; 376  :     const facet* _Getfacet(size_t _Id) const { // look up a facet in locale object
; 377  :         const facet* _Facptr = _Id < _Ptr->_Facetcount ? _Ptr->_Facetvec[_Id] : nullptr; // null if id off end

  000ab	33 f6		 xor	 esi, esi
  000ad	89 4d f0	 mov	 DWORD PTR $T8[ebp], ecx
$LN81@use_facet:

; 378  :         if (_Facptr || !_Ptr->_Xparent) {

  000b0	80 7a 14 00	 cmp	 BYTE PTR [edx+20], 0
  000b4	74 16		 je	 SHORT $LN14@use_facet

; 379  :             return _Facptr; // found facet or not transparent
; 380  :         }
; 381  : 
; 382  :         // look in current locale
; 383  :         locale::_Locimp* _Ptr0 = _Getgloballocale();

  000b6	e8 00 00 00 00	 call	 ?_Getgloballocale@locale@std@@CAPAV_Locimp@12@XZ ; std::locale::_Getgloballocale

; 384  :         if (_Id < _Ptr0->_Facetcount) {

  000bb	3b 78 0c	 cmp	 edi, DWORD PTR [eax+12]
  000be	73 14		 jae	 SHORT $LN82@use_facet

; 385  :             return _Ptr0->_Facetvec[_Id]; // get from current locale

  000c0	0f ae e8	 lfence
  000c3	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  000c6	8b 75 f0	 mov	 esi, DWORD PTR $T8[ebp]
  000c9	8b 34 06	 mov	 esi, DWORD PTR [esi+eax]
$LN14@use_facet:

; 438  : 
; 439  :     const size_t _Id         = _Facet::id._Get_index();
; 440  :     const locale::facet* _Pf = _Loc._Getfacet(_Id);
; 441  : 
; 442  :     if (!_Pf) {

  000cc	85 f6		 test	 esi, esi
  000ce	0f 85 9f 00 00
	00		 jne	 $LN77@use_facet
$LN82@use_facet:

; 443  :         if (_Psave) {

  000d4	8b 45 e8	 mov	 eax, DWORD PTR __Psave$1$[ebp]
  000d7	85 c0		 test	 eax, eax
  000d9	74 07		 je	 SHORT $LN3@use_facet

; 444  :             _Pf = _Psave; // lazy facet already allocated

  000db	8b f0		 mov	 esi, eax

; 445  :         } else if (_Facet::_Getcat(&_Psave, &_Loc) == static_cast<size_t>(-1)) {

  000dd	e9 91 00 00 00	 jmp	 $LN77@use_facet
$LN3@use_facet:

; 2797 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  000e2	6a 18		 push	 24			; 00000018H
  000e4	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  000e9	8b f0		 mov	 esi, eax
  000eb	83 c4 04	 add	 esp, 4
  000ee	89 75 e8	 mov	 DWORD PTR $T5[ebp], esi
  000f1	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  000f5	85 f6		 test	 esi, esi
  000f7	74 4d		 je	 SHORT $LN24@use_facet

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  000f9	8b 4d 08	 mov	 ecx, DWORD PTR __Loc$[ebp]
  000fc	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  000ff	85 c9		 test	 ecx, ecx
  00101	74 0c		 je	 SHORT $LN32@use_facet
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 190  :         return _Myptr ? _Myptr : &_Nul;

  00103	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00106	85 c0		 test	 eax, eax
  00108	75 0a		 jne	 SHORT $LN33@use_facet
  0010a	8d 41 1c	 lea	 eax, DWORD PTR [ecx+28]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 373  :         return _Ptr ? _Ptr->_Name.c_str() : "";

  0010d	eb 05		 jmp	 SHORT $LN33@use_facet
$LN32@use_facet:
  0010f	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_00CNPNBAHC@@
$LN33@use_facet:

; 2797 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00114	50		 push	 eax
  00115	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00118	e8 00 00 00 00	 call	 ??0_Locinfo@std@@QAE@PBD@Z ; std::_Locinfo::_Locinfo
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 277  :         return ::_Getctype();

  0011d	8d 45 d4	 lea	 eax, DWORD PTR $T3[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2797 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00120	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR $T6[ebp], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 277  :         return ::_Getctype();

  00127	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 143  :             : _Myrefs(static_cast<_Atomic_counter_t>(_Initrefs)) // non-atomic initialization

  00128	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 2791 :     __CLR_OR_THIS_CALL ctype(const _Locinfo& _Lobj, size_t _Refs = 0) : ctype_base(_Refs) {

  0012f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo

; 277  :         return ::_Getctype();

  00135	e8 00 00 00 00	 call	 __Getctype
  0013a	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 2819 :         _Ctype = _Lobj._Getctype();

  0013d	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
  00140	0f 11 46 08	 movups	 XMMWORD PTR [esi+8], xmm0

; 2797 :             *_Ppf = new ctype<_Elem>(_Locinfo(_Ploc->_C_str()));

  00144	eb 02		 jmp	 SHORT $LN25@use_facet
$LN24@use_facet:
  00146	33 f6		 xor	 esi, esi
$LN25@use_facet:
  00148	f6 45 ec 01	 test	 BYTE PTR $T6[ebp], 1
  0014c	74 08		 je	 SHORT $LN29@use_facet
  0014e	8d 4d a0	 lea	 ecx, DWORD PTR $T2[ebp]
  00151	e8 00 00 00 00	 call	 ??1_Locinfo@std@@QAE@XZ	; std::_Locinfo::~_Locinfo
$LN29@use_facet:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 1531 :         : _Ty1(), _Myval2(_STD forward<_Other2>(_Val2)...) {}

  00156	89 75 08	 mov	 DWORD PTR __Psave_guard$9[ebp], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale

; 458  :             _Facet_Register(_Pfmod);

  00159	56		 push	 esi
  0015a	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  0015e	e8 00 00 00 00	 call	 ?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z ; std::_Facet_Register

; 459  : #endif // ^^^ !defined(_M_CEE) ^^^
; 460  : 
; 461  :             _Pfmod->_Incref();

  00163	8b 16		 mov	 edx, DWORD PTR [esi]
  00165	83 c4 04	 add	 esp, 4
  00168	8b ce		 mov	 ecx, esi
  0016a	ff 52 04	 call	 DWORD PTR [edx+4]

; 462  :             _Facetptr<_Facet>::_Psave = _Psave;

  0016d	89 35 00 00 00
	00		 mov	 DWORD PTR ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B, esi ; std::_Facetptr<std::ctype<char> >::_Psave
$LN77@use_facet:

; 463  :             _Pf                       = _Psave;
; 464  : 
; 465  :             (void) _Psave_guard.release();
; 466  :         }
; 467  :     }
; 468  : 
; 469  :     return static_cast<const _Facet&>(*_Pf); // should be dynamic_cast

  00173	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00176	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  0017b	8b c6		 mov	 eax, esi

; 470  :     _END_LOCK()
; 471  : } // end of use_facet body

  0017d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00180	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00187	59		 pop	 ecx
  00188	5f		 pop	 edi
  00189	5e		 pop	 esi
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000	8d 4d e4	 lea	 ecx, DWORD PTR __Lock$4[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$2:
  00008	6a 18		 push	 24			; 00000018H
  0000a	8b 45 e8	 mov	 eax, DWORD PTR $T5[ebp]
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00013	83 c4 08	 add	 esp, 8
  00016	c3		 ret	 0
__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$1:
  00017	8d 4d 08	 lea	 ecx, DWORD PTR __Psave_guard$9[ebp]
  0001a	e9 00 00 00 00	 jmp	 ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QAE@XZ ; std::unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >::~unique_ptr<std::_Facet_base,std::default_delete<std::_Facet_base> >
  0001f	cc		 int	 3
  00020	cc		 int	 3
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00024	90		 npad	 1
  00025	90		 npad	 1
  00026	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002a	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002d	8b 4a a0	 mov	 ecx, DWORD PTR [edx-96]
  00030	33 c8		 xor	 ecx, eax
  00032	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00037	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0003c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z ENDP ; std::use_facet<std::ctype<char> >
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??_G?$ctype@D@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$ctype@D@std@@MAEPAXI@Z PROC			; std::ctype<char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2814 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 2823 :         if (0 < _Ctype._Delfl) {

  00006	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2814 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2823 :         if (0 < _Ctype._Delfl) {

  0000f	85 c0		 test	 eax, eax
  00011	7e 0a		 jle	 SHORT $LN20@scalar

; 2824 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00013	ff 76 0c	 push	 DWORD PTR [esi+12]
  00016	e8 00 00 00 00	 call	 _free
  0001b	eb 0a		 jmp	 SHORT $LN21@scalar
$LN20@scalar:

; 2825 :         } else if (_Ctype._Delfl < 0) {

  0001d	79 0b		 jns	 SHORT $LN13@scalar

; 2826 :             delete[] _Ctype._Table;

  0001f	ff 76 0c	 push	 DWORD PTR [esi+12]
  00022	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN21@scalar:

; 2827 :         }
; 2828 : 
; 2829 :         _CSTD free(_Ctype._LocaleName);

  00027	83 c4 04	 add	 esp, 4
$LN13@scalar:
  0002a	ff 76 14	 push	 DWORD PTR [esi+20]
  0002d	e8 00 00 00 00	 call	 _free
  00032	83 c4 04	 add	 esp, 4

; 2816 :     }

  00035	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  0003b	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0003f	74 0b		 je	 SHORT $LN16@scalar
  00041	6a 18		 push	 24			; 00000018H
  00043	56		 push	 esi
  00044	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00049	83 c4 08	 add	 esp, 8
$LN16@scalar:
  0004c	8b c6		 mov	 eax, esi
  0004e	5e		 pop	 esi
  0004f	5d		 pop	 ebp
  00050	c2 04 00	 ret	 4
??_G?$ctype@D@std@@MAEPAXI@Z ENDP			; std::ctype<char>::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
__Dest$ = 20						; size = 4
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z PROC		; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2876 :         char* _Dest) const { // narrow elements in [_First, _Last) to chars

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2877 :         _Adl_verify_range(_First, _Last);
; 2878 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 14	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2879 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2880 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 10 00	 ret	 16			; 00000010H
?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z ENDP		; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_narrow@?$ctype@D@std@@MBEDDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
___formal$ = 12						; size = 1
?do_narrow@?$ctype@D@std@@MBEDDD@Z PROC			; std::ctype<char>::do_narrow, COMDAT
; _this$ = ecx

; 2871 :     virtual _Elem __CLR_OR_THIS_CALL do_narrow(_Elem _Ch, char) const { // narrow char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2872 :         return _Ch;

  00003	8a 45 08	 mov	 al, BYTE PTR __Ch$[ebp]

; 2873 :     }

  00006	5d		 pop	 ebp
  00007	c2 08 00	 ret	 8
?do_narrow@?$ctype@D@std@@MBEDDD@Z ENDP			; std::ctype<char>::do_narrow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z PROC		; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2865 :         const char* _First, const char* _Last, _Elem* _Dest) const { // widen chars in [_First, _Last)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2866 :         _Adl_verify_range(_First, _Last);
; 2867 :         _CSTD memcpy(_Dest, _First, static_cast<size_t>(_Last - _First));

  00003	8b 55 08	 mov	 edx, DWORD PTR __First$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Last$[ebp]
  00009	2b ca		 sub	 ecx, edx
  0000b	51		 push	 ecx
  0000c	52		 push	 edx
  0000d	ff 75 10	 push	 DWORD PTR __Dest$[ebp]
  00010	e8 00 00 00 00	 call	 _memcpy

; 2868 :         return _Last;

  00015	8b 45 0c	 mov	 eax, DWORD PTR __Last$[ebp]
  00018	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2869 :     }

  0001b	5d		 pop	 ebp
  0001c	c2 0c 00	 ret	 12			; 0000000cH
?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z ENDP		; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_widen@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Byte$ = 8						; size = 1
?do_widen@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_widen, COMDAT
; _this$ = ecx

; 2860 :     virtual _Elem __CLR_OR_THIS_CALL do_widen(char _Byte) const { // widen char

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2861 :         return _Byte;

  00003	8a 45 08	 mov	 al, BYTE PTR __Byte$[ebp]

; 2862 :     }

  00006	5d		 pop	 ebp
  00007	c2 04 00	 ret	 4
?do_widen@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_widen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2851 :         const _Elem* _Last) const { // convert [_First, _Last) in place to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2852 :         _Adl_verify_range(_First, _Last);
; 2853 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_toupper
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_toupper:

; 2854 :             *_First = static_cast<_Elem>(_Toupper(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Toupper
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_toupper

; 2852 :         _Adl_verify_range(_First, _Last);
; 2853 :         for (; _First != _Last; ++_First) {

  00027	5b		 pop	 ebx
$LN10@do_toupper:
  00028	5f		 pop	 edi

; 2855 :         }
; 2856 : 
; 2857 :         return _First;
; 2858 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_toupper@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_toupper@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_toupper, COMDAT
; _this$ = ecx

; 2846 :     virtual _Elem __CLR_OR_THIS_CALL do_toupper(_Elem _Ch) const { // convert element to upper case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2847 :         return static_cast<_Elem>(_Toupper(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Toupper
  00011	83 c4 08	 add	 esp, 8

; 2848 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_toupper@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_toupper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z PROC		; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2837 :         const _Elem* _Last) const { // convert [_First, _Last) in place to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi

; 2838 :         _Adl_verify_range(_First, _Last);
; 2839 :         for (; _First != _Last; ++_First) {

  00004	8b 75 08	 mov	 esi, DWORD PTR __First$[ebp]
  00007	57		 push	 edi
  00008	8b 7d 0c	 mov	 edi, DWORD PTR __Last$[ebp]
  0000b	3b f7		 cmp	 esi, edi
  0000d	74 19		 je	 SHORT $LN10@do_tolower
  0000f	53		 push	 ebx
  00010	8d 59 08	 lea	 ebx, DWORD PTR [ecx+8]
$LL4@do_tolower:

; 2840 :             *_First = static_cast<_Elem>(_Tolower(static_cast<unsigned char>(*_First), &_Ctype));

  00013	0f b6 06	 movzx	 eax, BYTE PTR [esi]
  00016	53		 push	 ebx
  00017	50		 push	 eax
  00018	e8 00 00 00 00	 call	 __Tolower
  0001d	88 06		 mov	 BYTE PTR [esi], al
  0001f	83 c4 08	 add	 esp, 8
  00022	46		 inc	 esi
  00023	3b f7		 cmp	 esi, edi
  00025	75 ec		 jne	 SHORT $LL4@do_tolower

; 2838 :         _Adl_verify_range(_First, _Last);
; 2839 :         for (; _First != _Last; ++_First) {

  00027	5b		 pop	 ebx
$LN10@do_tolower:
  00028	5f		 pop	 edi

; 2841 :         }
; 2842 : 
; 2843 :         return _First;
; 2844 :     }

  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 08 00	 ret	 8
?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z ENDP		; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?do_tolower@?$ctype@D@std@@MBEDD@Z
_TEXT	SEGMENT
__Ch$ = 8						; size = 1
?do_tolower@?$ctype@D@std@@MBEDD@Z PROC			; std::ctype<char>::do_tolower, COMDAT
; _this$ = ecx

; 2832 :     virtual _Elem __CLR_OR_THIS_CALL do_tolower(_Elem _Ch) const { // convert element to lower case

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 2833 :         return static_cast<_Elem>(_Tolower(static_cast<unsigned char>(_Ch), &_Ctype));

  00003	8d 41 08	 lea	 eax, DWORD PTR [ecx+8]
  00006	50		 push	 eax
  00007	0f b6 45 08	 movzx	 eax, BYTE PTR __Ch$[ebp]
  0000b	50		 push	 eax
  0000c	e8 00 00 00 00	 call	 __Tolower
  00011	83 c4 08	 add	 esp, 8

; 2834 :     }

  00014	5d		 pop	 ebp
  00015	c2 04 00	 ret	 4
?do_tolower@?$ctype@D@std@@MBEDD@Z ENDP			; std::ctype<char>::do_tolower
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??1?$ctype@D@std@@MAE@XZ
_TEXT	SEGMENT
??1?$ctype@D@std@@MAE@XZ PROC				; std::ctype<char>::~ctype<char>, COMDAT
; _this$ = ecx

; 2814 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 2823 :         if (0 < _Ctype._Delfl) {

  00003	8b 46 10	 mov	 eax, DWORD PTR [esi+16]

; 2814 :     __CLR_OR_THIS_CALL ~ctype() noexcept override {

  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7?$ctype@D@std@@6B@

; 2823 :         if (0 < _Ctype._Delfl) {

  0000c	85 c0		 test	 eax, eax
  0000e	7e 0a		 jle	 SHORT $LN12@ctype

; 2824 :             _CSTD free(const_cast<short*>(_Ctype._Table));

  00010	ff 76 0c	 push	 DWORD PTR [esi+12]
  00013	e8 00 00 00 00	 call	 _free
  00018	eb 0a		 jmp	 SHORT $LN13@ctype
$LN12@ctype:

; 2825 :         } else if (_Ctype._Delfl < 0) {

  0001a	79 0b		 jns	 SHORT $LN7@ctype

; 2826 :             delete[] _Ctype._Table;

  0001c	ff 76 0c	 push	 DWORD PTR [esi+12]
  0001f	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
$LN13@ctype:

; 2827 :         }
; 2828 : 
; 2829 :         _CSTD free(_Ctype._LocaleName);

  00024	83 c4 04	 add	 esp, 4
$LN7@ctype:
  00027	ff 76 14	 push	 DWORD PTR [esi+20]
  0002a	e8 00 00 00 00	 call	 _free
  0002f	83 c4 04	 add	 esp, 4

; 2815 :         _Tidy();
; 2816 :     }

  00032	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00038	5e		 pop	 esi
  00039	c3		 ret	 0
??1?$ctype@D@std@@MAE@XZ ENDP				; std::ctype<char>::~ctype<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gctype_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gctype_base@std@@UAEPAXI@Z PROC			; std::ctype_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gctype_base@std@@UAEPAXI@Z ENDP			; std::ctype_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??1ctype_base@std@@UAE@XZ
_TEXT	SEGMENT
??1ctype_base@std@@UAE@XZ PROC				; std::ctype_base::~ctype_base, COMDAT
; _this$ = ecx

; 2450 :     __CLR_OR_THIS_CALL ~ctype_base() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1ctype_base@std@@UAE@XZ ENDP				; std::ctype_base::~ctype_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z
_TEXT	SEGMENT
__Mbst2$ = -24						; size = 8
__Mbst1$ = -16						; size = 8
__Count1$1$ = -8					; size = 4
__Wc$ = -4						; size = 2
__Ptr$ = 8						; size = 4
__Ptrdest$1$ = 8					; size = 4
___formal$ = 12						; size = 4
__Cvt$ = 16						; size = 4
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z PROC	; std::_Maklocstr<wchar_t>, COMDAT

; 544  : inline wchar_t* __CRTDECL _Maklocstr(const char* _Ptr, wchar_t*, const _Locinfo::_Cvtvec& _Cvt) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H
  00006	53		 push	 ebx

; 545  :     // convert C string to wchar_t sequence using _Cvtvec
; 546  :     size_t _Count;
; 547  :     size_t _Count1;
; 548  :     size_t _Wchars;
; 549  :     const char* _Ptr1;
; 550  :     int _Bytes;
; 551  :     wchar_t _Wc;
; 552  :     mbstate_t _Mbst1 = {};
; 553  : 
; 554  :     _Count1 = _CSTD strlen(_Ptr) + 1;

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
  0000a	0f 57 c0	 xorps	 xmm0, xmm0
  0000d	8b cb		 mov	 ecx, ebx
  0000f	66 0f 13 45 f0	 movlpd	 QWORD PTR __Mbst1$[ebp], xmm0
  00014	56		 push	 esi
  00015	57		 push	 edi
  00016	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  00019	0f 1f 80 00 00
	00 00		 npad	 7
$LL22@Maklocstr:
  00020	8a 01		 mov	 al, BYTE PTR [ecx]
  00022	41		 inc	 ecx
  00023	84 c0		 test	 al, al
  00025	75 f9		 jne	 SHORT $LL22@Maklocstr
  00027	2b ca		 sub	 ecx, edx

; 555  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  00029	33 f6		 xor	 esi, esi
  0002b	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0002e	89 45 f8	 mov	 DWORD PTR __Count1$1$[ebp], eax
  00031	8b f8		 mov	 edi, eax
  00033	85 c0		 test	 eax, eax
  00035	74 23		 je	 SHORT $LN14@Maklocstr
$LL4@Maklocstr:

; 556  :         if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0) {

  00037	ff 75 10	 push	 DWORD PTR __Cvt$[ebp]
  0003a	8d 45 f0	 lea	 eax, DWORD PTR __Mbst1$[ebp]
  0003d	50		 push	 eax
  0003e	57		 push	 edi
  0003f	8d 45 fc	 lea	 eax, DWORD PTR __Wc$[ebp]
  00042	53		 push	 ebx
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 __Mbrtowc
  00049	83 c4 14	 add	 esp, 20			; 00000014H
  0004c	85 c0		 test	 eax, eax
  0004e	7e 07		 jle	 SHORT $LN23@Maklocstr

; 555  :     for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count; _Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars) {

  00050	03 d8		 add	 ebx, eax
  00052	46		 inc	 esi
  00053	2b f8		 sub	 edi, eax
  00055	75 e0		 jne	 SHORT $LL4@Maklocstr
$LN23@Maklocstr:
  00057	8b 5d 08	 mov	 ebx, DWORD PTR __Ptr$[ebp]
$LN14@Maklocstr:

; 557  :             break;
; 558  :         }
; 559  :     }
; 560  : 
; 561  :     ++_Wchars; // count terminating nul

  0005a	46		 inc	 esi

; 562  : 
; 563  :     wchar_t* _Ptrdest = static_cast<wchar_t*>(_calloc_dbg(_Wchars, sizeof(wchar_t), _CRT_BLOCK, __FILE__, __LINE__));

  0005b	6a 02		 push	 2
  0005d	56		 push	 esi
  0005e	e8 00 00 00 00	 call	 _calloc
  00063	83 c4 08	 add	 esp, 8
  00066	89 45 08	 mov	 DWORD PTR __Ptrdest$1$[ebp], eax

; 564  : 
; 565  :     if (!_Ptrdest) {

  00069	85 c0		 test	 eax, eax
  0006b	74 44		 je	 SHORT $LN33@Maklocstr

; 567  :     }
; 568  : 
; 569  :     wchar_t* _Ptrnext = _Ptrdest;

  0006d	0f 57 c0	 xorps	 xmm0, xmm0
  00070	8b f8		 mov	 edi, eax

; 570  :     mbstate_t _Mbst2  = {};

  00072	66 0f 13 45 e8	 movlpd	 QWORD PTR __Mbst2$[ebp], xmm0

; 571  : 
; 572  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  00077	85 f6		 test	 esi, esi
  00079	74 2a		 je	 SHORT $LN15@Maklocstr
  0007b	0f 1f 44 00 00	 npad	 5
$LL7@Maklocstr:

; 573  :         if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0) {

  00080	ff 75 10	 push	 DWORD PTR __Cvt$[ebp]
  00083	8d 45 e8	 lea	 eax, DWORD PTR __Mbst2$[ebp]
  00086	50		 push	 eax
  00087	ff 75 f8	 push	 DWORD PTR __Count1$1$[ebp]
  0008a	53		 push	 ebx
  0008b	57		 push	 edi
  0008c	e8 00 00 00 00	 call	 __Mbrtowc
  00091	83 c4 14	 add	 esp, 20			; 00000014H
  00094	85 c0		 test	 eax, eax
  00096	7e 0a		 jle	 SHORT $LN24@Maklocstr

; 571  : 
; 572  :     for (; 0 < _Wchars; _Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext) {

  00098	03 d8		 add	 ebx, eax
  0009a	83 c7 02	 add	 edi, 2
  0009d	83 ee 01	 sub	 esi, 1
  000a0	75 de		 jne	 SHORT $LL7@Maklocstr
$LN24@Maklocstr:
  000a2	8b 45 08	 mov	 eax, DWORD PTR __Ptrdest$1$[ebp]
$LN15@Maklocstr:

; 574  :             break;
; 575  :         }
; 576  :     }
; 577  : 
; 578  :     *_Ptrnext = L'\0';

  000a5	33 c9		 xor	 ecx, ecx
  000a7	66 89 0f	 mov	 WORD PTR [edi], cx

; 579  : 
; 580  :     return _Ptrdest;
; 581  : }

  000aa	5f		 pop	 edi
  000ab	5e		 pop	 esi
  000ac	5b		 pop	 ebx
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
$LN33@Maklocstr:

; 566  :         _Xbad_alloc();

  000b1	e8 00 00 00 00	 call	 ?_Xbad_alloc@std@@YAXXZ	; std::_Xbad_alloc
$LN31@Maklocstr:
  000b6	cc		 int	 3
??$_Maklocstr@_W@std@@YAPA_WPBDPA_WABU_Cvtvec@@@Z ENDP	; std::_Maklocstr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??1locale@std@@QAE@XZ
_TEXT	SEGMENT
??1locale@std@@QAE@XZ PROC				; std::locale::~locale, COMDAT
; _this$ = ecx

; 354  :         if (_Ptr) {

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	85 c9		 test	 ecx, ecx
  00005	74 11		 je	 SHORT $LN4@locale

; 355  :             delete _Ptr->_Decref();

  00007	8b 01		 mov	 eax, DWORD PTR [ecx]
  00009	ff 50 08	 call	 DWORD PTR [eax+8]
  0000c	85 c0		 test	 eax, eax
  0000e	74 08		 je	 SHORT $LN4@locale
  00010	8b 10		 mov	 edx, DWORD PTR [eax]
  00012	8b c8		 mov	 ecx, eax
  00014	6a 01		 push	 1
  00016	ff 12		 call	 DWORD PTR [edx]
$LN4@locale:

; 356  :         }
; 357  :     }

  00018	c3		 ret	 0
??1locale@std@@QAE@XZ ENDP				; std::locale::~locale
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_Gfacet@locale@std@@MAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gfacet@locale@std@@MAEPAXI@Z PROC			; std::locale::facet::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 08		 push	 8
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_Gfacet@locale@std@@MAEPAXI@Z ENDP			; std::locale::facet::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ??1facet@locale@std@@MAE@XZ
_TEXT	SEGMENT
??1facet@locale@std@@MAE@XZ PROC			; std::locale::facet::~facet, COMDAT
; _this$ = ecx

; 146  :         __CLR_OR_THIS_CALL ~facet() noexcept override {}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1facet@locale@std@@MAE@XZ ENDP			; std::locale::facet::~facet
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ
_TEXT	SEGMENT
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ PROC	; std::locale::facet::_Decref, COMDAT
; _this$ = ecx

; 131  :             if (_MT_DECR(_Myrefs) == 0) {

  00000	83 c8 ff	 or	 eax, -1
  00003	f0 0f c1 41 04	 lock	  xadd	 DWORD PTR [ecx+4], eax
  00008	b8 00 00 00 00	 mov	 eax, 0
  0000d	0f 44 c1	 cmove	 eax, ecx

; 132  :                 return this;
; 133  :             }
; 134  : 
; 135  :             return nullptr;
; 136  :         }

  00010	c3		 ret	 0
?_Decref@facet@locale@std@@UAEPAV_Facet_base@3@XZ ENDP	; std::locale::facet::_Decref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
;	COMDAT ?_Incref@facet@locale@std@@UAEXXZ
_TEXT	SEGMENT
?_Incref@facet@locale@std@@UAEXXZ PROC			; std::locale::facet::_Incref, COMDAT
; _this$ = ecx

; 127  :             _MT_INCR(_Myrefs);

  00000	f0 ff 41 04	 lock	  inc	 DWORD PTR [ecx+4]

; 128  :         }

  00004	c3		 ret	 0
?_Incref@facet@locale@std@@UAEXXZ ENDP			; std::locale::facet::_Incref
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
;	COMDAT ??1?$_Yarn@_W@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@_W@std@@QAE@XZ PROC				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>, COMDAT
; _this$ = ecx

; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 203  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@Yarn

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN8@Yarn:

; 182  :         _Tidy();
; 183  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@_W@std@@QAE@XZ ENDP				; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
;	COMDAT ??1?$_Yarn@D@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Yarn@D@std@@QAE@XZ PROC				; std::_Yarn<char>::~_Yarn<char>, COMDAT
; _this$ = ecx

; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 203  :         if (_Myptr) {

  00003	8b 06		 mov	 eax, DWORD PTR [esi]
  00005	85 c0		 test	 eax, eax
  00007	74 09		 je	 SHORT $LN8@Yarn

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 _free
  0000f	83 c4 04	 add	 esp, 4
$LN8@Yarn:

; 182  :         _Tidy();
; 183  :     }

  00012	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
  00018	5e		 pop	 esi
  00019	c3		 ret	 0
??1?$_Yarn@D@std@@QAE@XZ ENDP				; std::_Yarn<char>::~_Yarn<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
;	COMDAT ??1_Locinfo@std@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1_Locinfo@std@@QAE@XZ PROC				; std::_Locinfo::~_Locinfo, COMDAT
; _this$ = ecx

; 256  :     __CLR_OR_THIS_CALL ~_Locinfo() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Locinfo@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	56		 push	 esi
  00012	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00017	33 c5		 xor	 eax, ebp
  00019	50		 push	 eax
  0001a	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001d	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00023	8b f1		 mov	 esi, ecx

; 257  :         _Locinfo_dtor(this);

  00025	56		 push	 esi
  00026	e8 00 00 00 00	 call	 ?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z ; std::_Locinfo::_Locinfo_dtor

; 203  :         if (_Myptr) {

  0002b	8b 46 2c	 mov	 eax, DWORD PTR [esi+44]

; 257  :         _Locinfo_dtor(this);

  0002e	83 c4 04	 add	 esp, 4

; 203  :         if (_Myptr) {

  00031	85 c0		 test	 eax, eax
  00033	74 09		 je	 SHORT $LN8@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 _free
  0003b	83 c4 04	 add	 esp, 4
$LN8@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0003e	c7 46 2c 00 00
	00 00		 mov	 DWORD PTR [esi+44], 0

; 203  :         if (_Myptr) {

  00045	8b 46 24	 mov	 eax, DWORD PTR [esi+36]
  00048	85 c0		 test	 eax, eax
  0004a	74 09		 je	 SHORT $LN15@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 _free
  00052	83 c4 04	 add	 esp, 4
$LN15@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  00055	c7 46 24 00 00
	00 00		 mov	 DWORD PTR [esi+36], 0

; 203  :         if (_Myptr) {

  0005c	8b 46 1c	 mov	 eax, DWORD PTR [esi+28]
  0005f	85 c0		 test	 eax, eax
  00061	74 09		 je	 SHORT $LN22@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00063	50		 push	 eax
  00064	e8 00 00 00 00	 call	 _free
  00069	83 c4 04	 add	 esp, 4
$LN22@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0006c	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0

; 203  :         if (_Myptr) {

  00073	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00076	85 c0		 test	 eax, eax
  00078	74 09		 je	 SHORT $LN29@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  0007a	50		 push	 eax
  0007b	e8 00 00 00 00	 call	 _free
  00080	83 c4 04	 add	 esp, 4
$LN29@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  00083	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0

; 203  :         if (_Myptr) {

  0008a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0008d	85 c0		 test	 eax, eax
  0008f	74 09		 je	 SHORT $LN36@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  00091	50		 push	 eax
  00092	e8 00 00 00 00	 call	 _free
  00097	83 c4 04	 add	 esp, 4
$LN36@Locinfo:

; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;

  0009a	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0

; 203  :         if (_Myptr) {

  000a1	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000a4	85 c0		 test	 eax, eax
  000a6	74 09		 je	 SHORT $LN43@Locinfo

; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);

  000a8	50		 push	 eax
  000a9	e8 00 00 00 00	 call	 _free
  000ae	83 c4 04	 add	 esp, 4
$LN43@Locinfo:

; 258  :     }

  000b1	8b ce		 mov	 ecx, esi

; 211  :         _Myptr = nullptr;

  000b3	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0

; 258  :     }

  000ba	e8 00 00 00 00	 call	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c9	59		 pop	 ecx
  000ca	5e		 pop	 esi
  000cb	8b e5		 mov	 esp, ebp
  000cd	5d		 pop	 ebp
  000ce	c3		 ret	 0
  000cf	cc		 int	 3
  000d0	cc		 int	 3
  000d1	cc		 int	 3
  000d2	cc		 int	 3
  000d3	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0000c	33 c8		 xor	 ecx, eax
  0000e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00013	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Locinfo@std@@QAE@XZ
  00018	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Locinfo@std@@QAE@XZ ENDP				; std::_Locinfo::~_Locinfo
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocinfo
;	COMDAT ??0_Locinfo@std@@QAE@PBD@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Pch$ = 8						; size = 4
??0_Locinfo@std@@QAE@PBD@Z PROC				; std::_Locinfo::_Locinfo, COMDAT
; _this$ = ecx

; 234  :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_Locinfo@std@@QAE@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	56		 push	 esi
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00018	33 c5		 xor	 eax, ebp
  0001a	50		 push	 eax
  0001b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0001e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00024	8b f1		 mov	 esi, ecx
  00026	89 75 f0	 mov	 DWORD PTR _this$[ebp], esi

; 141  : 
; 142  :     __CLR_OR_THIS_CALL _Yarn(const _Yarn& _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 143  :         *this = _Right;
; 144  :     }
; 145  : 
; 146  :     __CLR_OR_THIS_CALL _Yarn(const _Elem* _Right) noexcept : _Myptr(nullptr), _Nul(0) {
; 147  :         *this = _Right;
; 148  :     }
; 149  : 
; 150  :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Yarn& _Right) noexcept {
; 151  :         return *this = _Right._Myptr;
; 152  :     }
; 153  : 
; 154  :     _Yarn& __CLR_OR_THIS_CALL operator=(const _Elem* _Right) noexcept {
; 155  :         if (_Myptr != _Right) { // new value, discard old and copy new
; 156  :             _Tidy();
; 157  : 
; 158  :             if (_Right) { // new is not empty, copy it
; 159  :                 const _Elem* _Ptr = _Right;
; 160  :                 while (*_Ptr != _Elem{}) {
; 161  :                     ++_Ptr;
; 162  :                 }
; 163  : 
; 164  :                 const auto _Count = (++_Ptr - _Right) * sizeof(_Elem);
; 165  : 
; 166  : #ifdef _DEBUG
; 167  :                 _Myptr = static_cast<_Elem*>(_malloc_dbg(_Count, _CRT_BLOCK, __FILE__, __LINE__));
; 168  : #else
; 169  :                 _Myptr = static_cast<_Elem*>(_CSTD malloc(_Count));
; 170  : #endif
; 171  : 
; 172  :                 if (_Myptr) {
; 173  :                     _CSTD memcpy(_Myptr, _Right, _Count);
; 174  :                 }
; 175  :             }
; 176  :         }
; 177  : 
; 178  :         return *this;
; 179  :     }
; 180  : 
; 181  :     __CLR_OR_THIS_CALL ~_Yarn() noexcept {
; 182  :         _Tidy();
; 183  :     }
; 184  : 
; 185  :     _NODISCARD bool __CLR_OR_THIS_CALL empty() const noexcept {
; 186  :         return _Myptr == nullptr;
; 187  :     }
; 188  : 
; 189  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL c_str() const noexcept {
; 190  :         return _Myptr ? _Myptr : &_Nul;
; 191  :     }
; 192  : 
; 193  :     _NODISCARD bool __CLR_OR_THIS_CALL _Empty() const noexcept {
; 194  :         return _Myptr == nullptr;
; 195  :     }
; 196  : 
; 197  :     _Ret_z_ const _Elem* __CLR_OR_THIS_CALL _C_str() const noexcept {
; 198  :         return _Myptr ? _Myptr : &_Nul;
; 199  :     }
; 200  : 
; 201  : private:
; 202  :     void __CLR_OR_THIS_CALL _Tidy() noexcept {
; 203  :         if (_Myptr) {
; 204  : #ifdef _DEBUG
; 205  :             _free_dbg(_Myptr, _CRT_BLOCK);
; 206  : #else
; 207  :             _CSTD free(_Myptr);
; 208  : #endif
; 209  :         }
; 210  : 
; 211  :         _Myptr = nullptr;
; 212  :     }
; 213  : 
; 214  :     _Elem* _Myptr; // pointer to allocated string
; 215  :     _Elem _Nul; // nul terminator for unallocated string
; 216  : };
; 217  : 
; 218  : extern "C++" class _CRTIMP2_PURE_IMPORT _Locinfo { // summary of all stuff specific to a locale used by standard facets
; 219  : public:
; 220  :     using _Collvec  = ::_Collvec;
; 221  :     using _Ctypevec = ::_Ctypevec;
; 222  :     using _Cvtvec   = ::_Cvtvec;
; 223  :     using _Timevec  = _STD _Timevec;
; 224  : 
; 225  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, const char*);
; 226  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_ctor(_Locinfo*, int, const char*);
; 227  :     static void __CLRCALL_PURE_OR_CDECL _Locinfo_dtor(_Locinfo*);
; 228  :     static _Locinfo& __CLRCALL_PURE_OR_CDECL _Locinfo_Addcats(_Locinfo*, int, const char*);
; 229  : 
; 230  :     __CLR_OR_THIS_CALL _Locinfo(const char* _Pch = "C")
; 231  : #ifndef _M_CEE_PURE
; 232  :         : _Lock(_LOCK_LOCALE)

  00029	6a 00		 push	 0
  0002b	e8 00 00 00 00	 call	 ??0_Lockit@std@@QAE@H@Z	; std::_Lockit::_Lockit
  00030	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 140  :     __CLR_OR_THIS_CALL _Yarn() noexcept : _Myptr(nullptr), _Nul(0) {}

  00037	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0003e	c6 46 08 00	 mov	 BYTE PTR [esi+8], 0
  00042	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00049	c6 46 10 00	 mov	 BYTE PTR [esi+16], 0
  0004d	33 c0		 xor	 eax, eax
  0004f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00056	66 89 46 18	 mov	 WORD PTR [esi+24], ax
  0005a	89 46 1c	 mov	 DWORD PTR [esi+28], eax
  0005d	66 89 46 20	 mov	 WORD PTR [esi+32], ax
  00061	89 46 24	 mov	 DWORD PTR [esi+36], eax
  00064	88 46 28	 mov	 BYTE PTR [esi+40], al
  00067	89 46 2c	 mov	 DWORD PTR [esi+44], eax
  0006a	88 46 30	 mov	 BYTE PTR [esi+48], al

; 235  :         if (_Pch) {

  0006d	8b 45 08	 mov	 eax, DWORD PTR __Pch$[ebp]
  00070	c6 45 fc 06	 mov	 BYTE PTR __$EHRec$[ebp+8], 6
  00074	85 c0		 test	 eax, eax
  00076	74 1e		 je	 SHORT $LN2@Locinfo

; 236  :             _Locinfo_ctor(this, _Pch);

  00078	50		 push	 eax
  00079	56		 push	 esi
  0007a	e8 00 00 00 00	 call	 ?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z ; std::_Locinfo::_Locinfo_ctor
  0007f	83 c4 08	 add	 esp, 8

; 241  :     }

  00082	8b c6		 mov	 eax, esi
  00084	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00087	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0008e	59		 pop	 ecx
  0008f	5e		 pop	 esi
  00090	8b e5		 mov	 esp, ebp
  00092	5d		 pop	 ebp
  00093	c2 04 00	 ret	 4
$LN2@Locinfo:

; 237  :             return;
; 238  :         }
; 239  : 
; 240  :         _Xruntime_error("bad locale name");

  00096	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ELKIONDK@bad?5locale?5name@
  0009b	e8 00 00 00 00	 call	 ?_Xruntime_error@std@@YAXPBD@Z ; std::_Xruntime_error
$LN30@Locinfo:
  000a0	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$0:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Lockit@std@@QAE@XZ	; std::_Lockit::~_Lockit
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$1:
  00008	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 04	 add	 ecx, 4
  0000e	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$2:
  00013	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00019	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$3:
  0001e	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00021	83 c1 14	 add	 ecx, 20			; 00000014H
  00024	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$4:
  00029	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0002c	83 c1 1c	 add	 ecx, 28			; 0000001cH
  0002f	e9 00 00 00 00	 jmp	 ??1?$_Yarn@_W@std@@QAE@XZ ; std::_Yarn<wchar_t>::~_Yarn<wchar_t>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$5:
  00034	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00037	83 c1 24	 add	 ecx, 36			; 00000024H
  0003a	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
__unwindfunclet$??0_Locinfo@std@@QAE@PBD@Z$6:
  0003f	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	83 c1 2c	 add	 ecx, 44			; 0000002cH
  00045	e9 00 00 00 00	 jmp	 ??1?$_Yarn@D@std@@QAE@XZ ; std::_Yarn<char>::~_Yarn<char>
  0004a	cc		 int	 3
  0004b	cc		 int	 3
  0004c	cc		 int	 3
  0004d	cc		 int	 3
  0004e	cc		 int	 3
__ehhandler$??0_Locinfo@std@@QAE@PBD@Z:
  0004f	90		 npad	 1
  00050	90		 npad	 1
  00051	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00055	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00058	8b 4a f4	 mov	 ecx, DWORD PTR [edx-12]
  0005b	33 c8		 xor	 ecx, eax
  0005d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00062	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_Locinfo@std@@QAE@PBD@Z
  00067	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_Locinfo@std@@QAE@PBD@Z ENDP				; std::_Locinfo::_Locinfo
; Function compile flags: /Ogtp
;	COMDAT ??_G_Facet_base@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Facet_base@std@@UAEPAXI@Z PROC			; std::_Facet_base::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_Facet_base@std@@6B@
  00010	74 0b		 je	 SHORT $LN5@scalar
  00012	6a 04		 push	 4
  00014	56		 push	 esi
  00015	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0001a	83 c4 08	 add	 esp, 8
$LN5@scalar:
  0001d	8b c6		 mov	 eax, esi
  0001f	5e		 pop	 esi
  00020	5d		 pop	 ebp
  00021	c2 04 00	 ret	 4
??_G_Facet_base@std@@UAEPAXI@Z ENDP			; std::_Facet_base::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xfacet
;	COMDAT ??1_Facet_base@std@@UAE@XZ
_TEXT	SEGMENT
??1_Facet_base@std@@UAE@XZ PROC				; std::_Facet_base::~_Facet_base, COMDAT
; _this$ = ecx

; 25   :     virtual __CLR_OR_THIS_CALL ~_Facet_base() noexcept {} // ensure that derived classes can be destroyed properly

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7_Facet_base@std@@6B@
  00006	c3		 ret	 0
??1_Facet_base@std@@UAE@XZ ENDP				; std::_Facet_base::~_Facet_base
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\typeinfo
;	COMDAT ?_Throw_bad_cast@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_cast@std@@YAXXZ PROC			; std::_Throw_bad_cast, COMDAT

; 62   : [[noreturn]] inline void _Throw_bad_cast() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 63   :     _THROW(bad_cast{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_cast@std@@QAE@XZ	; std::bad_cast::bad_cast
  0000e	68 00 00 00 00	 push	 OFFSET __TI2?AVbad_cast@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_cast@std@@YAXXZ ENDP			; std::_Throw_bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??_Gbad_cast@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_cast@std@@UAEPAXI@Z PROC			; std::bad_cast::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_cast@std@@UAEPAXI@Z ENDP			; std::bad_cast::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0bad_cast@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_cast@std@@QAE@ABV01@@Z PROC			; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_cast@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_cast@std@@QAE@ABV01@@Z ENDP			; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??1bad_cast@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_cast@std@@UAE@XZ PROC				; std::bad_cast::~bad_cast, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_cast@std@@UAE@XZ ENDP				; std::bad_cast::~bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_typeinfo.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_typeinfo.h
;	COMDAT ??0bad_cast@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_cast@std@@QAE@XZ PROC				; std::bad_cast::bad_cast, COMDAT
; _this$ = ecx

; 153  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 154  :     }

  00003	8b c1		 mov	 eax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_08EPJLHIJG@bad?5cast@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_typeinfo.h

; 153  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_cast@std@@6B@

; 154  :     }

  00017	c3		 ret	 0
??0bad_cast@std@@QAE@XZ ENDP				; std::bad_cast::bad_cast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ
_TEXT	SEGMENT
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ PROC ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>, COMDAT

; 669  :     static _Constexpr_immortalize_impl<_Ty> _Static;
; 670  :     return _Static._Storage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static

; 671  : }

  00005	c3		 ret	 0
??$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@0@XZ ENDP ; std::_Immortalize_memcpy_image<std::_Iostream_error_category2>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_G_Iostream_error_category2@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z PROC	; std::_Iostream_error_category2::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  00007	56		 push	 esi
  00008	8b f1		 mov	 esi, ecx
  0000a	74 0b		 je	 SHORT $LN5@scalar
  0000c	6a 08		 push	 8
  0000e	56		 push	 esi
  0000f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00014	83 c4 08	 add	 esp, 8
$LN5@scalar:
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	5d		 pop	 ebp
  0001b	c2 04 00	 ret	 4
??_G_Iostream_error_category2@std@@UAEPAXI@Z ENDP	; std::_Iostream_error_category2::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errcode$ = 12						; size = 4
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC ; std::_Iostream_error_category2::message, COMDAT
; _this$ = ecx

; 555  :     _NODISCARD string message(int _Errcode) const override {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 556  :         if (_Errcode == static_cast<int>(io_errc::stream)) {

  00004	8b 45 0c	 mov	 eax, DWORD PTR __Errcode$[ebp]
  00007	56		 push	 esi
  00008	83 f8 01	 cmp	 eax, 1
  0000b	75 5a		 jne	 SHORT $LN2@message
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000d	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
  00010	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00013	6a 20		 push	 32			; 00000020H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  00015	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00018	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  0001f	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00026	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 913  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  0002b	89 06		 mov	 DWORD PTR [esi], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0002d	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 915  :         _My_data._Mysize = _Count;

  00030	c7 46 10 15 00
	00 00		 mov	 DWORD PTR [esi+16], 21	; 00000015H

; 916  :         _My_data._Myres  = _New_capacity;

  00037	c7 46 14 1f 00
	00 00		 mov	 DWORD PTR [esi+20], 31	; 0000001fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0003e	0f 10 05 00 00
	00 00		 movups	 xmm0, XMMWORD PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB
  00045	0f 11 00	 movups	 XMMWORD PTR [eax], xmm0
  00048	8b 0d 10 00 00
	00		 mov	 ecx, DWORD PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB+16
  0004e	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00051	8a 0d 14 00 00
	00		 mov	 cl, BYTE PTR ?_Iostream_error@?4??message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@3@H@Z@4QBDB+20
  00057	88 48 14	 mov	 BYTE PTR [eax+20], cl
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 922  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0005a	c6 40 15 00	 mov	 BYTE PTR [eax+21], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 563  :     }

  0005e	8b c6		 mov	 eax, esi
  00060	5e		 pop	 esi
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c2 08 00	 ret	 8
$LN2@message:
  00067	57		 push	 edi

; 561  :             return _Syserror_map(_Errcode);

  00068	50		 push	 eax
  00069	e8 00 00 00 00	 call	 ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0006e	8b 75 08	 mov	 esi, DWORD PTR ___$ReturnUdt$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 561  :             return _Syserror_map(_Errcode);

  00071	8b d0		 mov	 edx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00073	8b ca		 mov	 ecx, edx
  00075	0f 57 c0	 xorps	 xmm0, xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 561  :             return _Syserror_map(_Errcode);

  00078	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0007b	0f 11 06	 movups	 XMMWORD PTR [esi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  0007e	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00085	8d 79 01	 lea	 edi, DWORD PTR [ecx+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00088	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  0008f	90		 npad	 1
$LL66@message:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 456  :             return __builtin_strlen(_First);

  00090	8a 01		 mov	 al, BYTE PTR [ecx]
  00092	41		 inc	 ecx
  00093	84 c0		 test	 al, al
  00095	75 f9		 jne	 SHORT $LL66@message
  00097	2b cf		 sub	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 769  :         _Construct<_Construct_strategy::_From_ptr>(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  00099	51		 push	 ecx
  0009a	52		 push	 edx
  0009b	8b ce		 mov	 ecx, esi
  0009d	e8 00 00 00 00	 call	 ??$_Construct@$00PBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXQBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Construct<1,char const *>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 561  :             return _Syserror_map(_Errcode);

  000a2	5f		 pop	 edi

; 563  :     }

  000a3	8b c6		 mov	 eax, esi
  000a5	5e		 pop	 esi
  000a6	8b e5		 mov	 esp, ebp
  000a8	5d		 pop	 ebp
  000a9	c2 08 00	 ret	 8
?message@_Iostream_error_category2@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ENDP ; std::_Iostream_error_category2::message
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ?name@_Iostream_error_category2@std@@UBEPBDXZ
_TEXT	SEGMENT
?name@_Iostream_error_category2@std@@UBEPBDXZ PROC	; std::_Iostream_error_category2::name, COMDAT
; _this$ = ecx

; 552  :         return "iostream";

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_08LLGCOLLL@iostream@

; 553  :     }

  00005	c3		 ret	 0
?name@_Iostream_error_category2@std@@UBEPBDXZ ENDP	; std::_Iostream_error_category2::name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??_Gsystem_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsystem_error@std@@UAEPAXI@Z PROC			; std::system_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN23@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN23@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gsystem_error@std@@UAEPAXI@Z ENDP			; std::system_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0system_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0system_error@std@@QAE@ABV01@@Z PROC			; std::system_error::system_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 72   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002a	83 c4 08	 add	 esp, 8
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7system_error@std@@6B@
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp
  00044	c2 04 00	 ret	 4
??0system_error@std@@QAE@ABV01@@Z ENDP			; std::system_error::system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??1system_error@std@@UAE@XZ
_TEXT	SEGMENT
??1system_error@std@@UAE@XZ PROC			; std::system_error::~system_error, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1system_error@std@@UAE@XZ ENDP			; std::system_error::~system_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??_G_System_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G_System_error@std@@UAEPAXI@Z PROC			; std::_System_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 14		 push	 20			; 00000014H
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_G_System_error@std@@UAEPAXI@Z ENDP			; std::_System_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0_System_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0_System_error@std@@QAE@ABV01@@Z PROC			; std::_System_error::_System_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00004	8b 75 08	 mov	 esi, DWORD PTR ___that$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 73   :     {

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 72   :         : _Data()

  0000d	8d 47 04	 lea	 eax, DWORD PTR [edi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  00010	50		 push	 eax
  00011	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7exception@std@@6B@
  00017	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  0001b	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  0001e	50		 push	 eax
  0001f	e8 00 00 00 00	 call	 ___std_exception_copy
  00024	83 c4 08	 add	 esp, 8
  00027	c7 07 00 00 00
	00		 mov	 DWORD PTR [edi], OFFSET ??_7_System_error@std@@6B@
  0002d	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00030	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  00033	89 47 0c	 mov	 DWORD PTR [edi+12], eax
  00036	8b c7		 mov	 eax, edi
  00038	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5d		 pop	 ebp
  0003e	c2 04 00	 ret	 4
??0_System_error@std@@QAE@ABV01@@Z ENDP			; std::_System_error::_System_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\stdexcept
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
$T2 = -104						; size = 24
__Errcode$ = -80					; size = 8
__InitData$3 = -80					; size = 8
_this$ = -76						; size = 4
_this$GSCopy$ = -76					; size = 4
_this$GSCopy$1$ = -72					; size = 4
$T4 = -72						; size = 4
__Result$1$ = -68					; size = 4
__Errcode$1$ = -68					; size = 4
$T5 = -64						; size = 24
$T6 = -40						; size = 24
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
__Errcode$ = 8						; size = 8
__Message$ = 16						; size = 4
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC ; std::_System_error::_System_error, COMDAT
; _this$ = ecx

; 475  :     _System_error(error_code _Errcode, const string& _Message)

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	83 ec 5c	 sub	 esp, 92			; 0000005cH
  00014	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00019	33 c5		 xor	 eax, ebp
  0001b	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0001e	56		 push	 esi
  0001f	57		 push	 edi
  00020	50		 push	 eax
  00021	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00024	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0002a	8b f1		 mov	 esi, ecx
  0002c	89 75 b8	 mov	 DWORD PTR _this$GSCopy$1$[ebp], esi
  0002f	89 75 b4	 mov	 DWORD PTR _this$[ebp], esi
  00032	8b 45 10	 mov	 eax, DWORD PTR __Message$[ebp]
  00035	0f 57 c0	 xorps	 xmm0, xmm0
  00038	89 75 b4	 mov	 DWORD PTR _this$GSCopy$[ebp], esi
  0003b	89 45 bc	 mov	 DWORD PTR __Result$1$[ebp], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0003e	0f 11 45 98	 movups	 XMMWORD PTR $T2[ebp], xmm0

; 453  :         return _Myres > _Small_string_capacity;

  00042	83 78 14 0f	 cmp	 DWORD PTR [eax+20], 15	; 0000000fH

; 718  :         _Construct<_Construct_strategy::_From_string>(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00046	8b 78 10	 mov	 edi, DWORD PTR [eax+16]

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00049	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+16], 0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00050	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 0

; 445  :         if (_Large_mode_engaged()) {

  00057	76 05		 jbe	 SHORT $LN22@System_err

; 446  :             _Result = _Unfancy(_Bx._Ptr);

  00059	8b 00		 mov	 eax, DWORD PTR [eax]
  0005b	89 45 bc	 mov	 DWORD PTR __Result$1$[ebp], eax
$LN22@System_err:

; 881  :         if (_Count > max_size()) {

  0005e	81 ff ff ff ff
	7f		 cmp	 edi, 2147483647		; 7fffffffH
  00064	0f 87 90 01 00
	00		 ja	 $LN223@System_err

; 883  :         }
; 884  : 
; 885  :         auto& _Al       = _Getal();
; 886  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 887  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 888  : 
; 889  :         if (_Count <= _Small_string_capacity) {

  0006a	83 ff 0f	 cmp	 edi, 15			; 0000000fH
  0006d	77 13		 ja	 SHORT $LN30@System_err
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0006f	0f 10 00	 movups	 xmm0, XMMWORD PTR [eax]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 890  :             _My_data._Mysize = _Count;

  00072	89 7d a8	 mov	 DWORD PTR $T2[ebp+16], edi

; 891  :             _My_data._Myres  = _Small_string_capacity;

  00075	c7 45 ac 0f 00
	00 00		 mov	 DWORD PTR $T2[ebp+20], 15 ; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0007c	0f 11 45 98	 movups	 XMMWORD PTR $T2[ebp], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 908  :             return;

  00080	eb 45		 jmp	 SHORT $LN50@System_err
$LN30@System_err:

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  00082	8b f7		 mov	 esi, edi
  00084	83 ce 0f	 or	 esi, 15			; 0000000fH
  00087	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0008d	76 07		 jbe	 SHORT $LN36@System_err

; 2980 :             return _Max;

  0008f	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00094	eb 0a		 jmp	 SHORT $LN35@System_err
$LN36@System_err:

; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows
; 2984 :             return _Max;
; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00096	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  0009b	3b f0		 cmp	 esi, eax
  0009d	0f 42 f0	 cmovb	 esi, eax
$LN35@System_err:

; 825  :         ++_Capacity; // Take null terminator into consideration

  000a0	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000a3	50		 push	 eax
  000a4	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 829  :             _Fancy_ptr = _Allocate_at_least_helper(_Al, _Capacity);

  000a9	8b c8		 mov	 ecx, eax

; 915  :         _My_data._Mysize = _Count;

  000ab	89 7d a8	 mov	 DWORD PTR $T2[ebp+16], edi

; 917  :         if constexpr (_Strat == _Construct_strategy::_From_char) {
; 918  :             _Traits::assign(_Unfancy(_New_ptr), _Count, _Arg);
; 919  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 920  :         } else if constexpr (_Strat == _Construct_strategy::_From_ptr) {
; 921  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count);
; 922  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());
; 923  :         } else { // _Strat == _Construct_strategy::_From_string
; 924  :             _Traits::copy(_Unfancy(_New_ptr), _Arg, _Count + 1);

  000ae	8d 47 01	 lea	 eax, DWORD PTR [edi+1]
  000b1	89 4d 98	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000b4	50		 push	 eax
  000b5	ff 75 bc	 push	 DWORD PTR __Result$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 916  :         _My_data._Myres  = _New_capacity;

  000b8	89 75 ac	 mov	 DWORD PTR $T2[ebp+20], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000bb	51		 push	 ecx
  000bc	e8 00 00 00 00	 call	 _memcpy
  000c1	8b 75 b8	 mov	 esi, DWORD PTR _this$GSCopy$1$[ebp]
  000c4	83 c4 10	 add	 esp, 16			; 00000010H
$LN50@System_err:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 476  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  000c7	8b 4d 0c	 mov	 ecx, DWORD PTR __Errcode$[ebp+4]
  000ca	8b 45 08	 mov	 eax, DWORD PTR __Errcode$[ebp]
  000cd	89 45 bc	 mov	 DWORD PTR __Errcode$1$[ebp], eax
  000d0	89 4d b8	 mov	 DWORD PTR $T4[ebp], ecx
  000d3	89 4d b4	 mov	 DWORD PTR __Errcode$[ebp+4], ecx

; 463  :     static string _Makestr(error_code _Errcode, string _Message) { // compose error message

  000d6	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 2494 :         return _Mypair._Myval2._Mysize == 0;

  000dd	85 ff		 test	 edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 464  :         if (!_Message.empty()) {

  000df	74 12		 je	 SHORT $LN55@System_err
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1534 :         return append(_Ptr, _Convert_size<size_type>(_Traits::length(_Ptr)));

  000e1	6a 02		 push	 2
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_02LMMGGCAJ@?3?5@
  000e8	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  000eb	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
  000f0	8b 4d b8	 mov	 ecx, DWORD PTR $T4[ebp]
$LN55@System_err:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 207  :         return category().message(value());

  000f3	ff 75 bc	 push	 DWORD PTR __Errcode$1$[ebp]
  000f6	8b 01		 mov	 eax, DWORD PTR [ecx]
  000f8	8d 55 d8	 lea	 edx, DWORD PTR $T6[ebp]
  000fb	52		 push	 edx
  000fc	ff 50 08	 call	 DWORD PTR [eax+8]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  000ff	83 7d ec 0f	 cmp	 DWORD PTR $T6[ebp+20], 15 ; 0000000fH

; 444  :         const value_type* _Result = _Bx._Buf;

  00103	8d 45 d8	 lea	 eax, DWORD PTR $T6[ebp]

; 1483 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00106	ff 75 e8	 push	 DWORD PTR $T6[ebp+16]

; 445  :         if (_Large_mode_engaged()) {

  00109	0f 47 45 d8	 cmova	 eax, DWORD PTR $T6[ebp]

; 1483 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  0010d	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00110	50		 push	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 468  :         _Message.append(_Errcode.message());

  00111	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1483 :         return append(_Right._Mypair._Myval2._Myptr(), _Right._Mypair._Myval2._Mysize);

  00115	e8 00 00 00 00	 call	 ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 453  :         return _Myres > _Small_string_capacity;

  0011a	8b 4d ec	 mov	 ecx, DWORD PTR $T6[ebp+20]
  0011d	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  00120	76 2c		 jbe	 SHORT $LN102@System_err
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00122	8b 55 d8	 mov	 edx, DWORD PTR $T6[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00125	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00126	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00128	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012e	72 14		 jb	 SHORT $LN107@System_err

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00130	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00133	83 c1 23	 add	 ecx, 35			; 00000023H
  00136	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00138	83 c0 fc	 add	 eax, -4			; fffffffcH
  0013b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013e	0f 87 bb 00 00
	00		 ja	 $LN224@System_err
$LN107@System_err:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00144	51		 push	 ecx
  00145	52		 push	 edx
  00146	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0014b	83 c4 08	 add	 esp, 8
$LN102@System_err:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1286 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0014e	0f 10 4d 98	 movups	 xmm1, XMMWORD PTR $T2[ebp]

; 444  :         const value_type* _Result = _Bx._Buf;

  00152	8d 4d c0	 lea	 ecx, DWORD PTR $T5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h

; 60   :     {

  00155	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1286 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  0015b	f3 0f 7e 45 a8	 movq	 xmm0, QWORD PTR $T2[ebp+16]
  00160	66 0f d6 45 d0	 movq	 QWORD PTR $T5[ebp+16], xmm0
  00165	0f 57 c0	 xorps	 xmm0, xmm0

; 453  :         return _Myres > _Small_string_capacity;

  00168	83 7d d4 0f	 cmp	 DWORD PTR $T5[ebp+20], 15 ; 0000000fH

; 445  :         if (_Large_mode_engaged()) {

  0016c	66 0f 7e c8	 movd	 eax, xmm1
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h

; 59   :         : _Data()

  00170	66 0f d6 46 04	 movq	 QWORD PTR [esi+4], xmm0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1286 :                 _CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_val_size);

  00175	0f 11 4d c0	 movups	 XMMWORD PTR $T5[ebp], xmm1

; 445  :         if (_Large_mode_engaged()) {

  00179	0f 47 c8	 cmova	 ecx, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h

; 61   :         __std_exception_data _InitData = { _Message, true };

  0017c	c6 45 b4 01	 mov	 BYTE PTR __InitData$3[ebp+4], 1
  00180	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00183	89 4d b0	 mov	 DWORD PTR __InitData$3[ebp], ecx

; 62   :         __std_exception_copy(&_InitData, &_Data);

  00186	50		 push	 eax
  00187	8d 45 b0	 lea	 eax, DWORD PTR __InitData$3[ebp]
  0018a	50		 push	 eax
  0018b	e8 00 00 00 00	 call	 ___std_exception_copy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  00190	8b 4d d4	 mov	 ecx, DWORD PTR $T5[ebp+20]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h

; 62   :         __std_exception_copy(&_InitData, &_Data);

  00193	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\stdexcept

; 104  :     explicit runtime_error(const string& _Message) : _Mybase(_Message.c_str()) {}

  00196	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 453  :         return _Myres > _Small_string_capacity;

  0019c	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3083 :         if (_My_data._Large_mode_engaged()) {

  0019f	76 28		 jbe	 SHORT $LN209@System_err
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a1	8b 55 c0	 mov	 edx, DWORD PTR $T5[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  001a4	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  001a5	8b c2		 mov	 eax, edx

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  001a7	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  001ad	72 10		 jb	 SHORT $LN214@System_err

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  001af	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  001b2	83 c1 23	 add	 ecx, 35			; 00000023H
  001b5	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001b7	83 c0 fc	 add	 eax, -4			; fffffffcH
  001ba	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  001bd	77 4f		 ja	 SHORT $LN225@System_err
$LN214@System_err:

; 289  :         ::operator delete(_Ptr, _Bytes);

  001bf	51		 push	 ecx
  001c0	52		 push	 edx
  001c1	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  001c6	83 c4 08	 add	 esp, 8
$LN209@System_err:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error

; 476  :         : runtime_error(_Makestr(_Errcode, _Message)), _Mycode(_Errcode) {}

  001c9	8b 4d 08	 mov	 ecx, DWORD PTR __Errcode$[ebp]
  001cc	8b c6		 mov	 eax, esi
  001ce	8b 55 0c	 mov	 edx, DWORD PTR __Errcode$[ebp+4]
  001d1	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7_System_error@std@@6B@
  001d7	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  001da	89 56 10	 mov	 DWORD PTR [esi+16], edx
  001dd	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001e0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001e7	59		 pop	 ecx
  001e8	5f		 pop	 edi
  001e9	5e		 pop	 esi
  001ea	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001ed	33 cd		 xor	 ecx, ebp
  001ef	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001f4	8b e5		 mov	 esp, ebp
  001f6	5d		 pop	 ebp
  001f7	c2 0c 00	 ret	 12			; 0000000cH
$LN223@System_err:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 882  :             _Xlen_string(); // result too long

  001fa	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN224@System_err:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  001ff	6a 00		 push	 0
  00201	6a 00		 push	 0
  00203	6a 00		 push	 0
  00205	6a 00		 push	 0
  00207	6a 00		 push	 0
  00209	e8 00 00 00 00	 call	 __invoke_watson
$LN225@System_err:
  0020e	6a 00		 push	 0
  00210	6a 00		 push	 0
  00212	6a 00		 push	 0
  00214	6a 00		 push	 0
  00216	6a 00		 push	 0
  00218	e8 00 00 00 00	 call	 __invoke_watson
$LN221@System_err:
  0021d	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$5:
  00000	8d 4d 98	 lea	 ecx, DWORD PTR $T2[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$6:
  00008	8d 4d d8	 lea	 ecx, DWORD PTR $T6[ebp]
  0000b	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
  00010	cc		 int	 3
  00011	cc		 int	 3
  00012	cc		 int	 3
  00013	cc		 int	 3
  00014	cc		 int	 3
__ehhandler$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00015	90		 npad	 1
  00016	90		 npad	 1
  00017	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001b	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001e	8b 4a 98	 mov	 ecx, DWORD PTR [edx-104]
  00021	33 c8		 xor	 ecx, eax
  00023	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00028	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002b	33 c8		 xor	 ecx, eax
  0002d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00032	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00037	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0_System_error@std@@IAE@Verror_code@1@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::_System_error::_System_error
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Ec$ = 12						; size = 4
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z PROC ; std::make_error_code, COMDAT

; 429  : _EXPORT_STD _NODISCARD inline error_code make_error_code(io_errc _Ec) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 171  :     error_code(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR __Ec$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx
  0000b	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], OFFSET ?_Static@?1???$_Immortalize_memcpy_image@V_Iostream_error_category2@std@@@std@@YAABV_Iostream_error_category2@1@XZ@4U?$_Constexpr_immortalize_impl@V_Iostream_error_category2@std@@@1@A ; `std::_Immortalize_memcpy_image<std::_Iostream_error_category2>'::`2'::_Static

; 430  :     return error_code(static_cast<int>(_Ec), _STD iostream_category());
; 431  : }

  00012	5d		 pop	 ebp
  00013	c3		 ret	 0
?make_error_code@std@@YA?AVerror_code@1@W4io_errc@1@@Z ENDP ; std::make_error_code
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
_TEXT	SEGMENT
__Code$ = 8						; size = 4
__Errval$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 416  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 103  :         return _Bit_cast<uintptr_t>(_Addr) == _Bit_cast<uintptr_t>(_Right._Addr);

  00003	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 416  : _NODISCARD inline bool error_category::equivalent(const error_code& _Code, int _Errval) const noexcept {

  00006	56		 push	 esi

; 103  :         return _Bit_cast<uintptr_t>(_Addr) == _Bit_cast<uintptr_t>(_Right._Addr);

  00007	8b 75 08	 mov	 esi, DWORD PTR __Code$[ebp]
  0000a	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000d	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]

; 417  :     return *this == _Code.category() && _Code.value() == _Errval;

  00010	75 0e		 jne	 SHORT $LN3@equivalent
  00012	8b 06		 mov	 eax, DWORD PTR [esi]
  00014	3b 45 0c	 cmp	 eax, DWORD PTR __Errval$[ebp]
  00017	75 07		 jne	 SHORT $LN3@equivalent
  00019	b0 01		 mov	 al, 1
  0001b	5e		 pop	 esi

; 418  : }

  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
$LN3@equivalent:

; 417  :     return *this == _Code.category() && _Code.value() == _Errval;

  00020	32 c0		 xor	 al, al
  00022	5e		 pop	 esi

; 418  : }

  00023	5d		 pop	 ebp
  00024	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
_TEXT	SEGMENT
$T1 = -8						; size = 8
__Errval$ = 8						; size = 4
__Cond$ = 12						; size = 4
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC ; std::error_category::equivalent, COMDAT
; _this$ = ecx

; 412  : _NODISCARD inline bool error_category::equivalent(int _Errval, const error_condition& _Cond) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 413  :     return default_error_condition(_Errval) == _Cond;

  00003	8b 01		 mov	 eax, DWORD PTR [ecx]
  00005	8d 55 f8	 lea	 edx, DWORD PTR $T1[ebp]
  00008	83 ec 08	 sub	 esp, 8
  0000b	56		 push	 esi
  0000c	ff 75 08	 push	 DWORD PTR __Errval$[ebp]
  0000f	52		 push	 edx
  00010	ff 50 0c	 call	 DWORD PTR [eax+12]

; 103  :         return _Bit_cast<uintptr_t>(_Addr) == _Bit_cast<uintptr_t>(_Right._Addr);

  00013	8b 75 0c	 mov	 esi, DWORD PTR __Cond$[ebp]
  00016	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00019	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0001c	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  0001f	3b 4a 04	 cmp	 ecx, DWORD PTR [edx+4]

; 305  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00022	75 0f		 jne	 SHORT $LN6@equivalent
  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	3b 06		 cmp	 eax, DWORD PTR [esi]
  00028	75 09		 jne	 SHORT $LN6@equivalent
  0002a	b0 01		 mov	 al, 1
  0002c	5e		 pop	 esi

; 414  : }

  0002d	8b e5		 mov	 esp, ebp
  0002f	5d		 pop	 ebp
  00030	c2 08 00	 ret	 8
$LN6@equivalent:

; 305  :         return _Left.category() == _Right.category() && _Left.value() == _Right.value();

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 414  : }

  00036	8b e5		 mov	 esp, ebp
  00038	5d		 pop	 ebp
  00039	c2 08 00	 ret	 8
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ENDP ; std::error_category::equivalent
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Errval$ = 12						; size = 4
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC ; std::error_category::default_error_condition, COMDAT
; _this$ = ecx

; 407  : _NODISCARD inline error_condition error_category::default_error_condition(int _Errval) const noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 262  :     error_condition(int _Val, const error_category& _Cat) noexcept : _Myval(_Val), _Mycat(&_Cat) {}

  00003	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00006	8b 55 0c	 mov	 edx, DWORD PTR __Errval$[ebp]
  00009	89 10		 mov	 DWORD PTR [eax], edx
  0000b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 408  :     // make error_condition for error code
; 409  :     return error_condition(_Errval, *this);
; 410  : }

  0000e	5d		 pop	 ebp
  0000f	c2 08 00	 ret	 8
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ENDP ; std::error_category::default_error_condition
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\system_error
;	COMDAT ??1error_category@std@@UAE@XZ
_TEXT	SEGMENT
??1error_category@std@@UAE@XZ PROC			; std::error_category::~error_category, COMDAT
; _this$ = ecx

; 87   :     _CONSTEXPR20 virtual ~error_category() noexcept = default;

  00000	c2 00 00	 ret	 0
??1error_category@std@@UAE@XZ ENDP			; std::error_category::~error_category
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??_Gruntime_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gruntime_error@std@@UAEPAXI@Z PROC			; std::runtime_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gruntime_error@std@@UAEPAXI@Z ENDP			; std::runtime_error::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0runtime_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0runtime_error@std@@QAE@ABV01@@Z PROC			; std::runtime_error::runtime_error, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7runtime_error@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0runtime_error@std@@QAE@ABV01@@Z ENDP			; std::runtime_error::runtime_error
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3080 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 453  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 07	 cmp	 ecx, 7

; 3081 :         auto& _My_data = _Mypair._Myval2;
; 3082 :         _My_data._Orphan_all();
; 3083 :         if (_My_data._Large_mode_engaged()) {

  00009	76 2d		 jbe	 SHORT $LN16@Tidy_deall
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
  0000d	8d 0c 4d 02 00
	00 00		 lea	 ecx, DWORD PTR [ecx*2+2]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00014	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0001a	72 12		 jb	 SHORT $LN21@Tidy_deall

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  0001c	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001f	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00022	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00024	83 c0 fc	 add	 eax, -4			; fffffffcH
  00027	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0002a	77 21		 ja	 SHORT $LN20@Tidy_deall

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  0002c	8b c2		 mov	 eax, edx
$LN21@Tidy_deall:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002e	51		 push	 ecx
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00035	83 c4 08	 add	 esp, 8
$LN16@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00038	33 c0		 xor	 eax, eax
  0003a	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0
  00041	c7 46 14 07 00
	00 00		 mov	 DWORD PTR [esi+20], 7
  00048	66 89 06	 mov	 WORD PTR [esi], ax
  0004b	5e		 pop	 esi

; 3094 :     }

  0004c	c3		 ret	 0
$LN20@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0004d	6a 00		 push	 0
  0004f	6a 00		 push	 0
  00051	6a 00		 push	 0
  00053	6a 00		 push	 0
  00055	6a 00		 push	 0
  00057	e8 00 00 00 00	 call	 __invoke_watson
$LN29@Tidy_deall:
  0005c	cc		 int	 3
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
__New_ptr$1$ = -12					; size = 4
__Old_size$1$ = -8					; size = 4
tv470 = -8						; size = 4
__New_size$1$ = -4					; size = 4
tv469 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
tv477 = 12						; size = 4
tv484 = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 1510 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 1511 :         // append [_Ptr, _Ptr + _Count)
; 1512 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1513 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]
  0000e	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00011	8b c3		 mov	 eax, ebx
  00013	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  00016	2b c2		 sub	 eax, edx
  00018	89 55 f8	 mov	 DWORD PTR __Old_size$1$[ebp], edx
  0001b	3b c8		 cmp	 ecx, eax
  0001d	77 39		 ja	 SHORT $LN2@append

; 1514 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1515 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0001f	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 435  :         value_type* _Result = _Bx._Buf;

  00022	8b f7		 mov	 esi, edi

; 1514 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1515 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00024	89 45 0c	 mov	 DWORD PTR tv484[ebp], eax
  00027	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 453  :         return _Myres > _Small_string_capacity;

  0002a	83 fb 07	 cmp	 ebx, 7

; 436  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 437  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 37		 mov	 esi, DWORD PTR [edi]
$LN5@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	8d 04 09	 lea	 eax, DWORD PTR [ecx+ecx]
  00034	50		 push	 eax
  00035	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1517 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00038	8d 04 56	 lea	 eax, DWORD PTR [esi+edx*2]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003b	50		 push	 eax
  0003c	e8 00 00 00 00	 call	 _memmove
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1518 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00041	8b 45 0c	 mov	 eax, DWORD PTR tv484[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00044	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1518 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00047	33 c9		 xor	 ecx, ecx
  00049	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx

; 1531 :     }

  0004d	8b c7		 mov	 eax, edi
  0004f	5f		 pop	 edi
  00050	5e		 pop	 esi
  00051	5b		 pop	 ebx
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c2 08 00	 ret	 8
$LN2@append:

; 3029 :         if (max_size() - _Old_size < _Size_increase) {

  00058	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  0005d	2b c2		 sub	 eax, edx
  0005f	3b c1		 cmp	 eax, ecx
  00061	0f 82 f0 00 00
	00		 jb	 $LN71@append

; 3031 :         }
; 3032 : 
; 3033 :         const size_type _New_size     = _Old_size + _Size_increase;

  00067	8d 04 0a	 lea	 eax, DWORD PTR [edx+ecx]

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  0006a	8b f0		 mov	 esi, eax

; 3033 :         const size_type _New_size     = _Old_size + _Size_increase;

  0006c	89 45 fc	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  0006f	83 ce 07	 or	 esi, 7
  00072	81 fe fe ff ff
	7f		 cmp	 esi, 2147483646		; 7ffffffeH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00078	77 27		 ja	 SHORT $LN69@append

; 2980 :             return _Max;
; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007a	8b cb		 mov	 ecx, ebx
  0007c	b8 fe ff ff 7f	 mov	 eax, 2147483646		; 7ffffffeH
  00081	d1 e9		 shr	 ecx, 1
  00083	2b c1		 sub	 eax, ecx
  00085	3b d8		 cmp	 ebx, eax
  00087	77 18		 ja	 SHORT $LN69@append

; 2984 :             return _Max;
; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00089	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  0008c	3b f0		 cmp	 esi, eax
  0008e	0f 42 f0	 cmovb	 esi, eax

; 825  :         ++_Capacity; // Take null terminator into consideration

  00091	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  00094	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  00099	0f 87 bd 00 00
	00		 ja	 $LN72@append
  0009f	eb 0a		 jmp	 SHORT $LN37@append
$LN69@append:

; 119  :         }
; 120  :     }
; 121  : 
; 122  :     return _Count * _Ty_size;

  000a1	be fe ff ff 7f	 mov	 esi, 2147483646		; 7ffffffeH
  000a6	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN37@append:
  000ab	03 c0		 add	 eax, eax

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ad	50		 push	 eax

; 122  :     return _Count * _Ty_size;

  000ae	0f ae e8	 lfence

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b1	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3041 :         _My_data._Mysize      = _New_size;

  000b6	8b 4d fc	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b9	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3041 :         _My_data._Mysize      = _New_size;

  000bc	89 4f 10	 mov	 DWORD PTR [edi+16], ecx

; 3042 :         _My_data._Myres       = _New_capacity;
; 3043 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000bf	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000c2	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000c5	89 45 f4	 mov	 DWORD PTR __New_ptr$1$[ebp], eax
  000c8	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  000cb	8b 4d 0c	 mov	 ecx, DWORD PTR __Count$[ebp]

; 3044 :         if (_Old_capacity > _Small_string_capacity) {

  000ce	52		 push	 edx
  000cf	8d 34 09	 lea	 esi, DWORD PTR [ecx+ecx]
  000d2	89 75 0c	 mov	 DWORD PTR tv477[ebp], esi
  000d5	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  000d8	8b 75 fc	 mov	 esi, DWORD PTR __New_size$1$[ebp]
  000db	89 4d f8	 mov	 DWORD PTR tv470[ebp], ecx
  000de	8d 0c 70	 lea	 ecx, DWORD PTR [eax+esi*2]
  000e1	8b 75 0c	 mov	 esi, DWORD PTR tv477[ebp]
  000e4	89 4d fc	 mov	 DWORD PTR tv469[ebp], ecx
  000e7	83 fb 07	 cmp	 ebx, 7
  000ea	76 3d		 jbe	 SHORT $LN16@append

; 3045 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ec	0f ae e8	 lfence
  000ef	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000f1	56		 push	 esi
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _memcpy
  000f8	ff 75 0c	 push	 DWORD PTR tv477[ebp]
  000fb	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000fe	ff 75 f8	 push	 DWORD PTR tv470[ebp]
  00101	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1528 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00106	8b 45 fc	 mov	 eax, DWORD PTR tv469[ebp]
  00109	33 c9		 xor	 ecx, ecx

; 3047 :             _Deallocate_for_capacity(_Al, _Old_ptr, _Old_capacity);

  0010b	53		 push	 ebx
  0010c	56		 push	 esi
  0010d	57		 push	 edi

; 1528 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0010e	66 89 08	 mov	 WORD PTR [eax], cx

; 3047 :             _Deallocate_for_capacity(_Al, _Old_ptr, _Old_capacity);

  00111	e8 00 00 00 00	 call	 ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAAV?$allocator@_W@2@QA_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity

; 1519 :             return *this;
; 1520 :         }
; 1521 : 
; 1522 :         return _Reallocate_grow_by(

  00116	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]

; 3047 :             _Deallocate_for_capacity(_Al, _Old_ptr, _Old_capacity);

  00119	83 c4 24	 add	 esp, 36			; 00000024H

; 1519 :             return *this;
; 1520 :         }
; 1521 : 
; 1522 :         return _Reallocate_grow_by(

  0011c	89 07		 mov	 DWORD PTR [edi], eax

; 1531 :     }

  0011e	8b c7		 mov	 eax, edi
  00120	5f		 pop	 edi
  00121	5e		 pop	 esi
  00122	5b		 pop	 ebx
  00123	8b e5		 mov	 esp, ebp
  00125	5d		 pop	 ebp
  00126	c2 08 00	 ret	 8
$LN16@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00129	57		 push	 edi
  0012a	50		 push	 eax
  0012b	e8 00 00 00 00	 call	 _memcpy
  00130	56		 push	 esi
  00131	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  00134	ff 75 f8	 push	 DWORD PTR tv470[ebp]
  00137	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1528 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0013c	8b 45 fc	 mov	 eax, DWORD PTR tv469[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0013f	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1528 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00142	33 c9		 xor	 ecx, ecx
  00144	66 89 08	 mov	 WORD PTR [eax], cx

; 1519 :             return *this;
; 1520 :         }
; 1521 : 
; 1522 :         return _Reallocate_grow_by(

  00147	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  0014a	89 07		 mov	 DWORD PTR [edi], eax

; 1531 :     }

  0014c	8b c7		 mov	 eax, edi
  0014e	5f		 pop	 edi
  0014f	5e		 pop	 esi
  00150	5b		 pop	 ebx
  00151	8b e5		 mov	 esp, ebp
  00153	5d		 pop	 ebp
  00154	c2 08 00	 ret	 8
$LN71@append:

; 3030 :             _Xlen_string(); // result too long

  00157	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN72@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  0015c	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN67@append:
  00161	cc		 int	 3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1383 :         _Tidy_deallocate();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@AAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAAV?$allocator@_W@2@QA_WI@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Old_ptr$ = 12						; size = 4
__Capacity$ = 16					; size = 4
?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAAV?$allocator@_W@2@QA_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity, COMDAT

; 850  :         _Alty& _Al, const pointer _Old_ptr, const size_type _Capacity) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  00003	8b 45 10	 mov	 eax, DWORD PTR __Capacity$[ebp]
  00006	8d 0c 45 02 00
	00 00		 lea	 ecx, DWORD PTR [eax*2+2]
  0000d	8b 45 0c	 mov	 eax, DWORD PTR __Old_ptr$[ebp]

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00010	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00016	72 12		 jb	 SHORT $LN14@Deallocate

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00018	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  0001b	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001e	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00020	83 c0 fc	 add	 eax, -4			; fffffffcH
  00023	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00026	77 0e		 ja	 SHORT $LN13@Deallocate

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00028	8b c2		 mov	 eax, edx
$LN14@Deallocate:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0002a	51		 push	 ecx
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00031	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 853  :     }

  00034	5d		 pop	 ebp
  00035	c3		 ret	 0
$LN13@Deallocate:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00036	6a 00		 push	 0
  00038	6a 00		 push	 0
  0003a	6a 00		 push	 0
  0003c	6a 00		 push	 0
  0003e	6a 00		 push	 0
  00040	e8 00 00 00 00	 call	 __invoke_watson
$LN18@Deallocate:
  00045	cc		 int	 3
?_Deallocate_for_capacity@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@CAXAAV?$allocator@_W@2@QA_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Deallocate_for_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 2
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 785  :         : _Mypair(_Zero_then_variadic_args_t{}) { // construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx
  00004	53		 push	 ebx
  00005	8b d9		 mov	 ebx, ecx
  00007	0f 57 c0	 xorps	 xmm0, xmm0
  0000a	57		 push	 edi

; 881  :         if (_Count > max_size()) {

  0000b	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000e	0f 11 03	 movups	 XMMWORD PTR [ebx], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00011	c7 43 10 00 00
	00 00		 mov	 DWORD PTR [ebx+16], 0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00018	c7 43 14 00 00
	00 00		 mov	 DWORD PTR [ebx+20], 0

; 881  :         if (_Count > max_size()) {

  0001f	81 ff fe ff ff
	7f		 cmp	 edi, 2147483646		; 7ffffffeH
  00025	0f 87 bc 00 00
	00		 ja	 $LN73@basic_stri

; 883  :         }
; 884  : 
; 885  :         auto& _Al       = _Getal();
; 886  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 887  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 888  : 
; 889  :         if (_Count <= _Small_string_capacity) {

  0002b	83 ff 07	 cmp	 edi, 7
  0002e	77 3b		 ja	 SHORT $LN18@basic_stri

; 890  :             _My_data._Mysize = _Count;

  00030	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 891  :             _My_data._Myres  = _Small_string_capacity;

  00033	c7 43 14 07 00
	00 00		 mov	 DWORD PTR [ebx+20], 7
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\wchar.h

; 517  :         for (; 0 < _N; ++_Su, --_N)

  0003a	85 ff		 test	 edi, edi
  0003c	74 1d		 je	 SHORT $LN26@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 890  :             _My_data._Mysize = _Count;

  0003e	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  00041	8b cf		 mov	 ecx, edi
  00043	0f b7 d0	 movzx	 edx, ax
  00046	8b fb		 mov	 edi, ebx
  00048	8b c2		 mov	 eax, edx
  0004a	c1 e2 10	 shl	 edx, 16			; 00000010H
  0004d	0b c2		 or	 eax, edx
  0004f	d1 e9		 shr	 ecx, 1
  00051	f3 ab		 rep stosd
  00053	13 c9		 adc	 ecx, ecx
  00055	66 f3 ab	 rep stosw
  00058	8b 7d 08	 mov	 edi, DWORD PTR __Count$[ebp]
$LN26@basic_stri:

; 892  : 
; 893  :             if constexpr (_Strat == _Construct_strategy::_From_char) {
; 894  :                 _Traits::assign(_My_data._Bx._Buf, _Count, _Arg);
; 895  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  0005b	33 c0		 xor	 eax, eax
  0005d	66 89 04 7b	 mov	 WORD PTR [ebx+edi*2], ax

; 786  :         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
; 787  :     }

  00061	8b c3		 mov	 eax, ebx
  00063	5f		 pop	 edi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 08 00	 ret	 8
$LN18@basic_stri:

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  0006b	8b c7		 mov	 eax, edi
  0006d	83 c8 07	 or	 eax, 7
  00070	3d fe ff ff 7f	 cmp	 eax, 2147483646		; 7ffffffeH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00075	76 56		 jbe	 SHORT $LN29@basic_stri

; 2980 :             return _Max;

  00077	c7 45 fc fe ff
	ff 7f		 mov	 DWORD PTR $T1[ebp], 2147483646 ; 7ffffffeH
  0007e	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
$LN43@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 122  :     return _Count * _Ty_size;

  00083	03 c0		 add	 eax, eax
  00085	56		 push	 esi

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00086	50		 push	 eax

; 122  :     return _Count * _Ty_size;

  00087	0f ae e8	 lfence

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0008a	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 912  :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  0008f	8b f0		 mov	 esi, eax

; 914  : 
; 915  :         _My_data._Mysize = _Count;

  00091	89 7b 10	 mov	 DWORD PTR [ebx+16], edi

; 916  :         _My_data._Myres  = _New_capacity;

  00094	8b 45 fc	 mov	 eax, DWORD PTR $T1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 122  :     return _Count * _Ty_size;

  00097	8b cf		 mov	 ecx, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 916  :         _My_data._Myres  = _New_capacity;

  00099	89 43 14	 mov	 DWORD PTR [ebx+20], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009c	83 c4 04	 add	 esp, 4

; 122  :     return _Count * _Ty_size;

  0009f	8b 45 0c	 mov	 eax, DWORD PTR __Ch$[ebp]
  000a2	8b fe		 mov	 edi, esi
  000a4	0f b7 d0	 movzx	 edx, ax
  000a7	8b c2		 mov	 eax, edx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 913  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  000a9	89 33		 mov	 DWORD PTR [ebx], esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 122  :     return _Count * _Ty_size;

  000ab	c1 e2 10	 shl	 edx, 16			; 00000010H
  000ae	0b c2		 or	 eax, edx
  000b0	d1 e9		 shr	 ecx, 1
  000b2	f3 ab		 rep stosd
  000b4	13 c9		 adc	 ecx, ecx
  000b6	66 f3 ab	 rep stosw
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 919  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000b9	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
  000bc	33 c9		 xor	 ecx, ecx
  000be	66 89 0c 46	 mov	 WORD PTR [esi+eax*2], cx

; 786  :         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
; 787  :     }

  000c2	8b c3		 mov	 eax, ebx

; 919  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  000c4	5e		 pop	 esi

; 786  :         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
; 787  :     }

  000c5	5f		 pop	 edi
  000c6	5b		 pop	 ebx
  000c7	8b e5		 mov	 esp, ebp
  000c9	5d		 pop	 ebp
  000ca	c2 08 00	 ret	 8
$LN29@basic_stri:

; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000cd	b9 0a 00 00 00	 mov	 ecx, 10			; 0000000aH
  000d2	3b c1		 cmp	 eax, ecx
  000d4	0f 42 c1	 cmovb	 eax, ecx
  000d7	89 45 fc	 mov	 DWORD PTR $T1[ebp], eax

; 825  :         ++_Capacity; // Take null terminator into consideration

  000da	40		 inc	 eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 117  :         if (_Count > _Max_possible) {

  000db	3d ff ff ff 7f	 cmp	 eax, 2147483647		; 7fffffffH
  000e0	76 a1		 jbe	 SHORT $LN43@basic_stri

; 118  :             _Throw_bad_array_new_length(); // multiply overflow

  000e2	e8 00 00 00 00	 call	 ?_Throw_bad_array_new_length@std@@YAXXZ ; std::_Throw_bad_array_new_length
$LN73@basic_stri:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 882  :             _Xlen_string(); // result too long

  000e7	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN71@basic_stri:
  000ec	cc		 int	 3
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@I_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran, COMDAT

; 482  :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@_W@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3080 :     _CONSTEXPR20 void _Tidy_deallocate() noexcept { // initialize buffer, deallocating any storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 453  :         return _Myres > _Small_string_capacity;

  00003	8b 4e 14	 mov	 ecx, DWORD PTR [esi+20]
  00006	83 f9 0f	 cmp	 ecx, 15			; 0000000fH

; 3081 :         auto& _My_data = _Mypair._Myval2;
; 3082 :         _My_data._Orphan_all();
; 3083 :         if (_My_data._Large_mode_engaged()) {

  00009	76 27		 jbe	 SHORT $LN16@Tidy_deall
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 985  :         _STD _Deallocate<_New_alignof<_Ty>>(_Ptr, sizeof(_Ty) * _Count);

  0000b	8b 06		 mov	 eax, DWORD PTR [esi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  0000d	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  0000e	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  00014	72 12		 jb	 SHORT $LN21@Tidy_deall

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00016	8b 50 fc	 mov	 edx, DWORD PTR [eax-4]
  00019	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  0001c	2b c2		 sub	 eax, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0001e	83 c0 fc	 add	 eax, -4			; fffffffcH
  00021	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00024	77 1f		 ja	 SHORT $LN20@Tidy_deall

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00026	8b c2		 mov	 eax, edx
$LN21@Tidy_deall:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00028	51		 push	 ecx
  00029	50		 push	 eax
  0002a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  0002f	83 c4 08	 add	 esp, 8
$LN16@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3090 :         _My_data._Mysize = 0;

  00032	c7 46 10 00 00
	00 00		 mov	 DWORD PTR [esi+16], 0

; 3091 :         _My_data._Myres  = _Small_string_capacity;

  00039	c7 46 14 0f 00
	00 00		 mov	 DWORD PTR [esi+20], 15	; 0000000fH

; 3092 :         // the _Traits::assign is last so the codegen doesn't think the char write can alias this
; 3093 :         _Traits::assign(_My_data._Bx._Buf[0], _Elem());

  00040	c6 06 00	 mov	 BYTE PTR [esi], 0
  00043	5e		 pop	 esi

; 3094 :     }

  00044	c3		 ret	 0
$LN20@Tidy_deall:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00045	6a 00		 push	 0
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	6a 00		 push	 0
  0004d	6a 00		 push	 0
  0004f	e8 00 00 00 00	 call	 __invoke_watson
$LN29@Tidy_deall:
  00054	cc		 int	 3
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z
_TEXT	SEGMENT
__New_ptr$1$ = -20					; size = 4
tv559 = -16						; size = 4
tv558 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
tv560 = -4						; size = 4
tv562 = -4						; size = 4
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
tv565 = 16						; size = 4
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert, COMDAT
; _this$ = ecx

; 1784 :         const size_type _Off, _CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H
  00006	53		 push	 ebx
  00007	56		 push	 esi
  00008	57		 push	 edi
  00009	8b f9		 mov	 edi, ecx

; 469  :         if (_Mysize < _Off) {

  0000b	8b 4d 08	 mov	 ecx, DWORD PTR __Off$[ebp]
  0000e	8b 5f 10	 mov	 ebx, DWORD PTR [edi+16]
  00011	3b d9		 cmp	 ebx, ecx
  00013	0f 82 7b 01 00
	00		 jb	 $LN96@insert

; 1785 :         // insert _Count * _Ch at _Off
; 1786 :         _Mypair._Myval2._Check_offset(_Off);
; 1787 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1788 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00019	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  0001c	8b c2		 mov	 eax, edx
  0001e	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00021	2b c3		 sub	 eax, ebx
  00023	89 55 f8	 mov	 DWORD PTR $T1[ebp], edx
  00026	3b f0		 cmp	 esi, eax
  00028	77 41		 ja	 SHORT $LN2@insert

; 1789 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1790 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  0002a	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  0002d	0f ae e8	 lfence
  00030	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 435  :         value_type* _Result = _Bx._Buf;

  00033	8b c7		 mov	 eax, edi

; 453  :         return _Myres > _Small_string_capacity;

  00035	83 7f 14 0f	 cmp	 DWORD PTR [edi+20], 15	; 0000000fH

; 436  :         if (_Large_mode_engaged()) {

  00039	76 02		 jbe	 SHORT $LN9@insert

; 437  :             _Result = _Unfancy(_Bx._Ptr);

  0003b	8b 07		 mov	 eax, DWORD PTR [edi]
$LN9@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0003d	2b d9		 sub	 ebx, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1792 :             _Elem* const _Insert_at = _Old_ptr + _Off;

  0003f	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]

; 1793 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00042	43		 inc	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00043	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1793 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00044	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00047	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1793 :             _Traits::move(_Insert_at + _Count, _Insert_at, _Old_size - _Off + 1); // move suffix + null down

  00048	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 _memmove

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00051	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00055	53		 push	 ebx
  00056	50		 push	 eax
  00057	56		 push	 esi
  00058	e8 00 00 00 00	 call	 _memset
  0005d	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1807 :     }

  00060	8b c7		 mov	 eax, edi
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 0c 00	 ret	 12			; 0000000cH
$LN2@insert:

; 3029 :         if (max_size() - _Old_size < _Size_increase) {

  0006b	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00070	2b c3		 sub	 eax, ebx
  00072	3b c6		 cmp	 eax, esi
  00074	0f 82 1f 01 00
	00		 jb	 $LN97@insert

; 3031 :         }
; 3032 : 
; 3033 :         const size_type _New_size     = _Old_size + _Size_increase;

  0007a	8d 0c 33	 lea	 ecx, DWORD PTR [ebx+esi]

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  0007d	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00080	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00086	76 07		 jbe	 SHORT $LN30@insert

; 2980 :             return _Max;

  00088	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0008d	eb 24		 jmp	 SHORT $LN94@insert
$LN30@insert:

; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0008f	8b c2		 mov	 eax, edx
  00091	d1 e8		 shr	 eax, 1
  00093	89 45 fc	 mov	 DWORD PTR tv562[ebp], eax
  00096	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0009b	2b 45 fc	 sub	 eax, DWORD PTR tv562[ebp]
  0009e	3b d0		 cmp	 edx, eax
  000a0	76 07		 jbe	 SHORT $LN31@insert

; 2984 :             return _Max;

  000a2	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  000a7	eb 0a		 jmp	 SHORT $LN94@insert
$LN31@insert:

; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  000a9	8b 45 fc	 mov	 eax, DWORD PTR tv562[ebp]
  000ac	03 c2		 add	 eax, edx
  000ae	3b c8		 cmp	 ecx, eax
  000b0	0f 42 c8	 cmovb	 ecx, eax
$LN94@insert:

; 825  :         ++_Capacity; // Take null terminator into consideration

  000b3	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  000b6	89 4d fc	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000b9	50		 push	 eax
  000ba	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3042 :         _My_data._Myres       = _New_capacity;

  000bf	8b 4d fc	 mov	 ecx, DWORD PTR $T2[ebp]
  000c2	8b d0		 mov	 edx, eax
  000c4	8d 04 33	 lea	 eax, DWORD PTR [ebx+esi]
  000c7	89 4f 14	 mov	 DWORD PTR [edi+20], ecx
  000ca	89 47 10	 mov	 DWORD PTR [edi+16], eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000cd	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3043 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000d0	0f be 45 10	 movsx	 eax, BYTE PTR __Ch$[ebp]
  000d4	89 45 10	 mov	 DWORD PTR tv565[ebp], eax
  000d7	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  000da	2b d8		 sub	 ebx, eax
  000dc	43		 inc	 ebx
  000dd	89 55 ec	 mov	 DWORD PTR __New_ptr$1$[ebp], edx
  000e0	89 5d f0	 mov	 DWORD PTR tv559[ebp], ebx

; 3044 :         if (_Old_capacity > _Small_string_capacity) {

  000e3	0f ae e8	 lfence
  000e6	8d 0c 02	 lea	 ecx, DWORD PTR [edx+eax]
  000e9	89 4d fc	 mov	 DWORD PTR tv560[ebp], ecx
  000ec	03 ce		 add	 ecx, esi
  000ee	83 7d f8 0f	 cmp	 DWORD PTR $T1[ebp], 15	; 0000000fH
  000f2	89 4d f4	 mov	 DWORD PTR tv558[ebp], ecx
  000f5	50		 push	 eax
  000f6	76 67		 jbe	 SHORT $LN23@insert

; 3045 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000f8	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000fa	56		 push	 esi
  000fb	52		 push	 edx
  000fc	e8 00 00 00 00	 call	 _memcpy

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00101	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  00104	53		 push	 ebx
  00105	ff 75 10	 push	 DWORD PTR tv565[ebp]
  00108	ff 75 fc	 push	 DWORD PTR tv560[ebp]
  0010b	e8 00 00 00 00	 call	 _memset

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00110	ff 75 f0	 push	 DWORD PTR tv559[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00113	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
  00116	03 c6		 add	 eax, esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00118	50		 push	 eax
  00119	ff 75 f4	 push	 DWORD PTR tv558[ebp]
  0011c	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00121	8b 4d f8	 mov	 ecx, DWORD PTR $T1[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00124	83 c4 24	 add	 esp, 36			; 00000024H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  00127	41		 inc	 ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  00128	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  0012e	72 12		 jb	 SHORT $LN67@insert

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  00130	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  00133	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  00136	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00138	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  0013b	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  0013e	77 5e		 ja	 SHORT $LN66@insert

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00140	8b f2		 mov	 esi, edx
$LN67@insert:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00142	51		 push	 ecx
  00143	56		 push	 esi
  00144	0f ae e8	 lfence
  00147	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1798 :         return _Reallocate_grow_by(

  0014c	8b 45 ec	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  0014f	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1798 :         return _Reallocate_grow_by(

  00152	89 07		 mov	 DWORD PTR [edi], eax

; 1807 :     }

  00154	8b c7		 mov	 eax, edi
  00156	5f		 pop	 edi
  00157	5e		 pop	 esi
  00158	5b		 pop	 ebx
  00159	8b e5		 mov	 esp, ebp
  0015b	5d		 pop	 ebp
  0015c	c2 0c 00	 ret	 12			; 0000000cH
$LN23@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  0015f	57		 push	 edi
  00160	52		 push	 edx
  00161	e8 00 00 00 00	 call	 _memcpy

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00166	56		 push	 esi
  00167	ff 75 10	 push	 DWORD PTR tv565[ebp]
  0016a	ff 75 fc	 push	 DWORD PTR tv560[ebp]
  0016d	e8 00 00 00 00	 call	 _memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00172	8b 45 08	 mov	 eax, DWORD PTR __Off$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00175	53		 push	 ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1804 :                 _Traits::copy(_New_ptr + _Off + _Count, _Old_ptr + _Off, _Old_size - _Off + 1);

  00176	03 c7		 add	 eax, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00178	50		 push	 eax
  00179	ff 75 f4	 push	 DWORD PTR tv558[ebp]
  0017c	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1798 :         return _Reallocate_grow_by(

  00181	8b 45 ec	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00184	83 c4 24	 add	 esp, 36			; 00000024H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1798 :         return _Reallocate_grow_by(

  00187	89 07		 mov	 DWORD PTR [edi], eax

; 1807 :     }

  00189	8b c7		 mov	 eax, edi
  0018b	5f		 pop	 edi
  0018c	5e		 pop	 esi
  0018d	5b		 pop	 ebx
  0018e	8b e5		 mov	 esp, ebp
  00190	5d		 pop	 ebp
  00191	c2 0c 00	 ret	 12			; 0000000cH
$LN96@insert:

; 470  :             _Xran();

  00194	e8 00 00 00 00	 call	 ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ; std::_String_val<std::_Simple_types<char> >::_Xran
$LN97@insert:

; 3030 :             _Xlen_string(); // result too long

  00199	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN66@insert:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  0019e	6a 00		 push	 0
  001a0	6a 00		 push	 0
  001a2	6a 00		 push	 0
  001a4	6a 00		 push	 0
  001a6	6a 00		 push	 0
  001a8	e8 00 00 00 00	 call	 __invoke_watson
$LN92@insert:
  001ad	cc		 int	 3
?insert@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@IID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::insert
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__New_ptr$1$ = -12					; size = 4
__Old_size$1$ = -8					; size = 4
tv510 = -8						; size = 4
$T1 = -4						; size = 4
__Count$ = 8						; size = 4
__New_size$1$ = 8					; size = 4
tv523 = 8						; size = 4
__Ch$ = 12						; size = 1
tv517 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1537 :     _CONSTEXPR20 basic_string& append(_CRT_GUARDOVERFLOW const size_type _Count, const _Elem _Ch) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00006	53		 push	 ebx

; 1538 :         // append _Count * _Ch
; 1539 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1540 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00016	2b c1		 sub	 eax, ecx
  00018	89 4d f8	 mov	 DWORD PTR __Old_size$1$[ebp], ecx
  0001b	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 30		 ja	 SHORT $LN2@append

; 1541 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1542 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 435  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 453  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 436  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 437  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:

; 1543 :             _Elem* const _Old_ptr   = _Mypair._Myval2._Myptr();
; 1544 :             _Traits::assign(_Old_ptr + _Old_size, _Count, _Ch);

  00031	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00034	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  00038	53		 push	 ebx
  00039	50		 push	 eax
  0003a	56		 push	 esi
  0003b	e8 00 00 00 00	 call	 _memset
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1545 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00043	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1558 :     }

  00047	8b c7		 mov	 eax, edi
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	8b e5		 mov	 esp, ebp
  0004e	5d		 pop	 ebp
  0004f	c2 08 00	 ret	 8
$LN2@append:

; 3029 :         if (max_size() - _Old_size < _Size_increase) {

  00052	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00057	2b c1		 sub	 eax, ecx
  00059	3b c3		 cmp	 eax, ebx
  0005b	0f 82 f0 00 00
	00		 jb	 $LN82@append

; 3031 :         }
; 3032 : 
; 3033 :         const size_type _New_size     = _Old_size + _Size_increase;

  00061	8d 04 19	 lea	 eax, DWORD PTR [ecx+ebx]

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  00064	8b f0		 mov	 esi, eax

; 3033 :         const size_type _New_size     = _Old_size + _Size_increase;

  00066	89 45 08	 mov	 DWORD PTR __New_size$1$[ebp], eax

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  00069	83 ce 0f	 or	 esi, 15			; 0000000fH
  0006c	81 fe ff ff ff
	7f		 cmp	 esi, 2147483647		; 7fffffffH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00072	76 07		 jbe	 SHORT $LN23@append

; 2980 :             return _Max;

  00074	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  00079	eb 1e		 jmp	 SHORT $LN22@append
$LN23@append:

; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  0007b	8b ca		 mov	 ecx, edx
  0007d	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00082	d1 e9		 shr	 ecx, 1
  00084	2b c1		 sub	 eax, ecx
  00086	3b d0		 cmp	 edx, eax
  00088	76 07		 jbe	 SHORT $LN24@append

; 2984 :             return _Max;

  0008a	be ff ff ff 7f	 mov	 esi, 2147483647		; 7fffffffH
  0008f	eb 08		 jmp	 SHORT $LN22@append
$LN24@append:

; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00091	8d 04 11	 lea	 eax, DWORD PTR [ecx+edx]
  00094	3b f0		 cmp	 esi, eax
  00096	0f 42 f0	 cmovb	 esi, eax
$LN22@append:

; 825  :         ++_Capacity; // Take null terminator into consideration

  00099	8d 46 01	 lea	 eax, DWORD PTR [esi+1]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3041 :         _My_data._Mysize      = _New_size;

  000a2	8b 4d 08	 mov	 ecx, DWORD PTR __New_size$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000a5	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3044 :         if (_Old_capacity > _Small_string_capacity) {

  000a8	83 7d fc 0f	 cmp	 DWORD PTR $T1[ebp], 15	; 0000000fH
  000ac	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
  000af	0f be 4d 0c	 movsx	 ecx, BYTE PTR __Ch$[ebp]
  000b3	89 4d 0c	 mov	 DWORD PTR tv517[ebp], ecx
  000b6	8b 4d f8	 mov	 ecx, DWORD PTR __Old_size$1$[ebp]
  000b9	89 77 14	 mov	 DWORD PTR [edi+20], esi
  000bc	89 45 f4	 mov	 DWORD PTR __New_ptr$1$[ebp], eax
  000bf	51		 push	 ecx
  000c0	8d 34 08	 lea	 esi, DWORD PTR [eax+ecx]
  000c3	8d 14 1e	 lea	 edx, DWORD PTR [esi+ebx]
  000c6	89 75 08	 mov	 DWORD PTR tv523[ebp], esi
  000c9	89 55 f8	 mov	 DWORD PTR tv510[ebp], edx
  000cc	76 59		 jbe	 SHORT $LN16@append

; 3045 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000ce	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000d0	56		 push	 esi
  000d1	50		 push	 eax
  000d2	e8 00 00 00 00	 call	 _memcpy

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  000d7	53		 push	 ebx
  000d8	ff 75 0c	 push	 DWORD PTR tv517[ebp]
  000db	ff 75 08	 push	 DWORD PTR tv523[ebp]
  000de	e8 00 00 00 00	 call	 _memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1555 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000e3	8b 45 f8	 mov	 eax, DWORD PTR tv510[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  000e6	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e9	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  000ec	41		 inc	 ecx

; 1555 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000ed	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000f0	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f6	72 12		 jb	 SHORT $LN57@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f8	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000fb	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000fe	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00100	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  00103	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00106	77 4e		 ja	 SHORT $LN56@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00108	8b f2		 mov	 esi, edx
$LN57@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  0010a	51		 push	 ecx
  0010b	56		 push	 esi
  0010c	0f ae e8	 lfence
  0010f	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1549 :         return _Reallocate_grow_by(

  00114	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00117	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1549 :         return _Reallocate_grow_by(

  0011a	89 07		 mov	 DWORD PTR [edi], eax

; 1558 :     }

  0011c	8b c7		 mov	 eax, edi
  0011e	5f		 pop	 edi
  0011f	5e		 pop	 esi
  00120	5b		 pop	 ebx
  00121	8b e5		 mov	 esp, ebp
  00123	5d		 pop	 ebp
  00124	c2 08 00	 ret	 8
$LN16@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00127	57		 push	 edi
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 _memcpy

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0012e	53		 push	 ebx
  0012f	ff 75 0c	 push	 DWORD PTR tv517[ebp]
  00132	56		 push	 esi
  00133	e8 00 00 00 00	 call	 _memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1555 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00138	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0013b	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1555 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0013e	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1549 :         return _Reallocate_grow_by(

  00141	8b 45 f4	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  00144	89 07		 mov	 DWORD PTR [edi], eax

; 1558 :     }

  00146	8b c7		 mov	 eax, edi
  00148	5f		 pop	 edi
  00149	5e		 pop	 esi
  0014a	5b		 pop	 ebx
  0014b	8b e5		 mov	 esp, ebp
  0014d	5d		 pop	 ebp
  0014e	c2 08 00	 ret	 8
$LN82@append:

; 3030 :             _Xlen_string(); // result too long

  00151	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00156	6a 00		 push	 0
  00158	6a 00		 push	 0
  0015a	6a 00		 push	 0
  0015c	6a 00		 push	 0
  0015e	6a 00		 push	 0
  00160	e8 00 00 00 00	 call	 __invoke_watson
$LN79@append:
  00165	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__New_ptr$1$ = -16					; size = 4
__Old_size$1$ = -12					; size = 4
tv503 = -8						; size = 4
$T1 = -4						; size = 4
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
$T2 = 12						; size = 4
tv508 = 12						; size = 4
tv516 = 12						; size = 4
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 1510 :         _In_reads_(_Count) const _Elem* const _Ptr, _CRT_GUARDOVERFLOW const size_type _Count) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 10	 sub	 esp, 16			; 00000010H
  00006	53		 push	 ebx

; 1511 :         // append [_Ptr, _Ptr + _Count)
; 1512 :         const size_type _Old_size = _Mypair._Myval2._Mysize;
; 1513 :         if (_Count <= _Mypair._Myval2._Myres - _Old_size) {

  00007	8b 5d 0c	 mov	 ebx, DWORD PTR __Count$[ebp]
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8b f9		 mov	 edi, ecx
  0000e	8b 57 14	 mov	 edx, DWORD PTR [edi+20]
  00011	8b c2		 mov	 eax, edx
  00013	8b 77 10	 mov	 esi, DWORD PTR [edi+16]
  00016	2b c6		 sub	 eax, esi
  00018	89 75 f4	 mov	 DWORD PTR __Old_size$1$[ebp], esi
  0001b	89 55 fc	 mov	 DWORD PTR $T1[ebp], edx
  0001e	3b d8		 cmp	 ebx, eax
  00020	77 2d		 ja	 SHORT $LN2@append

; 1514 :             _ASAN_STRING_MODIFY(*this, _Old_size, _Old_size + _Count);
; 1515 :             _Mypair._Myval2._Mysize = _Old_size + _Count;

  00022	8d 04 1e	 lea	 eax, DWORD PTR [esi+ebx]
  00025	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 435  :         value_type* _Result = _Bx._Buf;

  00028	8b c7		 mov	 eax, edi

; 453  :         return _Myres > _Small_string_capacity;

  0002a	83 fa 0f	 cmp	 edx, 15			; 0000000fH

; 436  :         if (_Large_mode_engaged()) {

  0002d	76 02		 jbe	 SHORT $LN5@append

; 437  :             _Result = _Unfancy(_Bx._Ptr);

  0002f	8b 07		 mov	 eax, DWORD PTR [edi]
$LN5@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00031	53		 push	 ebx
  00032	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1517 :             _Traits::move(_Old_ptr + _Old_size, _Ptr, _Count);

  00035	03 f0		 add	 esi, eax
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 174  :         _CSTD memmove(_First1, _First2, _Count * sizeof(_Elem));

  00037	56		 push	 esi
  00038	e8 00 00 00 00	 call	 _memmove
  0003d	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1518 :             _Traits::assign(_Old_ptr[_Old_size + _Count], _Elem());

  00040	c6 04 1e 00	 mov	 BYTE PTR [esi+ebx], 0

; 1531 :     }

  00044	8b c7		 mov	 eax, edi
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5b		 pop	 ebx
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c2 08 00	 ret	 8
$LN2@append:

; 3029 :         if (max_size() - _Old_size < _Size_increase) {

  0004f	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  00054	2b c6		 sub	 eax, esi
  00056	3b c3		 cmp	 eax, ebx
  00058	0f 82 f1 00 00
	00		 jb	 $LN83@append

; 3031 :         }
; 3032 : 
; 3033 :         const size_type _New_size     = _Old_size + _Size_increase;

  0005e	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  00061	83 c9 0f	 or	 ecx, 15			; 0000000fH
  00064	81 f9 ff ff ff
	7f		 cmp	 ecx, 2147483647		; 7fffffffH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  0006a	76 07		 jbe	 SHORT $LN23@append

; 2980 :             return _Max;

  0006c	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  00071	eb 24		 jmp	 SHORT $LN81@append
$LN23@append:

; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows

  00073	8b c2		 mov	 eax, edx
  00075	d1 e8		 shr	 eax, 1
  00077	89 45 0c	 mov	 DWORD PTR tv508[ebp], eax
  0007a	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  0007f	2b 45 0c	 sub	 eax, DWORD PTR tv508[ebp]
  00082	3b d0		 cmp	 edx, eax
  00084	76 07		 jbe	 SHORT $LN24@append

; 2984 :             return _Max;

  00086	b9 ff ff ff 7f	 mov	 ecx, 2147483647		; 7fffffffH
  0008b	eb 0a		 jmp	 SHORT $LN81@append
$LN24@append:

; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  0008d	8b 45 0c	 mov	 eax, DWORD PTR tv508[ebp]
  00090	03 c2		 add	 eax, edx
  00092	3b c8		 cmp	 ecx, eax
  00094	0f 42 c8	 cmovb	 ecx, eax
$LN81@append:

; 825  :         ++_Capacity; // Take null terminator into consideration

  00097	8d 41 01	 lea	 eax, DWORD PTR [ecx+1]
  0009a	89 4d 0c	 mov	 DWORD PTR $T2[ebp], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3041 :         _My_data._Mysize      = _New_size;

  000a3	8d 0c 1e	 lea	 ecx, DWORD PTR [esi+ebx]
  000a6	89 45 f0	 mov	 DWORD PTR __New_ptr$1$[ebp], eax
  000a9	89 4f 10	 mov	 DWORD PTR [edi+16], ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  000ac	83 c4 04	 add	 esp, 4
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3042 :         _My_data._Myres       = _New_capacity;

  000af	8b 4d 0c	 mov	 ecx, DWORD PTR $T2[ebp]
  000b2	89 4f 14	 mov	 DWORD PTR [edi+20], ecx

; 3043 :         _Elem* const _Raw_new = _Unfancy(_New_ptr);

  000b5	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]
  000b8	89 4d 0c	 mov	 DWORD PTR tv516[ebp], ecx
  000bb	03 cb		 add	 ecx, ebx

; 3044 :         if (_Old_capacity > _Small_string_capacity) {

  000bd	83 7d fc 0f	 cmp	 DWORD PTR $T1[ebp], 15	; 0000000fH
  000c1	89 4d f8	 mov	 DWORD PTR tv503[ebp], ecx
  000c4	76 5c		 jbe	 SHORT $LN16@append
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000c6	ff 75 f4	 push	 DWORD PTR __Old_size$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 3045 :             const pointer _Old_ptr = _My_data._Bx._Ptr;

  000c9	8b 37		 mov	 esi, DWORD PTR [edi]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000cb	56		 push	 esi
  000cc	50		 push	 eax
  000cd	e8 00 00 00 00	 call	 _memcpy
  000d2	53		 push	 ebx
  000d3	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  000d6	ff 75 0c	 push	 DWORD PTR tv516[ebp]
  000d9	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1528 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000de	8b 45 f8	 mov	 eax, DWORD PTR tv503[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  000e1	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 852  :         _Al.deallocate(_Old_ptr, _Capacity + 1); // +1 for null terminator

  000e4	8b 4d fc	 mov	 ecx, DWORD PTR $T1[ebp]
  000e7	41		 inc	 ecx

; 1528 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  000e8	c6 00 00	 mov	 BYTE PTR [eax], 0
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 284  :         if (_Bytes >= _Big_allocation_threshold) {

  000eb	81 f9 00 10 00
	00		 cmp	 ecx, 4096		; 00001000H
  000f1	72 12		 jb	 SHORT $LN57@append

; 205  :     const uintptr_t _Ptr_container   = _Ptr_user[-1];

  000f3	8b 56 fc	 mov	 edx, DWORD PTR [esi-4]
  000f6	83 c1 23	 add	 ecx, 35			; 00000023H

; 206  : 
; 207  :     // If the following asserts, it likely means that we are performing
; 208  :     // an aligned delete on memory coming from an unaligned allocation.
; 209  :     _STL_ASSERT(_Ptr_user[-2] == _Big_allocation_sentinel, "invalid argument");
; 210  : 
; 211  :     // Extra paranoia on aligned allocation/deallocation; ensure _Ptr_container is
; 212  :     // in range [_Min_back_shift, _Non_user_size]
; 213  : #ifdef _DEBUG
; 214  :     constexpr uintptr_t _Min_back_shift = 2 * sizeof(void*);
; 215  : #else // ^^^ defined(_DEBUG) / !defined(_DEBUG) vvv
; 216  :     constexpr uintptr_t _Min_back_shift = sizeof(void*);
; 217  : #endif // ^^^ !defined(_DEBUG) ^^^
; 218  :     const uintptr_t _Back_shift = reinterpret_cast<uintptr_t>(_Ptr) - _Ptr_container;

  000f9	2b f2		 sub	 esi, edx

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  000fb	8d 46 fc	 lea	 eax, DWORD PTR [esi-4]
  000fe	83 f8 1f	 cmp	 eax, 31			; 0000001fH
  00101	77 51		 ja	 SHORT $LN56@append

; 220  :     _Ptr = reinterpret_cast<void*>(_Ptr_container);

  00103	8b f2		 mov	 esi, edx
$LN57@append:

; 289  :         ::operator delete(_Ptr, _Bytes);

  00105	51		 push	 ecx
  00106	56		 push	 esi
  00107	0f ae e8	 lfence
  0010a	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1522 :         return _Reallocate_grow_by(

  0010f	8b 45 f0	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 289  :         ::operator delete(_Ptr, _Bytes);

  00112	83 c4 08	 add	 esp, 8
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1522 :         return _Reallocate_grow_by(

  00115	89 07		 mov	 DWORD PTR [edi], eax

; 1531 :     }

  00117	8b c7		 mov	 eax, edi
  00119	5f		 pop	 edi
  0011a	5e		 pop	 esi
  0011b	5b		 pop	 ebx
  0011c	8b e5		 mov	 esp, ebp
  0011e	5d		 pop	 ebp
  0011f	c2 08 00	 ret	 8
$LN16@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00122	56		 push	 esi
  00123	57		 push	 edi
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 _memcpy
  0012a	53		 push	 ebx
  0012b	ff 75 08	 push	 DWORD PTR __Ptr$[ebp]
  0012e	ff 75 0c	 push	 DWORD PTR tv516[ebp]
  00131	e8 00 00 00 00	 call	 _memcpy
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1528 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  00136	8b 45 f8	 mov	 eax, DWORD PTR tv503[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 121  :         _CSTD memcpy(_First1, _First2, _Count * sizeof(_Elem));

  00139	83 c4 18	 add	 esp, 24			; 00000018H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 1528 :                 _Traits::assign(_New_ptr[_Old_size + _Count], _Elem());

  0013c	c6 00 00	 mov	 BYTE PTR [eax], 0

; 1522 :         return _Reallocate_grow_by(

  0013f	8b 45 f0	 mov	 eax, DWORD PTR __New_ptr$1$[ebp]
  00142	89 07		 mov	 DWORD PTR [edi], eax

; 1531 :     }

  00144	8b c7		 mov	 eax, edi
  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	8b e5		 mov	 esp, ebp
  0014b	5d		 pop	 ebp
  0014c	c2 08 00	 ret	 8
$LN83@append:

; 3030 :             _Xlen_string(); // result too long

  0014f	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN56@append:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 219  :     _STL_VERIFY(_Back_shift >= _Min_back_shift && _Back_shift <= _Non_user_size, "invalid argument");

  00154	6a 00		 push	 0
  00156	6a 00		 push	 0
  00158	6a 00		 push	 0
  0015a	6a 00		 push	 0
  0015c	6a 00		 push	 0
  0015e	e8 00 00 00 00	 call	 __invoke_watson
$LN79@append:
  00163	cc		 int	 3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1383 :         _Tidy_deallocate();

  00000	e9 00 00 00 00	 jmp	 ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 785  :         : _Mypair(_Zero_then_variadic_args_t{}) { // construct from _Count * _Ch

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	53		 push	 ebx

; 881  :         if (_Count > max_size()) {

  00004	8b 5d 08	 mov	 ebx, DWORD PTR __Count$[ebp]
  00007	0f 57 c0	 xorps	 xmm0, xmm0

; 785  :         : _Mypair(_Zero_then_variadic_args_t{}) { // construct from _Count * _Ch

  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx

; 493  :         _CONSTEXPR20 _Bxty() noexcept : _Buf() {} // user-provided, for fancy pointers

  0000d	0f 11 07	 movups	 XMMWORD PTR [edi], xmm0

; 517  :     size_type _Mysize = 0; // current length of string (size)

  00010	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0

; 518  :     size_type _Myres  = 0; // current storage reserved for string (capacity)

  00017	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0

; 881  :         if (_Count > max_size()) {

  0001e	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH
  00024	77 7c		 ja	 SHORT $LN46@basic_stri

; 883  :         }
; 884  : 
; 885  :         auto& _Al       = _Getal();
; 886  :         auto&& _Alproxy = _GET_PROXY_ALLOCATOR(_Alty, _Al);
; 887  :         _Container_proxy_ptr<_Alty> _Proxy(_Alproxy, _My_data);
; 888  : 
; 889  :         if (_Count <= _Small_string_capacity) {

  00026	83 fb 0f	 cmp	 ebx, 15			; 0000000fH
  00029	77 25		 ja	 SHORT $LN18@basic_stri
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0002b	0f be 45 0c	 movsx	 eax, BYTE PTR __Ch$[ebp]
  0002f	53		 push	 ebx
  00030	50		 push	 eax
  00031	57		 push	 edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 890  :             _My_data._Mysize = _Count;

  00032	89 5f 10	 mov	 DWORD PTR [edi+16], ebx

; 891  :             _My_data._Myres  = _Small_string_capacity;

  00035	c7 47 14 0f 00
	00 00		 mov	 DWORD PTR [edi+20], 15	; 0000000fH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0003c	e8 00 00 00 00	 call	 _memset
  00041	83 c4 0c	 add	 esp, 12			; 0000000cH
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 895  :                 _Traits::assign(_My_data._Bx._Buf[_Count], _Elem());

  00044	c6 04 3b 00	 mov	 BYTE PTR [ebx+edi], 0

; 786  :         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
; 787  :     }

  00048	8b c7		 mov	 eax, edi
  0004a	5f		 pop	 edi
  0004b	5b		 pop	 ebx
  0004c	5d		 pop	 ebp
  0004d	c2 08 00	 ret	 8
$LN18@basic_stri:

; 2978 :         const size_type _Masked = _Requested | _Alloc_mask;

  00050	83 cb 0f	 or	 ebx, 15			; 0000000fH
  00053	81 fb ff ff ff
	7f		 cmp	 ebx, 2147483647		; 7fffffffH

; 2979 :         if (_Masked > _Max) { // the mask overflows, settle for max_size()

  00059	76 07		 jbe	 SHORT $LN24@basic_stri

; 2980 :             return _Max;

  0005b	bb ff ff ff 7f	 mov	 ebx, 2147483647		; 7fffffffH
  00060	eb 0a		 jmp	 SHORT $LN23@basic_stri
$LN24@basic_stri:

; 2981 :         }
; 2982 : 
; 2983 :         if (_Old > _Max - _Old / 2) { // similarly, geometric overflows
; 2984 :             return _Max;
; 2985 :         }
; 2986 : 
; 2987 :         return (_STD max)(_Masked, _Old + _Old / 2);

  00062	b8 16 00 00 00	 mov	 eax, 22			; 00000016H
  00067	3b d8		 cmp	 ebx, eax
  00069	0f 42 d8	 cmovb	 ebx, eax
$LN23@basic_stri:

; 825  :         ++_Capacity; // Take null terminator into consideration

  0006c	8d 43 01	 lea	 eax, DWORD PTR [ebx+1]
  0006f	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory

; 990  :         return static_cast<_Ty*>(_STD _Allocate<_New_alignof<_Ty>>(_Get_size_of_n<sizeof(_Ty)>(_Count)));

  00070	50		 push	 eax
  00071	e8 00 00 00 00	 call	 ??$_Allocate@$07U_Default_allocate_traits@std@@@std@@YAPAXI@Z ; std::_Allocate<8,std::_Default_allocate_traits>
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00076	0f be 4d 0c	 movsx	 ecx, BYTE PTR __Ch$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 912  :         const pointer _New_ptr  = _Allocate_for_capacity(_Al, _New_capacity); // throws

  0007a	8b f0		 mov	 esi, eax

; 914  : 
; 915  :         _My_data._Mysize = _Count;

  0007c	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0007f	50		 push	 eax
  00080	51		 push	 ecx
  00081	56		 push	 esi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 913  :         _Construct_in_place(_My_data._Bx._Ptr, _New_ptr);

  00082	89 37		 mov	 DWORD PTR [edi], esi

; 914  : 
; 915  :         _My_data._Mysize = _Count;

  00084	89 47 10	 mov	 DWORD PTR [edi+16], eax

; 916  :         _My_data._Myres  = _New_capacity;

  00087	89 5f 14	 mov	 DWORD PTR [edi+20], ebx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  0008a	e8 00 00 00 00	 call	 _memset
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 919  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0008f	8b 45 08	 mov	 eax, DWORD PTR __Count$[ebp]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\__msvc_string_view.hpp

; 493  :         return static_cast<_Elem*>(_CSTD memset(_First, _Ch, _Count));

  00092	83 c4 10	 add	 esp, 16			; 00000010H
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring

; 919  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  00095	c6 04 06 00	 mov	 BYTE PTR [esi+eax], 0

; 786  :         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
; 787  :     }

  00099	8b c7		 mov	 eax, edi

; 919  :             _Traits::assign(_Unfancy(_New_ptr)[_Count], _Elem());

  0009b	5e		 pop	 esi

; 786  :         _Construct<_Construct_strategy::_From_char>(_Ch, _Count);
; 787  :     }

  0009c	5f		 pop	 edi
  0009d	5b		 pop	 ebx
  0009e	5d		 pop	 ebp
  0009f	c2 08 00	 ret	 8
$LN46@basic_stri:

; 882  :             _Xlen_string(); // result too long

  000a2	e8 00 00 00 00	 call	 ?_Xlen_string@std@@YAXXZ ; std::_Xlen_string
$LN44@basic_stri:
  000a7	cc		 int	 3
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Xran, COMDAT

; 482  :         _Xout_of_range("invalid string position");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position@
  00005	e8 00 00 00 00	 call	 ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range
$LN3@Xran:
  0000a	cc		 int	 3
?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xstring
;	COMDAT ?_Xlen_string@std@@YAXXZ
_TEXT	SEGMENT
?_Xlen_string@std@@YAXXZ PROC				; std::_Xlen_string, COMDAT

; 531  :     _Xlength_error("string too long");

  00000	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long@
  00005	e8 00 00 00 00	 call	 ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error
$LN3@Xlen_strin:
  0000a	cc		 int	 3
?_Xlen_string@std@@YAXXZ ENDP				; std::_Xlen_string
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xmemory
;	COMDAT ?_Throw_bad_array_new_length@std@@YAXXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?_Throw_bad_array_new_length@std@@YAXXZ PROC		; std::_Throw_bad_array_new_length, COMDAT

; 107  : [[noreturn]] inline void _Throw_bad_array_new_length() {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 108  :     _THROW(bad_array_new_length{});

  00006	8d 4d f4	 lea	 ecx, DWORD PTR $T1[ebp]
  00009	e8 00 00 00 00	 call	 ??0bad_array_new_length@std@@QAE@XZ ; std::bad_array_new_length::bad_array_new_length
  0000e	68 00 00 00 00	 push	 OFFSET __TI3?AVbad_array_new_length@std@@
  00013	8d 45 f4	 lea	 eax, DWORD PTR $T1[ebp]
  00016	50		 push	 eax
  00017	e8 00 00 00 00	 call	 __CxxThrowException@8
$LN3@Throw_bad_:
  0001c	cc		 int	 3
?_Throw_bad_array_new_length@std@@YAXXZ ENDP		; std::_Throw_bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??_Gbad_array_new_length@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_array_new_length@std@@UAEPAXI@Z PROC		; std::bad_array_new_length::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN18@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN18@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_array_new_length@std@@UAEPAXI@Z ENDP		; std::bad_array_new_length::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_array_new_length@std@@QAE@ABV01@@Z PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_array_new_length@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_array_new_length@std@@QAE@ABV01@@Z ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??1bad_array_new_length@std@@UAE@XZ
_TEXT	SEGMENT
??1bad_array_new_length@std@@UAE@XZ PROC		; std::bad_array_new_length::~bad_array_new_length, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx
  00010	c3		 ret	 0
??1bad_array_new_length@std@@UAE@XZ ENDP		; std::bad_array_new_length::~bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0bad_array_new_length@std@@QAE@XZ
_TEXT	SEGMENT
??0bad_array_new_length@std@@QAE@XZ PROC		; std::bad_array_new_length::bad_array_new_length, COMDAT
; _this$ = ecx

; 144  :     {

  00000	0f 57 c0	 xorps	 xmm0, xmm0

; 145  :     }

  00003	8b c1		 mov	 eax, ecx

; 66   :         : _Data()

  00005	66 0f d6 41 04	 movq	 QWORD PTR [ecx+4], xmm0

; 67   :     {
; 68   :         _Data._What = _Message;

  0000a	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET ??_C@_0BF@KINCDENJ@bad?5array?5new?5length@

; 144  :     {

  00011	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7bad_array_new_length@std@@6B@

; 145  :     }

  00017	c3		 ret	 0
??0bad_array_new_length@std@@QAE@XZ ENDP		; std::bad_array_new_length::bad_array_new_length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??_Gbad_alloc@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gbad_alloc@std@@UAEPAXI@Z PROC			; std::bad_alloc::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN13@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN13@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gbad_alloc@std@@UAEPAXI@Z ENDP			; std::bad_alloc::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0bad_alloc@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0bad_alloc@std@@QAE@ABV01@@Z PROC			; std::bad_alloc::bad_alloc, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 73   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0

; 72   :         : _Data()

  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR ___that$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8
  00026	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7bad_alloc@std@@6B@
  0002c	8b c6		 mov	 eax, esi
  0002e	5e		 pop	 esi
  0002f	5d		 pop	 ebp
  00030	c2 04 00	 ret	 4
??0bad_alloc@std@@QAE@ABV01@@Z ENDP			; std::bad_alloc::bad_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??_Gexception@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gexception@std@@UAEPAXI@Z PROC			; std::exception::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 90   :     {

  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 91   :         __std_exception_destroy(&_Data);

  00006	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00009	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  0000f	50		 push	 eax
  00010	e8 00 00 00 00	 call	 ___std_exception_destroy
  00015	83 c4 04	 add	 esp, 4
  00018	f6 45 08 01	 test	 BYTE PTR ___flags$[ebp], 1
  0001c	74 0b		 je	 SHORT $LN8@scalar
  0001e	6a 0c		 push	 12			; 0000000cH
  00020	56		 push	 esi
  00021	e8 00 00 00 00	 call	 ??3@YAXPAXI@Z		; operator delete
  00026	83 c4 08	 add	 esp, 8
$LN8@scalar:
  00029	8b c6		 mov	 eax, esi
  0002b	5e		 pop	 esi
  0002c	5d		 pop	 ebp
  0002d	c2 04 00	 ret	 4
??_Gexception@std@@UAEPAXI@Z ENDP			; std::exception::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ?what@exception@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@exception@std@@UBEPBDXZ PROC			; std::exception::what, COMDAT
; _this$ = ecx

; 96   :         return _Data._What ? _Data._What : "Unknown exception";

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0BC@EOODALEL@Unknown?5exception@
  00008	85 c9		 test	 ecx, ecx
  0000a	0f 45 c1	 cmovne	 eax, ecx

; 97   :     }

  0000d	c3		 ret	 0
?what@exception@std@@UBEPBDXZ ENDP			; std::exception::what
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??1exception@std@@UAE@XZ
_TEXT	SEGMENT
??1exception@std@@UAE@XZ PROC				; std::exception::~exception, COMDAT
; _this$ = ecx

; 91   :         __std_exception_destroy(&_Data);

  00000	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  00003	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET ??_7exception@std@@6B@
  00009	50		 push	 eax
  0000a	e8 00 00 00 00	 call	 ___std_exception_destroy
  0000f	59		 pop	 ecx

; 92   :     }

  00010	c3		 ret	 0
??1exception@std@@UAE@XZ ENDP				; std::exception::~exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\vcruntime_exception.h
;	COMDAT ??0exception@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Other$ = 8						; size = 4
??0exception@std@@QAE@ABV01@@Z PROC			; std::exception::exception, COMDAT
; _this$ = ecx

; 73   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	0f 57 c0	 xorps	 xmm0, xmm0
  00009	8d 46 04	 lea	 eax, DWORD PTR [esi+4]

; 74   :         __std_exception_copy(&_Other._Data, &_Data);

  0000c	50		 push	 eax
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET ??_7exception@std@@6B@
  00013	66 0f d6 00	 movq	 QWORD PTR [eax], xmm0
  00017	8b 45 08	 mov	 eax, DWORD PTR __Other$[ebp]
  0001a	83 c0 04	 add	 eax, 4
  0001d	50		 push	 eax
  0001e	e8 00 00 00 00	 call	 ___std_exception_copy
  00023	83 c4 08	 add	 esp, 8

; 75   :     }

  00026	8b c6		 mov	 eax, esi
  00028	5e		 pop	 esi
  00029	5d		 pop	 ebp
  0002a	c2 04 00	 ret	 4
??0exception@std@@QAE@ABV01@@Z ENDP			; std::exception::exception
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\stdio.h
;	COMDAT _sprintf_s
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
_sprintf_s PROC						; COMDAT

; 1823 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1491 :         int const _Result = __stdio_common_vsprintf_s(

  00003	8d 45 14	 lea	 eax, DWORD PTR __Format$[ebp+4]
  00006	50		 push	 eax
  00007	6a 00		 push	 0
  00009	ff 75 10	 push	 DWORD PTR __Format$[ebp]
  0000c	ff 75 0c	 push	 DWORD PTR __BufferCount$[ebp]
  0000f	ff 75 08	 push	 DWORD PTR __Buffer$[ebp]
  00012	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00017	ff 70 04	 push	 DWORD PTR [eax+4]
  0001a	ff 30		 push	 DWORD PTR [eax]
  0001c	e8 00 00 00 00	 call	 ___stdio_common_vsprintf_s

; 1492 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS,
; 1493 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1494 : 
; 1495 :         return _Result < 0 ? -1 : _Result;

  00021	83 c9 ff	 or	 ecx, -1
  00024	83 c4 1c	 add	 esp, 28			; 0000001cH
  00027	85 c0		 test	 eax, eax
  00029	0f 48 c1	 cmovs	 eax, ecx

; 1824 :             int _Result;
; 1825 :             va_list _ArgList;
; 1826 :             __crt_va_start(_ArgList, _Format);
; 1827 :             _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);
; 1828 :             __crt_va_end(_ArgList);
; 1829 :             return _Result;
; 1830 :         }

  0002c	5d		 pop	 ebp
  0002d	c3		 ret	 0
_sprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 91   :         static unsigned __int64 _OptionsStorage;
; 92   :         return &_OptionsStorage;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 93   :     }

  00005	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
